#ifndef MASTER_TOP_H
#define MASTER_TOP_H

#define MASSIVE_MEMORY_DEBUGGINg
//#define full_slab_verify()

extern odft_truncate_range_hashtable(void);
extern odft_ondemand_isolate(char *);
extern int strcmp(char*, char *);

int logSfiFrame (char *what)	{
  // Go into SFI for all
  return 75;
  
  if (strcmp(what, "pegasus_get_msglevel") == 0)
	return 75;
  else return 0;  	
} 


int logStackFrame(char *a) {return 0;} 
int logStackVar(char *a) {return 0;}


int logWrite (void *addr , char *what, char *where, char *file , int line ) {
    return 0;
}


//#define logWrite(a,b,c,d,e) 0
//#define logRead(a,b,c,d,e) 0


int logRead (void *addr , char *what, char *where, char *file , int line ) {
    return 0;
}

int logAlloc(void *addr , int size , char *fn, char *file , char *allocfn,  int line ) {
    return;
}

int logFree(void *addr , char *fn , char *file , char *allocfn , int line ) { 
	return;
}


/*
void heapifyfree (void * addr)   {
    return;
}

void *heapifymalloc(int sizetoalloc) {
    return;
}
*/

static void *kmalloc(size_t, gfp_t);

///////////////////////////////////////////////////////////////////////////////
// Hack until we handle const properly,
// e.g. by detecting all const variables,
// ensuring they are all present in the object
// tracker, and then not marshaling them (ever).
///////////////////////////////////////////////////////////////////////////////
#define const /* */

//
// Memory integrity checking
//
#include "full_slab_verify.h"

///////////////////////////////////////////////////////////////////////////////
// Nooks calls
///////////////////////////////////////////////////////////////////////////////
#define nooks_ot_register_kernfn_w(X, Y)                                \
    do {                                                                \
        nooks_ot_register_kernfn (g_nooks_table, ((void *) X), Y);      \
    } while (0)

#define nooks_ot_lookup_kern_w(X, Y, Z)                                 \
    do {                                                                \
        nooks_ot_lookup_kern (g_nooks_table, X, Y, Z);                  \
    } while (0)

#define nooks_ot_storeoffset_kern_w(X, Y, Z)                            \
    do {                                                                \
        nooks_ot_storeoffset_kern (g_nooks_table, X, Y, Z);             \
    } while (0);

#define nooks_ot_alloc_arraymem_kern_w(W, X, Y, Z)                      \
    do {                                                                \
        nooks_ot_alloc_arraymem_kern (g_nooks_table, W, X, Y, Z);       \
    } while (0)

///////////////////////////////////////////////////////////////////////////////
// Need to include proto for these kernel functions otherwise marshaling code may be invalid.
///////////////////////////////////////////////////////////////////////////////
//extern int printk(const char *s, ...);
extern unsigned long strlen(const char *s);
extern void panic(const char * fmt, ...) __attribute__ ((noreturn, format (printf, 1, 2)));

///////////////////////////////////////////////////////////////////////////////
// All the variables that we register with the misc device are defined here.
///////////////////////////////////////////////////////////////////////////////
// Defined in misc device
extern unsigned int g_device_irq;
extern void *g_nooks_table; // Actually this is a pointer to a hash table.
extern int uprintk (const char *, ...);

// Functions called from generated marshaling code.
//extern void MJR_acquire_recursive_lock (void *);
//extern void MJR_release_recursive_lock (void *);
extern void *MJR_get_current(void);



// Calls generated by the splitter
#define MARSHWRAP_LOC1()                                

#define MARSHWRAP_LOC2()                               

#define MARSHWRAP_LOC3()                                \

#define MARSHWRAP_LOC4()                                \

#define STUB_LOC1()                                     \
    do {                                                \
	odft_truncate_range_hashtable();		\
    } while(0)

#define STUB_LOC2()                                     


///////////////////////////////////////////////////////////////////////////////
// General definitions of things we'll need in the master
///////////////////////////////////////////////////////////////////////////////
#include "demarshbuf_free.h"
#include "slave_master_ud_md_marshaling.h"
#include "slave_master_ud_md.h"
#include "MJR_external_functions.h"
#include "master_md_nooks_api.h"

#endif
