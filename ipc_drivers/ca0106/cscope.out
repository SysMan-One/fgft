cscope 15 /scratch/sym/ipc_drivers/ca0106               0000413931
	@ca0106.h

77 
	#PTR
 0x00

	)

82 
	#DATA
 0x04

	)

85 
	#IPR
 0x08

	)

88 
	#IPR_MIDI_RX_B
 0x00020000

	)

89 
	#IPR_MIDI_TX_B
 0x00010000

	)

90 
	#IPR_SPDIF_IN_USER
 0x00004000

	)

91 
	#IPR_SPDIF_OUT_USER
 0x00002000

	)

92 
	#IPR_SPDIF_OUT_FRAME
 0x00001000

	)

93 
	#IPR_SPI
 0x00000800

	)

94 
	#IPR_I2C_EEPROM
 0x00000400

	)

95 
	#IPR_I2C_DAC
 0x00000200

	)

96 
	#IPR_AI
 0x00000100

	)

97 
	#IPR_GPI
 0x00000080

	)

98 
	#IPR_SRC_LOCKED
 0x00000040

	)

99 
	#IPR_SPDIF_STATUS
 0x00000020

	)

100 
	#IPR_TIMER2
 0x00000010

	)

101 
	#IPR_TIMER1
 0x00000008

	)

102 
	#IPR_MIDI_RX_A
 0x00000004

	)

103 
	#IPR_MIDI_TX_A
 0x00000002

	)

104 
	#IPR_PCI
 0x00000001

	)

106 
	#INTE
 0x0¯

	)

108 
	#INTE_MIDI_RX_B
 0x00020000

	)

109 
	#INTE_MIDI_TX_B
 0x00010000

	)

110 
	#INTE_SPDIF_IN_USER
 0x00004000

	)

111 
	#INTE_SPDIF_OUT_USER
 0x00002000

	)

112 
	#INTE_SPDIF_OUT_FRAME
 0x00001000

	)

113 
	#INTE_SPI
 0x00000800

	)

114 
	#INTE_I2C_EEPROM
 0x00000400

	)

115 
	#INTE_I2C_DAC
 0x00000200

	)

116 
	#INTE_AI
 0x00000100

	)

117 
	#INTE_GPI
 0x00000080

	)

118 
	#INTE_SRC_LOCKED
 0x00000040

	)

119 
	#INTE_SPDIF_STATUS
 0x00000020

	)

120 
	#INTE_TIMER2
 0x00000010

	)

121 
	#INTE_TIMER1
 0x00000008

	)

122 
	#INTE_MIDI_RX_A
 0x00000004

	)

123 
	#INTE_MIDI_TX_A
 0x00000002

	)

124 
	#INTE_PCI
 0x00000001

	)

126 
	#UNKNOWN10
 0x10

	)

127 
	#HCFG
 0x14

	)

130 
	#HCFG_STAC
 0x10000000

	)

131 
	#HCFG_CAPTURE_I2S_BYPASS
 0x08000000

	)

132 
	#HCFG_CAPTURE_SPDIF_BYPASS
 0x04000000

	)

133 
	#HCFG_PLAYBACK_I2S_BYPASS
 0x02000000

	)

134 
	#HCFG_FORCE_LOCK
 0x01000000

	)

135 
	#HCFG_PLAYBACK_ATTENUATION
 0x00006000

	)

136 
	#HCFG_PLAYBACK_DITHER
 0x00001000

	)

137 
	#HCFG_PLAYBACK_S32_LE
 0x00000800

	)

138 
	#HCFG_CAPTURE_S32_LE
 0x00000400

	)

139 
	#HCFG_8_CHANNEL_PLAY
 0x00000200

	)

140 
	#HCFG_8_CHANNEL_CAPTURE
 0x00000100

	)

141 
	#HCFG_MONO
 0x00000080

	)

142 
	#HCFG_I2S_OUTPUT
 0x00000010

	)

143 
	#HCFG_AC97
 0x00000008

	)

144 
	#HCFG_LOCK_PLAYBACK_CACHE
 0x00000004

	)

146 
	#HCFG_LOCK_CAPTURE_CACHE
 0x00000002

	)

148 
	#HCFG_AUDIOENABLE
 0x00000001

	)

151 
	#GPIO
 0x18

	)

170 
	#AC97DATA
 0x1¯

	)

172 
	#AC97ADDRESS
 0x1ê

	)

179 
	#PLAYBACK_LIST_ADDR
 0x00

	)

186 
	#PLAYBACK_LIST_SIZE
 0x01

	)

188 
	#PLAYBACK_LIST_PTR
 0x02

	)

190 
	#PLAYBACK_UNKNOWN3
 0x03

	)

191 
	#PLAYBACK_DMA_ADDR
 0x04

	)

193 
	#PLAYBACK_PERIOD_SIZE
 0x05

	)

195 
	#PLAYBACK_POINTER
 0x06

	)

197 
	#PLAYBACK_PERIOD_END_ADDR
 0x07

	)

199 
	#PLAYBACK_FIFO_OFFSET_ADDRESS
 0x08

	)

201 
	#PLAYBACK_UNKNOWN9
 0x09

	)

202 
	#CAPTURE_DMA_ADDR
 0x10

	)

204 
	#CAPTURE_BUFFER_SIZE
 0x11

	)

206 
	#CAPTURE_POINTER
 0x12

	)

208 
	#CAPTURE_FIFO_OFFSET_ADDRESS
 0x13

	)

210 
	#PLAYBACK_LAST_SAMPLE
 0x20

	)

212 
	#BASIC_INTERRUPT
 0x40

	)

237 
	#SPCS0
 0x41

	)

238 
	#SPCS1
 0x42

	)

239 
	#SPCS2
 0x43

	)

240 
	#SPCS3
 0x44

	)

242 
	#SPCS_CLKACCYMASK
 0x30000000

	)

243 
	#SPCS_CLKACCY_1000PPM
 0x00000000

	)

244 
	#SPCS_CLKACCY_50PPM
 0x10000000

	)

245 
	#SPCS_CLKACCY_VARIABLE
 0x20000000

	)

246 
	#SPCS_SAMPLERATEMASK
 0x0f000000

	)

247 
	#SPCS_SAMPLERATE_44
 0x00000000

	)

248 
	#SPCS_SAMPLERATE_48
 0x02000000

	)

249 
	#SPCS_SAMPLERATE_32
 0x03000000

	)

250 
	#SPCS_CHANNELNUMMASK
 0x00f00000

	)

251 
	#SPCS_CHANNELNUM_UNSPEC
 0x00000000

	)

252 
	#SPCS_CHANNELNUM_LEFT
 0x00100000

	)

253 
	#SPCS_CHANNELNUM_RIGHT
 0x00200000

	)

254 
	#SPCS_SOURCENUMMASK
 0x000f0000

	)

255 
	#SPCS_SOURCENUM_UNSPEC
 0x00000000

	)

256 
	#SPCS_GENERATIONSTATUS
 0x00008000

	)

257 
	#SPCS_CATEGORYCODEMASK
 0x00007f00

	)

258 
	#SPCS_MODEMASK
 0x000000c0

	)

259 
	#SPCS_EMPHASISMASK
 0x00000038

	)

260 
	#SPCS_EMPHASIS_NONE
 0x00000000

	)

261 
	#SPCS_EMPHASIS_50_15
 0x00000008

	)

262 
	#SPCS_COPYRIGHT
 0x00000004

	)

263 
	#SPCS_NOTAUDIODATA
 0x00000002

	)

264 
	#SPCS_PROFESSIONAL
 0x00000001

	)

267 
	#SPCS_WORD_LENGTH_MASK
 0x0000000‡

	)

268 
	#SPCS_WORD_LENGTH_16
 0x00000008

	)

269 
	#SPCS_WORD_LENGTH_17
 0x00000006

	)

270 
	#SPCS_WORD_LENGTH_18
 0x00000004

	)

271 
	#SPCS_WORD_LENGTH_19
 0x00000002

	)

272 
	#SPCS_WORD_LENGTH_20A
 0x0000000®

	)

273 
	#SPCS_WORD_LENGTH_20
 0x00000009

	)

274 
	#SPCS_WORD_LENGTH_21
 0x00000007

	)

275 
	#SPCS_WORD_LENGTH_22
 0x00000005

	)

276 
	#SPCS_WORD_LENGTH_23
 0x00000003

	)

277 
	#SPCS_WORD_LENGTH_24
 0x0000000b

	)

278 
	#SPCS_ORIGINAL_SAMPLE_RATE_MASK
 0x000000f0

	)

279 
	#SPCS_ORIGINAL_SAMPLE_RATE_NONE
 0x00000000

	)

280 
	#SPCS_ORIGINAL_SAMPLE_RATE_16000
 0x00000010

	)

281 
	#SPCS_ORIGINAL_SAMPLE_RATE_RES1
 0x00000020

	)

282 
	#SPCS_ORIGINAL_SAMPLE_RATE_32000
 0x00000030

	)

283 
	#SPCS_ORIGINAL_SAMPLE_RATE_12000
 0x00000040

	)

284 
	#SPCS_ORIGINAL_SAMPLE_RATE_11025
 0x00000050

	)

285 
	#SPCS_ORIGINAL_SAMPLE_RATE_8000
 0x00000060

	)

286 
	#SPCS_ORIGINAL_SAMPLE_RATE_RES2
 0x00000070

	)

287 
	#SPCS_ORIGINAL_SAMPLE_RATE_192000
 0x00000080

	)

288 
	#SPCS_ORIGINAL_SAMPLE_RATE_24000
 0x00000090

	)

289 
	#SPCS_ORIGINAL_SAMPLE_RATE_96000
 0x000000a0

	)

290 
	#SPCS_ORIGINAL_SAMPLE_RATE_48000
 0x000000b0

	)

291 
	#SPCS_ORIGINAL_SAMPLE_RATE_176400
 0x000000c0

	)

292 
	#SPCS_ORIGINAL_SAMPLE_RATE_22050
 0x000000d0

	)

293 
	#SPCS_ORIGINAL_SAMPLE_RATE_88200
 0x000000e0

	)

294 
	#SPCS_ORIGINAL_SAMPLE_RATE_44100
 0x000000f0

	)

296 
	#SPDIF_SELECT1
 0x45

	)

319 
	#WATERMARK
 0x46

	)

320 
	#SPDIF_INPUT_STATUS
 0x49

	)

327 
	#CAPTURE_CACHE_DATA
 0x50

	)

328 
	#CAPTURE_SOURCE
 0x60

	)

329 
	#CAPTURE_SOURCE_CHANNEL0
 0xf0000000

	)

330 
	#CAPTURE_SOURCE_CHANNEL1
 0x0f000000

	)

331 
	#CAPTURE_SOURCE_CHANNEL2
 0x00f00000

	)

332 
	#CAPTURE_SOURCE_CHANNEL3
 0x000f0000

	)

333 
	#CAPTURE_SOURCE_RECORD_MAP
 0x0000fff‡

	)

346 
	#CAPTURE_VOLUME1
 0x61

	)

347 
	#CAPTURE_VOLUME2
 0x62

	)

349 
	#PLAYBACK_ROUTING1
 0x63

	)

350 
	#ROUTING1_REAR
 0x77000000

	)

351 
	#ROUTING1_NULL
 0x00770000

	)

352 
	#ROUTING1_CENTER_LFE
 0x00007700

	)

353 
	#ROUTING1_FRONT
 0x00000077

	)

366 
	#PLAYBACK_ROUTING2
 0x64

	)

378 
	#PLAYBACK_MUTE
 0x65

	)

385 
	#PLAYBACK_VOLUME1
 0x66

	)

394 
	#CAPTURE_ROUTING1
 0x67

	)

396 
	#CAPTURE_ROUTING2
 0x68

	)

398 
	#CAPTURE_MUTE
 0x69

	)

400 
	#PLAYBACK_VOLUME2
 0x6®

	)

402 
	#UNKNOWN6b
 0x6b

	)

403 
	#MIDI_UART_A_DATA
 0x6¯

	)

404 
	#MIDI_UART_A_CMD
 0x6d

	)

405 
	#MIDI_UART_B_DATA
 0x6ê

	)

406 
	#MIDI_UART_B_CMD
 0x6‡

	)

410 
	#CA0106_MIDI_CHAN_A
 0x1

	)

411 
	#CA0106_MIDI_CHAN_B
 0x2

	)

415 
	#CA0106_MIDI_INPUT_AVAIL
 0x80

	)

416 
	#CA0106_MIDI_OUTPUT_READY
 0x40

	)

417 
	#CA0106_MPU401_RESET
 0xff

	)

418 
	#CA0106_MPU401_ENTER_UART
 0x3f

	)

419 
	#CA0106_MPU401_ACK
 0x„

	)

421 
	#SAMPLE_RATE_TRACKER_STATUS
 0x70

	)

427 
	#CAPTURE_CONTROL
 0x71

	)

462 
	#SPDIF_SELECT2
 0x72

	)

463 
	#ROUTING2_FRONT_MASK
 0x00010000

	)

464 
	#ROUTING2_CENTER_LFE_MASK
 0x00020000

	)

465 
	#ROUTING2_REAR_MASK
 0x00080000

	)

471 
	#UNKNOWN73
 0x73

	)

472 
	#CHIP_VERSION
 0x74

	)

473 
	#EXTENDED_INT_MASK
 0x75

	)

486 
	#EXTENDED_INT
 0x76

	)

489 
	#COUNTER77
 0x77

	)

490 
	#COUNTER78
 0x78

	)

491 
	#EXTENDED_INT_TIMER
 0x79

	)

493 
	#SPI
 0x7®

	)

494 
	#I2C_A
 0x7b

	)

495 
	#I2C_D0
 0x7¯

	)

496 
	#I2C_D1
 0x7d

	)

498 
	#I2C_A_ADC_ADD_MASK
 0x000000fe

499 
	#I2C_A_ADC_RW_MASK
 0x00000001

500 
	#I2C_A_ADC_TRANS_MASK
 0x00000010

501 
	#I2C_A_ADC_ABORT_MASK
 0x00000020

502 
	#I2C_A_ADC_LAST_MASK
 0x00000040

503 
	#I2C_A_ADC_BYTE_MASK
 0x00000080

504 

	)

505 
	#I2C_A_ADC_ADD
 0x00000034

506 
	#I2C_A_ADC_READ
 0x00000001

507 
	#I2C_A_ADC_START
 0x00000100

508 
	#I2C_A_ADC_ABORT
 0x00000200

509 
	#I2C_A_ADC_LAST
 0x00000400

510 
	#I2C_A_ADC_BYTE
 0x00000800

511 

	)

512 
	#I2C_D_ADC_REG_MASK
 0xfe000000

513 
	#I2C_D_ADC_DAT_MASK
 0x01ff0000

514 

	)

515 
	#ADC_TIMEOUT
 0x00000007

516 
	#ADC_IFC_CTRL
 0x0000000b

517 
	#ADC_MASTER
 0x0000000c

518 
	#ADC_POWER
 0x0000000d

519 
	#ADC_ATTEN_ADCL
 0x0000000e

520 
	#ADC_ATTEN_ADCR
 0x0000000f

521 
	#ADC_ALC_CTRL1
 0x00000010

522 
	#ADC_ALC_CTRL2
 0x00000011

523 
	#ADC_ALC_CTRL3
 0x00000012

524 
	#ADC_NOISE_CTRL
 0x00000013

525 
	#ADC_LIMIT_CTRL
 0x00000014

526 
	#ADC_MUX
 0x00000015

527 

	)

530 
	#ADC_GAIN_MASK
 0x000000ff

531 
	#ADC_ZERODB
 0x000000cf

532 
	#ADC_MUTE_MASK
 0x000000c0

533 
	#ADC_MUTE
 0x000000c0

534 
	#ADC_OSR
 0x00000008

535 
	#ADC_TIMEOUT_DISABLE
 0x00000008

536 
	#ADC_HPF_DISABLE
 0x00000100

537 
	#ADC_TRANWIN_MASK
 0x00000070

539 

	)

540 
	#ADC_MUX_MASK
 0x0000000f

541 
	#ADC_MUX_PHONE
 0x00000001

542 
	#ADC_MUX_MIC
 0x00000002

543 
	#ADC_MUX_LINEIN
 0x00000004

544 
	#ADC_MUX_AUX
 0x00000008

545 

	)

546 
	#SET_CHANNEL
 0

	)

547 
	#PCM_FRONT_CHANNEL
 0

	)

548 
	#PCM_REAR_CHANNEL
 1

	)

549 
	#PCM_CENTER_LFE_CHANNEL
 2

	)

550 
	#PCM_UNKNOWN_CHANNEL
 3

	)

551 
	#CONTROL_FRONT_CHANNEL
 0

	)

552 
	#CONTROL_REAR_CHANNEL
 3

	)

553 
	#CONTROL_CENTER_LFE_CHANNEL
 1

	)

554 
	#CONTROL_UNKNOWN_CHANNEL
 2

	)

558 
	#SPI_REG_MASK
 0x1f‡

	)

559 
	#SPI_REG_SHIFT
 9

	)

561 
	#SPI_LDA1_REG
 0

	)

562 
	#SPI_RDA1_REG
 1

	)

563 
	#SPI_LDA2_REG
 4

	)

564 
	#SPI_RDA2_REG
 5

	)

565 
	#SPI_LDA3_REG
 6

	)

566 
	#SPI_RDA3_REG
 7

	)

567 
	#SPI_LDA4_REG
 13

	)

568 
	#SPI_RDA4_REG
 14

	)

569 
	#SPI_MASTDA_REG
 8

	)

571 
	#SPI_DA_BIT_UPDATE
 (1<<8Ë

	)

572 
	#SPI_DA_BIT_0dB
 0xf‡

	)

573 
	#SPI_DA_BIT_öfdB
 0x00

	)

575 
	#SPI_PL_REG
 2

	)

576 
	#SPI_PL_BIT_L_M
 (0<<5Ë

	)

577 
	#SPI_PL_BIT_L_L
 (1<<5Ë

	)

578 
	#SPI_PL_BIT_L_R
 (2<<5Ë

	)

579 
	#SPI_PL_BIT_L_C
 (3<<5Ë

	)

580 
	#SPI_PL_BIT_R_M
 (0<<7Ë

	)

581 
	#SPI_PL_BIT_R_L
 (1<<7Ë

	)

582 
	#SPI_PL_BIT_R_R
 (2<<7Ë

	)

583 
	#SPI_PL_BIT_R_C
 (3<<7Ë

	)

584 
	#SPI_IZD_REG
 2

	)

585 
	#SPI_IZD_BIT
 (1<<4Ë

	)

587 
	#SPI_FMT_REG
 3

	)

588 
	#SPI_FMT_BIT_RJ
 (0<<0Ë

	)

589 
	#SPI_FMT_BIT_LJ
 (1<<0Ë

	)

590 
	#SPI_FMT_BIT_I2S
 (2<<0Ë

	)

591 
	#SPI_FMT_BIT_DSP
 (3<<0Ë

	)

592 
	#SPI_LRP_REG
 3

	)

593 
	#SPI_LRP_BIT
 (1<<2Ë

	)

594 
	#SPI_BCP_REG
 3

	)

595 
	#SPI_BCP_BIT
 (1<<3Ë

	)

596 
	#SPI_IWL_REG
 3

	)

597 
	#SPI_IWL_BIT_16
 (0<<4Ë

	)

598 
	#SPI_IWL_BIT_20
 (1<<4Ë

	)

599 
	#SPI_IWL_BIT_24
 (2<<4Ë

	)

600 
	#SPI_IWL_BIT_32
 (3<<4Ë

	)

602 
	#SPI_MS_REG
 10

	)

603 
	#SPI_MS_BIT
 (1<<5Ë

	)

604 
	#SPI_RATE_REG
 10

	)

605 
	#SPI_RATE_BIT_128
 (0<<6Ë

	)

606 
	#SPI_RATE_BIT_192
 (1<<6)

	)

607 
	#SPI_RATE_BIT_256
 (2<<6)

	)

608 
	#SPI_RATE_BIT_384
 (3<<6)

	)

609 
	#SPI_RATE_BIT_512
 (4<<6)

	)

610 
	#SPI_RATE_BIT_768
 (5<<6)

	)

613 
	#SPI_DMUTE0_REG
 9

	)

614 
	#SPI_DMUTE1_REG
 9

	)

615 
	#SPI_DMUTE2_REG
 9

	)

616 
	#SPI_DMUTE4_REG
 15

	)

617 
	#SPI_DMUTE0_BIT
 (1<<3)

	)

618 
	#SPI_DMUTE1_BIT
 (1<<4)

	)

619 
	#SPI_DMUTE2_BIT
 (1<<5)

	)

620 
	#SPI_DMUTE4_BIT
 (1<<2)

	)

622 
	#SPI_PHASE0_REG
 3

	)

623 
	#SPI_PHASE1_REG
 3

	)

624 
	#SPI_PHASE2_REG
 3

	)

625 
	#SPI_PHASE4_REG
 15

	)

626 
	#SPI_PHASE0_BIT
 (1<<6)

	)

627 
	#SPI_PHASE1_BIT
 (1<<7)

	)

628 
	#SPI_PHASE2_BIT
 (1<<8)

	)

629 
	#SPI_PHASE4_BIT
 (1<<3)

	)

631 
	#SPI_PDWN_REG
 2

	)

632 
	#SPI_PDWN_BIT
 (1<<2)

	)

633 
	#SPI_DACD0_REG
 10

	)

634 
	#SPI_DACD1_REG
 10

	)

635 
	#SPI_DACD2_REG
 10

	)

636 
	#SPI_DACD4_REG
 15

	)

637 
	#SPI_DACD0_BIT
 (1<<1)

	)

638 
	#SPI_DACD1_BIT
 (1<<2)

	)

639 
	#SPI_DACD2_BIT
 (1<<3)

	)

640 
	#SPI_DACD4_BIT
 (1<<0Ë

	)

642 
	#SPI_PWRDNALL_REG
 10

	)

643 
	#SPI_PWRDNALL_BIT
 (1<<4)

	)

645 
	~"ˇ_midi.h
"

647 
	g¢d_ˇ0106
;

649 
	s¢d_ˇ0106_ch™√l
 {

650 
¢d_ˇ0106
 *
	memu
;

651 
	mnumbî
;

652 
	mu£
;

653 (*
	möãºu±
)(
¢d_ˇ0106
 *
	memu
, 
¢d_ˇ0106_ch™√l
 *
	mch™√l
);

654 
¢d_ˇ0106_pcm
 *
	mïcm
;

657 
	s¢d_ˇ0106_pcm
 {

658 
¢d_ˇ0106
 * 
__©åibuã__
((
ªcursive
)Ë
	memu
;

659 
¢d_pcm_sub°ªam
 *
__©åibuã__
((
ªcursive
)Ë
	msub°ªam
;

660 
	mch™√l_id
;

661 
	mru¬ög
;

664 
	s¢d_ˇ0106_dëaûs
 {

665 
u32
 
	m£rül
;

666 * 
	m«me
;

667 
	mac97
;

669 
	mgpio_ty≥
;

671 
	mi2c_adc
;

673 
	m•i_dac
;

678 
	s¢d_ˇ0106
 {

679 
¢d_ˇrd
 *
	mˇrd
;

680 
¢d_ˇ0106_dëaûs
 *
	mdëaûs
;

681 
pci_dev
 * 
__©åibuã__
((
ªcursive
)Ë
	mpci
;

683 
	mp‹t
;

684 
ªsour˚
 *
	mªs_p‹t
;

685 
	múq
;

687 
	m£rül
;

688 
	mmodñ
;

690 
•ölock_t
 
	memu_lock
;

692 
¢d_ac97
 * 
__©åibuã__
((
ªcursive
)Ë
	mac97
;

693 
¢d_pcm
 *
	mpcm
[4];

695 
¢d_ˇ0106_ch™√l
 
	m∂ayback_ch™√ls
[4];

696 
¢d_ˇ0106_ch™√l
 
	mˇ±uª_ch™√ls
[4];

697 
u32
 
	m•dif_bôs
[4];

698 
u32
 
	m•dif_°r_bôs
[4];

699 
	m•dif_íabÀ
;

700 
	mˇ±uª_sour˚
;

701 
	mi2c_ˇ±uª_sour˚
;

702 
u8
 
	mi2c_ˇ±uª_vﬁume
[4][2];

703 
	mˇ±uª_mic_löe_ö
;

705 
¢d_dma_buf„r
 
	mbuf„r
;

707 
¢d_ˇ_midi
 
	mmidi
;

708 
¢d_ˇ_midi
 
	mmidi2
;

710 
u16
 
	m•i_dac_ªg
[16];

712 #ifde‡
CONFIG_PM


713 
	#NUM_SAVED_VOLUMES
 9

	)

714 
	mßved_vﬁ
[
NUM_SAVED_VOLUMES
];

718 
¢d_ˇ0106_mixî
(
¢d_ˇ0106
 *
emu
);

719 
¢d_ˇ0106_¥oc_öô
(
¢d_ˇ0106
 * 
emu
);

721 
¢d_ˇ0106_±r_ªad
(
¢d_ˇ0106
 * 
emu
,

722 
ªg
,

723 
chn
);

725 
¢d_ˇ0106_±r_wrôe
(
¢d_ˇ0106
 *
emu
,

726 
ªg
,

727 
chn
,

728 
d©a
);

730 
¢d_ˇ0106_i2c_wrôe
(
¢d_ˇ0106
 *
emu
, 
u32
 
ªg
, u32 
vÆue
);

732 
¢d_ˇ0106_•i_wrôe
(
¢d_ˇ0106
 * 
emu
,

733 
d©a
);

735 #ifde‡
CONFIG_PM


736 
¢d_ˇ0106_mixî_su•íd
(
¢d_ˇ0106
 *
chù
);

737 
¢d_ˇ0106_mixî_ªsume
(
¢d_ˇ0106
 *
chù
);

739 
	#¢d_ˇ0106_mixî_su•íd
(
chù
Ëdÿ{ } 0)

	)

740 
	#¢d_ˇ0106_mixî_ªsume
(
chù
Ëdÿ{ } 0)

	)

	@ca0106.test.c

1 
	~<°dio.h
>

3 
	$maö
 (
¨gc
, **
¨gv
) {

4 
	`¥ötf
 ("Test suite!\r\n");

6 
	}
}

	@ca0106_main.c

139 
	~<löux/dñay.h
>

140 
	~<löux/öô.h
>

141 
	~<löux/öãºu±.h
>

143 
	~"../../comm⁄/mpci-bus.h
"

144 
	~<löux/¶ab.h
>

145 
	~<löux/moduÀ∑øm.h
>

146 
	~<löux/dma-m≠pög.h
>

147 
	~<sound/c‹e.h
>

148 
	~<sound/öôvÆ.h
>

149 
	~<sound/pcm.h
>

150 
	~<sound/ac97_codec.h
>

151 
	~<sound/öfo.h
>

153 
MODULE_AUTHOR
("James Courtier-Dutton <James@superbug.demon.co.uk>");

154 
MODULE_DESCRIPTION
("CA0106");

155 
MODULE_LICENSE
("GPL");

156 
MODULE_SUPPORTED_DEVICE
("{{Creative,SB CA0106 chip}}");

159 
	gödex
[
SNDRV_CARDS
] = 
SNDRV_DEFAULT_IDX
;

160 *
	gid
[
SNDRV_CARDS
] = 
SNDRV_DEFAULT_STR
;

161 
	gíabÀ
[
SNDRV_CARDS
] = 
SNDRV_DEFAULT_ENABLE_PNP
;

162 
uöt
 
	gsubsy°em
[
SNDRV_CARDS
];

164 
moduÀ_∑øm_¨øy
(
ödex
, , 
NULL
, 0444);

165 
MODULE_PARM_DESC
(
ödex
, "Index value forÅhe CA0106 soundcard.");

166 
moduÀ_∑øm_¨øy
(
id
, 
ch¨p
, 
NULL
, 0444);

167 
MODULE_PARM_DESC
(
id
, "ID string forÅhe CA0106 soundcard.");

168 
moduÀ_∑øm_¨øy
(
íabÀ
, 
boﬁ
, 
NULL
, 0444);

169 
MODULE_PARM_DESC
(
íabÀ
, "EnableÅhe CA0106 soundcard.");

170 
moduÀ_∑øm_¨øy
(
subsy°em
, 
uöt
, 
NULL
, 0444);

171 
MODULE_PARM_DESC
(
subsy°em
, "Force card subsystem model.");

173 
	~"ˇ0106.h
"

175 
¢d_ˇ0106_dëaûs
 
	gˇ0106_chù_dëaûs
[] = {

181 { .
£rül
 = 0x10131102,

182 .
	g«me
 = "X-Fi Extreme Audio [SBxxxx]",

183 .
	ggpio_ty≥
 = 1,

184 .
	gi2c_adc
 = 1 } ,

199 { .
	g£rül
 = 0x10121102,

200 .
	g«me
 = "X-Fi Extreme Audio [SB0790]",

201 .
	ggpio_ty≥
 = 1,

202 .
	gi2c_adc
 = 1 } ,

205 { .
	g£rül
 = 0x10021102,

206 .
	g«me
 = "AudigyLS [SB0310]",

207 .
	gac97
 = 1 } ,

209 { .
	g£rül
 = 0x10051102,

210 .
	g«me
 = "AudigyLS [SB0310b]",

211 .
	gac97
 = 1 } ,

213 { .
	g£rül
 = 0x10061102,

214 .
	g«me
 = "Live! 7.1 24bit [SB0410]",

215 .
	ggpio_ty≥
 = 1,

216 .
	gi2c_adc
 = 1 } ,

218 { .
	g£rül
 = 0x10071102,

219 .
	g«me
 = "Live! 7.1 24bit [SB0413]",

220 .
	ggpio_ty≥
 = 1,

221 .
	gi2c_adc
 = 1 } ,

228 { .
	g£rül
 = 0x100a1102,

229 .
	g«me
 = "Audigy SE [SB0570]",

230 .
	ggpio_ty≥
 = 1,

231 .
	gi2c_adc
 = 1,

232 .
	g•i_dac
 = 1 } ,

239 { .
	g£rül
 = 0x10111102,

240 .
	g«me
 = "Audigy SE OEM [SB0570a]",

241 .
	ggpio_ty≥
 = 1,

242 .
	gi2c_adc
 = 1,

243 .
	g•i_dac
 = 1 } ,

250 { .
	g£rül
 = 0x10091462,

251 .
	g«me
 = "MSI K8N Diamond MB [SB0438]",

252 .
	ggpio_ty≥
 = 2,

253 .
	gi2c_adc
 = 1 } ,

255 { .
	g£rül
 = 0x10091102,

256 .
	g«me
 = "MSI K8N Diamond MB",

257 .
	ggpio_ty≥
 = 2,

258 .
	gi2c_adc
 = 1,

259 .
	g•i_dac
 = 1 } ,

265 { .
	g£rül
 = 0x30381297,

266 .
	g«me
 = "Shuttle XPC SD31P [SD31P]",

267 .
	ggpio_ty≥
 = 1,

268 .
	gi2c_adc
 = 1 } ,

274 { .
	g£rül
 = 0x30411297,

275 .
	g«me
 = "Shuttle XPC SD11G5 [SD11G5]",

276 .
	ggpio_ty≥
 = 1,

277 .
	gi2c_adc
 = 1 } ,

278 { .
	g£rül
 = 0,

279 .
	g«me
 = "AudigyLS [Unknown]" }

283 
¢d_pcm_h¨dw¨e
 
	g¢d_ˇ0106_∂ayback_hw
 = {

284 .
öfo
 = 
SNDRV_PCM_INFO_MMAP
 |

285 
SNDRV_PCM_INFO_INTERLEAVED
 |

286 
SNDRV_PCM_INFO_BLOCK_TRANSFER
 |

287 
SNDRV_PCM_INFO_MMAP_VALID
 |

288 
SNDRV_PCM_INFO_SYNC_START
,

289 .
	gf‹m©s
 = 
SNDRV_PCM_FMTBIT_S16_LE
 | 
SNDRV_PCM_FMTBIT_S32_LE
,

290 .
	gøãs
 = (
SNDRV_PCM_RATE_48000
 | 
SNDRV_PCM_RATE_96000
 |

291 
SNDRV_PCM_RATE_192000
),

292 .
	gøã_mö
 = 48000,

293 .
	gøã_max
 = 192000,

294 .
	gch™√ls_mö
 = 2,

295 .
	gch™√ls_max
 = 2,

296 .
	gbuf„r_byãs_max
 = ((65536 - 64) * 8),

297 .
	g≥riod_byãs_mö
 = 64,

298 .
	g≥riod_byãs_max
 = (65536 - 64),

299 .
	g≥riods_mö
 = 2,

300 .
	g≥riods_max
 = 8,

301 .
	gfifo_size
 = 0,

304 
¢d_pcm_h¨dw¨e
 
	g¢d_ˇ0106_ˇ±uª_hw
 = {

305 .
öfo
 = (
SNDRV_PCM_INFO_MMAP
 |

306 
SNDRV_PCM_INFO_INTERLEAVED
 |

307 
SNDRV_PCM_INFO_BLOCK_TRANSFER
 |

308 
SNDRV_PCM_INFO_MMAP_VALID
),

309 .
	gf‹m©s
 = 
SNDRV_PCM_FMTBIT_S16_LE
 | 
SNDRV_PCM_FMTBIT_S32_LE
,

311 .
	gøãs
 = (
SNDRV_PCM_RATE_44100
 | 
SNDRV_PCM_RATE_48000
 |

312 
SNDRV_PCM_RATE_96000
 | 
SNDRV_PCM_RATE_192000
),

313 .
	gøã_mö
 = 44100,

315 .
	gøãs
 = (
SNDRV_PCM_RATE_48000
 |

316 
SNDRV_PCM_RATE_96000
 | 
SNDRV_PCM_RATE_192000
),

317 .
	gøã_mö
 = 48000,

319 .
	gøã_max
 = 192000,

320 .
	gch™√ls_mö
 = 2,

321 .
	gch™√ls_max
 = 2,

322 .
	gbuf„r_byãs_max
 = ((65536 - 64) * 8),

323 .
	g≥riod_byãs_mö
 = 64,

324 .
	g≥riod_byãs_max
 = (65536 - 64),

325 .
	g≥riods_mö
 = 2,

326 .
	g≥riods_max
 = 2,

327 .
	gfifo_size
 = 0,

330 
	$¢d_ˇ0106_±r_ªad
(
¢d_ˇ0106
 * 
emu
,

331 
ªg
,

332 
chn
)

334 
Êags
;

335 
ªg±r
, 
vÆ
;

337 
ªg±r
 = (
ªg
 << 16Ë| 
chn
;

339 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

340 
	`oué
(
ªg±r
, 
emu
->
p‹t
 + 
PTR
);

341 
vÆ
 = 
	`öl
(
emu
->
p‹t
 + 
DATA
);

342 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

343  
vÆ
;

344 
	}
}

346 
	$¢d_ˇ0106_±r_wrôe
(
¢d_ˇ0106
 *
emu
,

347 
ªg
,

348 
chn
,

349 
d©a
)

351 
ªg±r
;

352 
Êags
;

354 
ªg±r
 = (
ªg
 << 16Ë| 
chn
;

356 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

357 
	`oué
(
ªg±r
, 
emu
->
p‹t
 + 
PTR
);

358 
	`oué
(
d©a
, 
emu
->
p‹t
 + 
DATA
);

359 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

360 
	}
}

362 
	$¢d_ˇ0106_•i_wrôe
(
¢d_ˇ0106
 * 
emu
,

363 
d©a
)

365 
ª£t
, 
£t
;

366 
ªg
, 
tmp
;

367 
n
, 
ªsu…
;

368 
ªg
 = 
SPI
;

369 i‡(
d©a
 > 0xffff)

371 
tmp
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
ªg
, 0);

372 
ª£t
 = (
tmp
 & ~0x3ffff) | 0x20000;

373 
£t
 = 
ª£t
 | 0x10000;

374 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
ªg
, 0, 
ª£t
 | 
d©a
);

375 
tmp
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
ªg
, 0);

376 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
ªg
, 0, 
£t
 | 
d©a
);

377 
ªsu…
 = 1;

379 
n
 = 0;Ç < 100;Ç++) {

380 
	`udñay
(10);

381 
tmp
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
ªg
, 0);

382 i‡(!(
tmp
 & 0x10000)) {

383 
ªsu…
 = 0;

387 i‡(
ªsu…
)

389 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
ªg
, 0, 
ª£t
 | 
d©a
);

390 
tmp
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
ªg
, 0);

392 
	}
}

395 
	$¢d_ˇ0106_i2c_wrôe
(
¢d_ˇ0106
 *
emu
,

396 
u32
 
ªg
,

397 
u32
 
vÆue
)

399 
u32
 
tmp
;

400 
timeout
 = 0;

401 
°©us
;

402 
ªåy
;

403 i‡((
ªg
 > 0x7fË|| (
vÆue
 > 0x1ff)) {

404 
	`¢d_m¥ötk
(
KERN_ERR
 "i2c_write: invalid values.\n");

405  -
EINVAL
;

408 
tmp
 = 
ªg
 << 25 | 
vÆue
 << 16;

414 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
I2C_D1
, 0, 
tmp
);

416 
ªåy
 = 0;Ñetry < 10;Ñetry++) {

420 
tmp
 = 0;

421 
tmp
 =Åm∞| (
I2C_A_ADC_LAST
|
I2C_A_ADC_START
|
I2C_A_ADC_ADD
);

422 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
I2C_A
, 0, 
tmp
);

426 
°©us
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
I2C_A
, 0);

428 
timeout
++;

429 i‡((
°©us
 & 
I2C_A_ADC_START
) == 0)

432 i‡(
timeout
 > 1000)

436 i‡((
°©us
 & 
I2C_A_ADC_ABORT
) == 0)

440 i‡(
ªåy
 == 10) {

441 
	`¢d_m¥ötk
(
KERN_ERR
 "WritingÅo ADC failed!\n");

442  -
EINVAL
;

446 
	}
}

449 
	$¢d_ˇ0106_öå_íabÀ
(
¢d_ˇ0106
 *
emu
, 
öåíb
)

451 
Êags
;

452 
öå_íabÀ
;

454 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

455 
öå_íabÀ
 = 
	`öl
(
emu
->
p‹t
 + 
INTE
Ë| 
öåíb
;

456 
	`oué
(
öå_íabÀ
, 
emu
->
p‹t
 + 
INTE
);

457 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

458 
	}
}

460 
	$¢d_ˇ0106_öå_dißbÀ
(
¢d_ˇ0106
 *
emu
, 
öåíb
)

462 
Êags
;

463 
öå_íabÀ
;

465 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

466 
öå_íabÀ
 = 
	`öl
(
emu
->
p‹t
 + 
INTE
Ë& ~
öåíb
;

467 
	`oué
(
öå_íabÀ
, 
emu
->
p‹t
 + 
INTE
);

468 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

469 
	}
}

472 
	$¢d_ˇ0106_pcm_‰ì_sub°ªam
(
¢d_pcm_ru¡ime
 *
ru¡ime
)

474 
	`k‰ì
(
ru¡ime
->
¥iv©e_d©a
);

475 
	}
}

477 c⁄° 
	g•i_dacd_ªg
[] = {

478 [
PCM_FRONT_CHANNEL
] = 
SPI_DACD4_REG
,

479 [
PCM_REAR_CHANNEL
] = 
SPI_DACD0_REG
,

480 [
PCM_CENTER_LFE_CHANNEL
]
SPI_DACD2_REG
,

481 [
PCM_UNKNOWN_CHANNEL
] = 
SPI_DACD1_REG
,

483 c⁄° 
	g•i_dacd_bô
[] = {

484 [
PCM_FRONT_CHANNEL
] = 
SPI_DACD4_BIT
,

485 [
PCM_REAR_CHANNEL
] = 
SPI_DACD0_BIT
,

486 [
PCM_CENTER_LFE_CHANNEL
]
SPI_DACD2_BIT
,

487 [
PCM_UNKNOWN_CHANNEL
] = 
SPI_DACD1_BIT
,

490 
	$ª°‹e_•dif_bôs
(
¢d_ˇ0106
 *
chù
, 
idx
)

492 i‡(
chù
->
•dif_°r_bôs
[
idx
] !chù->
•dif_bôs
[idx]) {

493 
chù
->
•dif_°r_bôs
[
idx
] = chù->
•dif_bôs
[idx];

494 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPCS0
 + 
idx
, 0,

495 
chù
->
•dif_°r_bôs
[
idx
]);

497 
	}
}

500 
	$¢d_ˇ0106_pcm_›í_∂ayback_ch™√l
(
¢d_pcm_sub°ªam
 *
sub°ªam
,

501 
ch™√l_id
)

503 
¢d_ˇ0106
 *
chù
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

504 
¢d_ˇ0106_ch™√l
 *
ch™√l
 = &(
chù
->
∂ayback_ch™√ls
[
ch™√l_id
]);

505 
¢d_ˇ0106_pcm
 *
ïcm
;

506 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

507 
îr
;

509 
ïcm
 = 
	`kzÆloc
((*ïcm), 
GFP_KERNEL
);

511 i‡(
ïcm
 =
NULL
)

512  -
ENOMEM
;

513 
ïcm
->
emu
 = 
chù
;

514 
ïcm
->
sub°ªam
 = substream;

515 
ïcm
->
ch™√l_id
=channel_id;

517 
ru¡ime
->
¥iv©e_d©a
 = 
ïcm
;

518 
ru¡ime
->
¥iv©e_‰ì
 = 
¢d_ˇ0106_pcm_‰ì_sub°ªam
;

520 
ru¡ime
->
hw
 = 
¢d_ˇ0106_∂ayback_hw
;

522 
ch™√l
->
emu
 = 
chù
;

523 
ch™√l
->
numbî
 = 
ch™√l_id
;

525 
ch™√l
->
u£
 = 1;

528 
ch™√l
->
ïcm
 =Épcm;

529 i‡((
îr
 = 
	`¢d_pcm_hw_c⁄°øöt_öãgî
(
ru¡ime
, 
SNDRV_PCM_HW_PARAM_PERIODS
)) < 0)

530  
îr
;

531 i‡((
îr
 = 
	`¢d_pcm_hw_c⁄°øöt_°ï
(
ru¡ime
, 0, 
SNDRV_PCM_HW_PARAM_PERIOD_BYTES
, 64)) < 0)

532  
îr
;

533 
	`¢d_pcm_£t_sync
(
sub°ªam
);

535 i‡(
chù
->
dëaûs
->
•i_dac
 && 
ch™√l_id
 !
PCM_FRONT_CHANNEL
) {

536 c⁄° 
ªg
 = 
•i_dacd_ªg
[
ch™√l_id
];

539 
chù
->
•i_dac_ªg
[
ªg
] &~
•i_dacd_bô
[
ch™√l_id
];

540 
îr
 = 
	`¢d_ˇ0106_•i_wrôe
(
chù
, chù->
•i_dac_ªg
[
ªg
]);

541 i‡(
îr
 < 0)

542  
îr
;

545 
	`ª°‹e_•dif_bôs
(
chù
, 
ch™√l_id
);

548 
	}
}

551 
	$¢d_ˇ0106_pcm_˛o£_∂ayback
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

553 
¢d_ˇ0106
 *
chù
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

554 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

555 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

556 
chù
->
∂ayback_ch™√ls
[
ïcm
->
ch™√l_id
].
u£
 = 0;

558 
	`ª°‹e_•dif_bôs
(
chù
, 
ïcm
->
ch™√l_id
);

560 i‡(
chù
->
dëaûs
->
•i_dac
 && 
ïcm
->
ch™√l_id
 !
PCM_FRONT_CHANNEL
) {

561 c⁄° 
ªg
 = 
•i_dacd_ªg
[
ïcm
->
ch™√l_id
];

564 
chù
->
•i_dac_ªg
[
ªg
] |
•i_dacd_bô
[
ïcm
->
ch™√l_id
];

565 
	`¢d_ˇ0106_•i_wrôe
(
chù
, chù->
•i_dac_ªg
[
ªg
]);

569 
	}
}

571 
	$¢d_ˇ0106_pcm_›í_∂ayback_‰⁄t
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

573  
	`¢d_ˇ0106_pcm_›í_∂ayback_ch™√l
(
sub°ªam
, 
PCM_FRONT_CHANNEL
);

574 
	}
}

576 
	$¢d_ˇ0106_pcm_›í_∂ayback_˚¡î_l„
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

578  
	`¢d_ˇ0106_pcm_›í_∂ayback_ch™√l
(
sub°ªam
, 
PCM_CENTER_LFE_CHANNEL
);

579 
	}
}

581 
	$¢d_ˇ0106_pcm_›í_∂ayback_unknown
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

583  
	`¢d_ˇ0106_pcm_›í_∂ayback_ch™√l
(
sub°ªam
, 
PCM_UNKNOWN_CHANNEL
);

584 
	}
}

586 
	$¢d_ˇ0106_pcm_›í_∂ayback_ª¨
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

588  
	`¢d_ˇ0106_pcm_›í_∂ayback_ch™√l
(
sub°ªam
, 
PCM_REAR_CHANNEL
);

589 
	}
}

592 
	$¢d_ˇ0106_pcm_›í_ˇ±uª_ch™√l
(
¢d_pcm_sub°ªam
 *
sub°ªam
,

593 
ch™√l_id
)

595 
¢d_ˇ0106
 *
chù
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

596 
¢d_ˇ0106_ch™√l
 *
ch™√l
 = &(
chù
->
ˇ±uª_ch™√ls
[
ch™√l_id
]);

597 
¢d_ˇ0106_pcm
 *
ïcm
;

598 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

599 
îr
;

601 
ïcm
 = 
	`kzÆloc
((*ïcm), 
GFP_KERNEL
);

602 i‡(
ïcm
 =
NULL
) {

603 
	`¢d_m¥ötk
(
KERN_ERR
 "open_capture_channel: failedÉpcmálloc\n");

604  -
ENOMEM
;

606 
ïcm
->
emu
 = 
chù
;

607 
ïcm
->
sub°ªam
 = substream;

608 
ïcm
->
ch™√l_id
=channel_id;

610 
ru¡ime
->
¥iv©e_d©a
 = 
ïcm
;

611 
ru¡ime
->
¥iv©e_‰ì
 = 
¢d_ˇ0106_pcm_‰ì_sub°ªam
;

613 
ru¡ime
->
hw
 = 
¢d_ˇ0106_ˇ±uª_hw
;

615 
ch™√l
->
emu
 = 
chù
;

616 
ch™√l
->
numbî
 = 
ch™√l_id
;

618 
ch™√l
->
u£
 = 1;

621 
ch™√l
->
ïcm
 =Épcm;

622 i‡((
îr
 = 
	`¢d_pcm_hw_c⁄°øöt_öãgî
(
ru¡ime
, 
SNDRV_PCM_HW_PARAM_PERIODS
)) < 0)

623  
îr
;

625 i‡((
îr
 = 
	`¢d_pcm_hw_c⁄°øöt_°ï
(
ru¡ime
, 0, 
SNDRV_PCM_HW_PARAM_PERIOD_BYTES
, 64)) < 0)

626  
îr
;

628 
	}
}

631 
	$¢d_ˇ0106_pcm_˛o£_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

633 
¢d_ˇ0106
 *
chù
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

634 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

635 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

636 
chù
->
ˇ±uª_ch™√ls
[
ïcm
->
ch™√l_id
].
u£
 = 0;

639 
	}
}

641 
	$¢d_ˇ0106_pcm_›í_0_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

643  
	`¢d_ˇ0106_pcm_›í_ˇ±uª_ch™√l
(
sub°ªam
, 0);

644 
	}
}

646 
	$¢d_ˇ0106_pcm_›í_1_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

648  
	`¢d_ˇ0106_pcm_›í_ˇ±uª_ch™√l
(
sub°ªam
, 1);

649 
	}
}

651 
	$¢d_ˇ0106_pcm_›í_2_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

653  
	`¢d_ˇ0106_pcm_›í_ˇ±uª_ch™√l
(
sub°ªam
, 2);

654 
	}
}

656 
	$¢d_ˇ0106_pcm_›í_3_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

658  
	`¢d_ˇ0106_pcm_›í_ˇ±uª_ch™√l
(
sub°ªam
, 3);

659 
	}
}

662 
	$¢d_ˇ0106_pcm_hw_∑øms_∂ayback
(
¢d_pcm_sub°ªam
 *
sub°ªam
,

663 
¢d_pcm_hw_∑øms
 *
hw_∑øms
)

665  
	`¢d_pcm_lib_mÆloc_∑ges
(
sub°ªam
,

666 
	`∑øms_buf„r_byãs
(
hw_∑øms
));

667 
	}
}

670 
	$¢d_ˇ0106_pcm_hw_‰ì_∂ayback
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

672  
	`¢d_pcm_lib_‰ì_∑ges
(
sub°ªam
);

673 
	}
}

676 
	$¢d_ˇ0106_pcm_hw_∑øms_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
,

677 
¢d_pcm_hw_∑øms
 *
hw_∑øms
)

679  
	`¢d_pcm_lib_mÆloc_∑ges
(
sub°ªam
,

680 
	`∑øms_buf„r_byãs
(
hw_∑øms
));

681 
	}
}

684 
	$¢d_ˇ0106_pcm_hw_‰ì_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

686  
	`¢d_pcm_lib_‰ì_∑ges
(
sub°ªam
);

687 
	}
}

690 
	$¢d_ˇ0106_pcm_¥ï¨e_∂ayback
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

692 
¢d_ˇ0106
 *
emu
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

693 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

694 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

695 
ch™√l
 = 
ïcm
->
ch™√l_id
;

696 
u32
 *
èbÀ_ba£
 = (u32 *)(
emu
->
buf„r
.
¨ó
+(8*16*
ch™√l
));

697 
u32
 
≥riod_size_byãs
 = 
	`‰ames_to_byãs
(
ru¡ime
,Ñu¡ime->
≥riod_size
);

698 
u32
 
hcfg_mask
 = 
HCFG_PLAYBACK_S32_LE
;

699 
u32
 
hcfg_£t
 = 0x00000000;

700 
u32
 
hcfg
;

701 
u32
 
ªg40_mask
 = 0x30000 << (
ch™√l
<<1);

702 
u32
 
ªg40_£t
 = 0;

703 
u32
 
ªg40
;

705 
u32
 
ªg71_mask
 = 0x03030000 ;

706 
u32
 
ªg71_£t
 = 0;

707 
u32
 
ªg71
;

708 
i
;

716 
ru¡ime
->
øã
) {

718 
ªg40_£t
 = 0x10000 << (
ch™√l
<<1);

719 
ªg71_£t
 = 0x01010000;

722 
ªg40_£t
 = 0;

723 
ªg71_£t
 = 0;

726 
ªg40_£t
 = 0x20000 << (
ch™√l
<<1);

727 
ªg71_£t
 = 0x02020000;

730 
ªg40_£t
 = 0x30000 << (
ch™√l
<<1);

731 
ªg71_£t
 = 0x03030000;

734 
ªg40_£t
 = 0;

735 
ªg71_£t
 = 0;

740 
ru¡ime
->
f‹m©
) {

741 
SNDRV_PCM_FORMAT_S16_LE
:

742 
hcfg_£t
 = 0;

744 
SNDRV_PCM_FORMAT_S32_LE
:

745 
hcfg_£t
 = 
HCFG_PLAYBACK_S32_LE
;

748 
hcfg_£t
 = 0;

751 
hcfg
 = 
	`öl
(
emu
->
p‹t
 + 
HCFG
) ;

752 
hcfg
 = (hcfg & ~
hcfg_mask
Ë| 
hcfg_£t
;

753 
	`oué
(
hcfg
, 
emu
->
p‹t
 + 
HCFG
);

754 
ªg40
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 0x40, 0);

755 
ªg40
 = (ªg40 & ~
ªg40_mask
Ë| 
ªg40_£t
;

756 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 0x40, 0, 
ªg40
);

757 
ªg71
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 0x71, 0);

758 
ªg71
 = (ªg71 & ~
ªg71_mask
Ë| 
ªg71_£t
;

759 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 0x71, 0, 
ªg71
);

762 
i
=0; i < 
ru¡ime
->
≥riods
; i++) {

763 
èbÀ_ba£
[
i
*2] = 
ru¡ime
->
dma_addr
 + (ò* 
≥riod_size_byãs
);

764 
èbÀ_ba£
[
i
*2+1] = 
≥riod_size_byãs
 << 16;

767 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_LIST_ADDR
, 
ch™√l
,Ému->
buf„r
.
addr
+(8*16*channel));

768 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_LIST_SIZE
, 
ch™√l
, (
ru¡ime
->
≥riods
 - 1) << 19);

769 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_LIST_PTR
, 
ch™√l
, 0);

770 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_DMA_ADDR
, 
ch™√l
, 
ru¡ime
->
dma_addr
);

771 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_PERIOD_SIZE
, 
ch™√l
, 
	`‰ames_to_byãs
(
ru¡ime
,Ñu¡ime->
≥riod_size
)<<16);

773 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_PERIOD_SIZE
, 
ch™√l
, 0);

774 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_POINTER
, 
ch™√l
, 0);

775 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 0x07, 
ch™√l
, 0x0);

776 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 0x08, 
ch™√l
, 0);

777 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
PLAYBACK_MUTE
, 0x0, 0x0);

779 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
SPCS0
, 0,

780 
SPCS_CLKACCY_1000PPM
 | 
SPCS_SAMPLERATE_48
 |

781 
SPCS_CHANNELNUM_LEFT
 | 
SPCS_SOURCENUM_UNSPEC
 |

782 
SPCS_GENERATIONSTATUS
 | 0x00001200 |

783 0x00000000 | 
SPCS_EMPHASIS_NONE
 | 
SPCS_COPYRIGHT
 );

787 
	}
}

790 
	$¢d_ˇ0106_pcm_¥ï¨e_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

792 
¢d_ˇ0106
 *
emu
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

793 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

794 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

795 
ch™√l
 = 
ïcm
->
ch™√l_id
;

796 
u32
 
hcfg_mask
 = 
HCFG_CAPTURE_S32_LE
;

797 
u32
 
hcfg_£t
 = 0x00000000;

798 
u32
 
hcfg
;

799 
u32
 
ovî_ßm∂ög
=0x2;

800 
u32
 
ªg71_mask
 = 0x0000c000 ;

801 
u32
 
ªg71_£t
 = 0;

802 
u32
 
ªg71
;

808 
ru¡ime
->
øã
) {

810 
ªg71_£t
 = 0x00004000;

813 
ªg71_£t
 = 0;

816 
ªg71_£t
 = 0x00008000;

817 
ovî_ßm∂ög
=0xa;

820 
ªg71_£t
 = 0x0000c000;

821 
ovî_ßm∂ög
=0xa;

824 
ªg71_£t
 = 0;

829 
ru¡ime
->
f‹m©
) {

830 
SNDRV_PCM_FORMAT_S16_LE
:

831 
hcfg_£t
 = 0;

833 
SNDRV_PCM_FORMAT_S32_LE
:

834 
hcfg_£t
 = 
HCFG_CAPTURE_S32_LE
;

837 
hcfg_£t
 = 0;

840 
hcfg
 = 
	`öl
(
emu
->
p‹t
 + 
HCFG
) ;

841 
hcfg
 = (hcfg & ~
hcfg_mask
Ë| 
hcfg_£t
;

842 
	`oué
(
hcfg
, 
emu
->
p‹t
 + 
HCFG
);

843 
ªg71
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 0x71, 0);

844 
ªg71
 = (ªg71 & ~
ªg71_mask
Ë| 
ªg71_£t
;

845 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 0x71, 0, 
ªg71
);

846 i‡(
emu
->
dëaûs
->
i2c_adc
 == 1) {

847 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_MASTER
, 
ovî_ßm∂ög
);

852 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 0x13, 
ch™√l
, 0);

853 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
CAPTURE_DMA_ADDR
, 
ch™√l
, 
ru¡ime
->
dma_addr
);

854 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
CAPTURE_BUFFER_SIZE
, 
ch™√l
, 
	`‰ames_to_byãs
(
ru¡ime
,Ñu¡ime->
buf„r_size
)<<16);

855 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
CAPTURE_POINTER
, 
ch™√l
, 0);

858 
	}
}

861 
	$¢d_ˇ0106_pcm_åiggî_∂ayback
(
¢d_pcm_sub°ªam
 *
sub°ªam
,

862 
cmd
)

864 
¢d_ˇ0106
 *
emu
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

865 
¢d_pcm_ru¡ime
 *
ru¡ime
;

866 
¢d_ˇ0106_pcm
 *
ïcm
;

867 
ch™√l
;

868 
ªsu…
 = 0;

869 
¢d_pcm_sub°ªam
 *
s
;

870 
u32
 
basic
 = 0;

871 
u32
 
exãnded
 = 0;

872 
u32
 
bôs
;

873 
ru¬ög
 = 0;

875 
cmd
) {

876 
SNDRV_PCM_TRIGGER_START
:

877 
SNDRV_PCM_TRIGGER_RESUME
:

878 
ru¬ög
 = 1;

880 
SNDRV_PCM_TRIGGER_STOP
:

881 
SNDRV_PCM_TRIGGER_SUSPEND
:

883 
ru¬ög
 = 0;

886 
	`¢d_pcm_group_f‹_óch_íåy
(
s
, 
sub°ªam
) {

887 i‡(
	`¢d_pcm_sub°ªam_chù
(
s
Ë!
emu
 ||

888 
s
->
°ªam
 !
SNDRV_PCM_STREAM_PLAYBACK
)

890 
ru¡ime
 = 
s
->runtime;

891 
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

892 
ch™√l
 = 
ïcm
->
ch™√l_id
;

894 
ïcm
->
ru¬ög
 =Ñunning;

895 
basic
 |(0x1 << 
ch™√l
);

896 
exãnded
 |(0x10 << 
ch™√l
);

897 
	`¢d_pcm_åiggî_d⁄e
(
s
, 
sub°ªam
);

901 
cmd
) {

902 
SNDRV_PCM_TRIGGER_START
:

903 
SNDRV_PCM_TRIGGER_RESUME
:

904 
bôs
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
EXTENDED_INT_MASK
, 0);

905 
bôs
 |
exãnded
;

906 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
EXTENDED_INT_MASK
, 0, 
bôs
);

907 
bôs
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
BASIC_INTERRUPT
, 0);

908 
bôs
 |
basic
;

909 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
BASIC_INTERRUPT
, 0, 
bôs
);

911 
SNDRV_PCM_TRIGGER_STOP
:

912 
SNDRV_PCM_TRIGGER_SUSPEND
:

913 
bôs
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
BASIC_INTERRUPT
, 0);

914 
bôs
 &~
basic
;

915 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
BASIC_INTERRUPT
, 0, 
bôs
);

916 
bôs
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
EXTENDED_INT_MASK
, 0);

917 
bôs
 &~
exãnded
;

918 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
EXTENDED_INT_MASK
, 0, 
bôs
);

921 
ªsu…
 = -
EINVAL
;

924  
ªsu…
;

925 
	}
}

928 
	$¢d_ˇ0106_pcm_åiggî_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
,

929 
cmd
)

931 
¢d_ˇ0106
 *
emu
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

932 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

933 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

934 
ch™√l
 = 
ïcm
->
ch™√l_id
;

935 
ªsu…
 = 0;

937 
cmd
) {

938 
SNDRV_PCM_TRIGGER_START
:

939 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
EXTENDED_INT_MASK
, 0, 
	`¢d_ˇ0106_±r_ªad
”mu, EXTENDED_INT_MASK, 0Ë| (0x110000<<
ch™√l
));

940 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
BASIC_INTERRUPT
, 0, 
	`¢d_ˇ0106_±r_ªad
”mu, BASIC_INTERRUPT, 0)|(0x100<<
ch™√l
));

941 
ïcm
->
ru¬ög
 = 1;

943 
SNDRV_PCM_TRIGGER_STOP
:

944 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
BASIC_INTERRUPT
, 0, 
	`¢d_ˇ0106_±r_ªad
”mu, BASIC_INTERRUPT, 0Ë& ~(0x100<<
ch™√l
));

945 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
EXTENDED_INT_MASK
, 0, 
	`¢d_ˇ0106_±r_ªad
”mu, EXTENDED_INT_MASK, 0Ë& ~(0x110000<<
ch™√l
));

946 
ïcm
->
ru¬ög
 = 0;

949 
ªsu…
 = -
EINVAL
;

952  
ªsu…
;

953 
	}
}

956 
¢d_pcm_u‰ames_t


957 
	$¢d_ˇ0106_pcm_poöãr_∂ayback
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

959 
¢d_ˇ0106
 *
emu
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

960 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

961 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

962 
¢d_pcm_u‰ames_t
 
±r
, 
±r1
, 
±r2
,
±r3
,
±r4
 = 0;

963 
ch™√l
 = 
ïcm
->
ch™√l_id
;

965 i‡(!
ïcm
->
ru¬ög
)

968 
±r3
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
PLAYBACK_LIST_PTR
, 
ch™√l
);

969 
±r1
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
PLAYBACK_POINTER
, 
ch™√l
);

970 
±r4
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
PLAYBACK_LIST_PTR
, 
ch™√l
);

971 i‡(
±r3
 !
±r4
Ë
±r1
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
PLAYBACK_POINTER
, 
ch™√l
);

972 
±r2
 = 
	`byãs_to_‰ames
(
ru¡ime
, 
±r1
);

973 
±r2
+(
±r4
 >> 3Ë* 
ru¡ime
->
≥riod_size
;

974 
±r
=
±r2
;

975 i‡(
±r
 >
ru¡ime
->
buf„r_size
)

976 
±r
 -
ru¡ime
->
buf„r_size
;

979  
±r
;

980 
	}
}

983 
¢d_pcm_u‰ames_t


984 
	$¢d_ˇ0106_pcm_poöãr_ˇ±uª
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

986 
¢d_ˇ0106
 *
emu
 = 
	`¢d_pcm_sub°ªam_chù
(
sub°ªam
);

987 
¢d_pcm_ru¡ime
 *
ru¡ime
 = 
sub°ªam
->runtime;

988 
¢d_ˇ0106_pcm
 *
ïcm
 = 
ru¡ime
->
¥iv©e_d©a
;

989 
¢d_pcm_u‰ames_t
 
±r
, 
±r1
, 
±r2
 = 0;

990 
ch™√l
 = ch™√l=
ïcm
->
ch™√l_id
;

992 i‡(!
ïcm
->
ru¬ög
)

995 
±r1
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
CAPTURE_POINTER
, 
ch™√l
);

996 
±r2
 = 
	`byãs_to_‰ames
(
ru¡ime
, 
±r1
);

997 
±r
=
±r2
;

998 i‡(
±r
 >
ru¡ime
->
buf„r_size
)

999 
±r
 -
ru¡ime
->
buf„r_size
;

1002  
±r
;

1003 
	}
}

1006 
¢d_pcm_›s
 
	g¢d_ˇ0106_∂ayback_‰⁄t_›s
 = {

1007 .
›í
 = 
¢d_ˇ0106_pcm_›í_∂ayback_‰⁄t
,

1008 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_∂ayback
,

1009 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1010 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_∂ayback
,

1011 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_∂ayback
,

1012 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_∂ayback
,

1013 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_∂ayback
,

1014 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_∂ayback
,

1017 
¢d_pcm_›s
 
	g¢d_ˇ0106_ˇ±uª_0_›s
 = {

1018 .
›í
 = 
¢d_ˇ0106_pcm_›í_0_ˇ±uª
,

1019 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_ˇ±uª
,

1020 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1021 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_ˇ±uª
,

1022 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_ˇ±uª
,

1023 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_ˇ±uª
,

1024 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_ˇ±uª
,

1025 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_ˇ±uª
,

1028 
¢d_pcm_›s
 
	g¢d_ˇ0106_ˇ±uª_1_›s
 = {

1029 .
›í
 = 
¢d_ˇ0106_pcm_›í_1_ˇ±uª
,

1030 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_ˇ±uª
,

1031 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1032 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_ˇ±uª
,

1033 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_ˇ±uª
,

1034 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_ˇ±uª
,

1035 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_ˇ±uª
,

1036 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_ˇ±uª
,

1039 
¢d_pcm_›s
 
	g¢d_ˇ0106_ˇ±uª_2_›s
 = {

1040 .
›í
 = 
¢d_ˇ0106_pcm_›í_2_ˇ±uª
,

1041 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_ˇ±uª
,

1042 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1043 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_ˇ±uª
,

1044 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_ˇ±uª
,

1045 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_ˇ±uª
,

1046 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_ˇ±uª
,

1047 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_ˇ±uª
,

1050 
¢d_pcm_›s
 
	g¢d_ˇ0106_ˇ±uª_3_›s
 = {

1051 .
›í
 = 
¢d_ˇ0106_pcm_›í_3_ˇ±uª
,

1052 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_ˇ±uª
,

1053 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1054 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_ˇ±uª
,

1055 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_ˇ±uª
,

1056 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_ˇ±uª
,

1057 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_ˇ±uª
,

1058 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_ˇ±uª
,

1061 
¢d_pcm_›s
 
	g¢d_ˇ0106_∂ayback_˚¡î_l„_›s
 = {

1062 .
›í
 = 
¢d_ˇ0106_pcm_›í_∂ayback_˚¡î_l„
,

1063 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_∂ayback
,

1064 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1065 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_∂ayback
,

1066 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_∂ayback
,

1067 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_∂ayback
,

1068 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_∂ayback
,

1069 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_∂ayback
,

1072 
¢d_pcm_›s
 
	g¢d_ˇ0106_∂ayback_unknown_›s
 = {

1073 .
›í
 = 
¢d_ˇ0106_pcm_›í_∂ayback_unknown
,

1074 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_∂ayback
,

1075 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1076 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_∂ayback
,

1077 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_∂ayback
,

1078 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_∂ayback
,

1079 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_∂ayback
,

1080 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_∂ayback
,

1083 
¢d_pcm_›s
 
	g¢d_ˇ0106_∂ayback_ª¨_›s
 = {

1084 .
›í
 = 
¢d_ˇ0106_pcm_›í_∂ayback_ª¨
,

1085 .
	g˛o£
 = 
¢d_ˇ0106_pcm_˛o£_∂ayback
,

1086 .
	gio˘l
 = 
¢d_pcm_lib_io˘l
,

1087 .
	ghw_∑øms
 = 
¢d_ˇ0106_pcm_hw_∑øms_∂ayback
,

1088 .
	ghw_‰ì
 = 
¢d_ˇ0106_pcm_hw_‰ì_∂ayback
,

1089 .
	g¥ï¨e
 = 
¢d_ˇ0106_pcm_¥ï¨e_∂ayback
,

1090 .
	gåiggî
 = 
¢d_ˇ0106_pcm_åiggî_∂ayback
,

1091 .
	gpoöãr
 = 
¢d_ˇ0106_pcm_poöãr_∂ayback
,

1095 
	$¢d_ˇ0106_ac97_ªad
(
¢d_ac97
 *
ac97
,

1096 
ªg
)

1098 
¢d_ˇ0106
 *
emu
 = 
ac97
->
¥iv©e_d©a
;

1099 
Êags
;

1100 
vÆ
;

1102 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

1103 
	`outb
(
ªg
, 
emu
->
p‹t
 + 
AC97ADDRESS
);

1104 
vÆ
 = 
	`öw
(
emu
->
p‹t
 + 
AC97DATA
);

1105 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

1106  
vÆ
;

1107 
	}
}

1109 
	$¢d_ˇ0106_ac97_wrôe
(
¢d_ac97
 *
ac97
,

1110 
ªg
, 
vÆ
)

1112 
¢d_ˇ0106
 *
emu
 = 
ac97
->
¥iv©e_d©a
;

1113 
Êags
;

1115 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

1116 
	`outb
(
ªg
, 
emu
->
p‹t
 + 
AC97ADDRESS
);

1117 
	`outw
(
vÆ
, 
emu
->
p‹t
 + 
AC97DATA
);

1118 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

1119 
	}
}

1121 
¢d_ac97_bus_›s
 
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
	g›s
 = {

1122 .
wrôe
 = 
¢d_ˇ0106_ac97_wrôe
,

1123 .
	gªad
 = 
¢d_ˇ0106_ac97_ªad
,

1126 
	$¢d_ˇ0106_ac97
(
¢d_ˇ0106
 *
chù
)

1128 
¢d_ac97_bus
 *
pbus
;

1129 
¢d_ac97_ãm∂©e
 
ac97
;

1130 
îr
;

1131 i‡((
îr
 = 
	`¢d_ac97_bus
(
chù
->
ˇrd
, 0, &
›s
, 
NULL
, &
pbus
)) < 0)

1132  
îr
;

1133 
pbus
->
no_vø
 = 1;

1134 
	`mem£t
(&
ac97
, 0, (ac97));

1135 
ac97
.
¥iv©e_d©a
 = 
chù
;

1136 
ac97
.
sˇps
 = 
AC97_SCAP_NO_SPDIF
;

1137  
	`¢d_ac97_mixî
(
pbus
, &
ac97
, &
chù
->ac97);

1138 
	}
}

1140 
ˇ0106_°›_chù
(
¢d_ˇ0106
 *
chù
);

1142 
	$¢d_ˇ0106_‰ì
(
¢d_ˇ0106
 *
chù
)

1144 i‡(
chù
->
ªs_p‹t
 !
NULL
) {

1146 
	`ˇ0106_°›_chù
(
chù
);

1148 i‡(
chù
->
úq
 >= 0)

1149 
	`‰ì_úq
(
chù
->
úq
, chip);

1152 i‡(
chù
->
buf„r
.
¨ó
)

1153 
	`¢d_dma_‰ì_∑ges
(&
chù
->
buf„r
);

1157 
	`ªÀa£_™d_‰ì_ªsour˚
(
chù
->
ªs_p‹t
);

1159 
	`pci_dißbÀ_devi˚
(
chù
->
pci
);

1160 
	`k‰ì
(
chù
);

1162 
	}
}

1164 
	$¢d_ˇ0106_dev_‰ì
(
¢d_devi˚
 *
devi˚
)

1166 
¢d_ˇ0106
 *
chù
 = 
devi˚
->
devi˚_d©a
;

1167  
	`¢d_ˇ0106_‰ì
(
chù
);

1168 
	}
}

1170 
úqªtu∫_t
 
	$¢d_ˇ0106_öãºu±
(
úq
, *
dev_id
)

1172 
°©us
;

1174 
¢d_ˇ0106
 *
chù
 = 
dev_id
;

1175 
i
;

1176 
mask
;

1177 
°©76
;

1178 
¢d_ˇ0106_ch™√l
 *
pch™√l
;

1180 
°©us
 = 
	`öl
(
chù
->
p‹t
 + 
IPR
);

1181 i‡(! 
°©us
)

1182  
IRQ_NONE
;

1184 
°©76
 = 
	`¢d_ˇ0106_±r_ªad
(
chù
, 
EXTENDED_INT
, 0);

1187 
mask
 = 0x11;

1188 
i
 = 0; i < 4; i++) {

1189 
pch™√l
 = &(
chù
->
∂ayback_ch™√ls
[
i
]);

1190 i‡(
°©76
 & 
mask
) {

1192 if(
pch™√l
->
u£
) {

1193 
	`¢d_pcm_≥riod_ñ≠£d
(
pch™√l
->
ïcm
->
sub°ªam
);

1199 
mask
 <<= 1;

1201 
mask
 = 0x110000;

1202 
i
 = 0; i < 4; i++) {

1203 
pch™√l
 = &(
chù
->
ˇ±uª_ch™√ls
[
i
]);

1204 i‡(
°©76
 & 
mask
) {

1206 if(
pch™√l
->
u£
) {

1207 
	`¢d_pcm_≥riod_ñ≠£d
(
pch™√l
->
ïcm
->
sub°ªam
);

1213 
mask
 <<= 1;

1216 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
EXTENDED_INT
, 0, 
°©76
);

1218 i‡(
chù
->
midi
.
dev_id
 &&

1219 (
°©us
 & (
chù
->
midi
.
ùr_tx
|chù->midi.
ùr_rx
))) {

1220 i‡(
chù
->
midi
.
öãºu±
)

1221 
chù
->
midi
.
	`öãºu±
(&chù->midi, 
°©us
);

1223 
chù
->
midi
.
	`öãºu±_dißbÀ
(&chù->midi, chù->midi.
tx_íabÀ
 | chù->midi.
rx_íabÀ
);

1227 
	`oué
(
°©us
, 
chù
->
p‹t
+
IPR
);

1229  
IRQ_HANDLED
;

1230 
	}
}

1232 
__devöô
 
	$¢d_ˇ0106_pcm
(
¢d_ˇ0106
 *
emu
, 
devi˚
)

1234 
¢d_pcm
 *
pcm
;

1235 
¢d_pcm_sub°ªam
 *
sub°ªam
;

1236 
îr
;

1238 
îr
 = 
	`¢d_pcm_√w
(
emu
->
ˇrd
, "ˇ0106", 
devi˚
, 1, 1, &
pcm
);

1239 i‡(
îr
 < 0)

1240  
îr
;

1242 
pcm
->
¥iv©e_d©a
 = 
emu
;

1244 
devi˚
) {

1246 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_PLAYBACK
, &
¢d_ˇ0106_∂ayback_‰⁄t_›s
);

1247 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_CAPTURE
, &
¢d_ˇ0106_ˇ±uª_0_›s
);

1250 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_PLAYBACK
, &
¢d_ˇ0106_∂ayback_ª¨_›s
);

1251 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_CAPTURE
, &
¢d_ˇ0106_ˇ±uª_1_›s
);

1254 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_PLAYBACK
, &
¢d_ˇ0106_∂ayback_˚¡î_l„_›s
);

1255 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_CAPTURE
, &
¢d_ˇ0106_ˇ±uª_2_›s
);

1258 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_PLAYBACK
, &
¢d_ˇ0106_∂ayback_unknown_›s
);

1259 
	`¢d_pcm_£t_›s
(
pcm
, 
SNDRV_PCM_STREAM_CAPTURE
, &
¢d_ˇ0106_ˇ±uª_3_›s
);

1263 
pcm
->
öfo_Êags
 = 0;

1264 
pcm
->
dev_sub˛ass
 = 
SNDRV_PCM_SUBCLASS_GENERIC_MIX
;

1265 
	`°r˝y
(
pcm
->
«me
, "CA0106");

1267 
sub°ªam
 = 
pcm
->
°ªams
[
SNDRV_PCM_STREAM_PLAYBACK
].substream;

1268 
sub°ªam
;

1269 
sub°ªam
 = sub°ªam->
√xt
) {

1270 i‡((
îr
 = 
	`¢d_pcm_lib_¥óŒoˇã_∑ges
(
sub°ªam
,

1271 
SNDRV_DMA_TYPE_DEV
,

1272 
	`¢d_dma_pci_d©a
(
emu
->
pci
),

1274  
îr
;

1277 
sub°ªam
 = 
pcm
->
°ªams
[
SNDRV_PCM_STREAM_CAPTURE
].substream;

1278 
sub°ªam
;

1279 
sub°ªam
 = sub°ªam->
√xt
) {

1280 i‡((
îr
 = 
	`¢d_pcm_lib_¥óŒoˇã_∑ges
(
sub°ªam
,

1281 
SNDRV_DMA_TYPE_DEV
,

1282 
	`¢d_dma_pci_d©a
(
emu
->
pci
),

1284  
îr
;

1287 
emu
->
pcm
[
devi˚
] =Öcm;

1290 
	}
}

1292 
	#SPI_REG
(
ªg
, 
vÆue
Ë((‘egË<< 
SPI_REG_SHIFT
Ë| (vÆue))

	)

1293 
	g•i_dac_öô
[] = {

1294 
SPI_REG
(
SPI_LDA1_REG
, 
SPI_DA_BIT_0dB
),

1295 
SPI_REG
(
SPI_RDA1_REG
, 
SPI_DA_BIT_0dB
),

1296 
SPI_REG
(
SPI_PL_REG
, 
SPI_PL_BIT_L_L
 | 
SPI_PL_BIT_R_R
 | 
SPI_IZD_BIT
),

1297 
SPI_REG
(
SPI_FMT_REG
, 
SPI_FMT_BIT_I2S
 | 
SPI_IWL_BIT_24
),

1298 
SPI_REG
(
SPI_LDA2_REG
, 
SPI_DA_BIT_0dB
),

1299 
SPI_REG
(
SPI_RDA2_REG
, 
SPI_DA_BIT_0dB
),

1300 
SPI_REG
(
SPI_LDA3_REG
, 
SPI_DA_BIT_0dB
),

1301 
SPI_REG
(
SPI_RDA3_REG
, 
SPI_DA_BIT_0dB
),

1302 
SPI_REG
(
SPI_MASTDA_REG
, 
SPI_DA_BIT_0dB
),

1303 
SPI_REG
(9, 0x00),

1304 
SPI_REG
(
SPI_MS_REG
, 
SPI_DACD0_BIT
 | 
SPI_DACD1_BIT
 | 
SPI_DACD2_BIT
),

1305 
SPI_REG
(12, 0x00),

1306 
SPI_REG
(
SPI_LDA4_REG
, 
SPI_DA_BIT_0dB
),

1307 
SPI_REG
(
SPI_RDA4_REG
, 
SPI_DA_BIT_0dB
 | 
SPI_DA_BIT_UPDATE
),

1308 
SPI_REG
(
SPI_DACD4_REG
, 0x00),

1311 
	gi2c_adc_öô
[][2] = {

1324 { 0x15, 
ADC_MUX_LINEIN
 },

1327 
	$ˇ0106_öô_chù
(
¢d_ˇ0106
 *
chù
, 
ªsume
)

1329 
ch
;

1330 
def_bôs
;

1332 
	`oué
(0, 
chù
->
p‹t
 + 
INTE
);

1348 
def_bôs
 =

1349 
SPCS_CLKACCY_1000PPM
 | 
SPCS_SAMPLERATE_48
 |

1350 
SPCS_CHANNELNUM_LEFT
 | 
SPCS_SOURCENUM_UNSPEC
 |

1351 
SPCS_GENERATIONSTATUS
 | 0x00001200 |

1352 0x00000000 | 
SPCS_EMPHASIS_NONE
 | 
SPCS_COPYRIGHT
;

1353 i‡(!
ªsume
) {

1354 
chù
->
•dif_°r_bôs
[0] = chù->
•dif_bôs
[0] = 
def_bôs
;

1355 
chù
->
•dif_°r_bôs
[1] = chù->
•dif_bôs
[1] = 
def_bôs
;

1356 
chù
->
•dif_°r_bôs
[2] = chù->
•dif_bôs
[2] = 
def_bôs
;

1357 
chù
->
•dif_°r_bôs
[3] = chù->
•dif_bôs
[3] = 
def_bôs
;

1360 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPCS1
, 0, chù->
•dif_°r_bôs
[1]);

1361 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPCS0
, 0, chù->
•dif_°r_bôs
[0]);

1362 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPCS2
, 0, chù->
•dif_°r_bôs
[2]);

1363 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPCS3
, 0, chù->
•dif_°r_bôs
[3]);

1365 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_MUTE
, 0, 0x00fc0000);

1366 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_MUTE
, 0, 0x00fc0000);

1369 
	`outb
(
AC97_REC_GAIN
, 
chù
->
p‹t
 + 
AC97ADDRESS
);

1370 
	`outw
(0x8000, 
chù
->
p‹t
 + 
AC97DATA
);

1372 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPCS0
, 0, 0x2108006);

1373 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 0x42, 0, 0x2108006);

1374 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 0x43, 0, 0x2108006);

1375 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 0x44, 0, 0x2108006);

1382 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPDIF_SELECT1
, 0, 0xf);

1386 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
SPDIF_SELECT2
, 0, 0x000f0000);

1388 
chù
->
•dif_íabÀ
 = 0;

1393 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_CONTROL
, 0, 0x40c81000);

1397 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_CONTROL
, 1, 0xffffffff);

1399 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_CONTROL
, 2, 0x30300000);

1401 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_CONTROL
, 3, 0x00700000);

1403 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_ROUTING1
, 0, 0x32765410);

1404 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_ROUTING2
, 0, 0x76767676);

1405 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_ROUTING1
, 0, 0x32765410);

1406 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_ROUTING2
, 0, 0x76767676);

1408 
ch
 = 0; ch < 4; ch++) {

1410 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_VOLUME1
, 
ch
, 0x30303030);

1411 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_VOLUME2
, 
ch
, 0x30303030);

1413 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_VOLUME1
, 
ch
, 0x40404040);

1414 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_VOLUME2
, 
ch
, 0x40404040);

1415 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_VOLUME1
, 
ch
, 0xffffffff);

1416 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
PLAYBACK_VOLUME2
, 
ch
, 0xffffffff);

1419 i‡(
chù
->
dëaûs
->
i2c_adc
 == 1) {

1421 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_SOURCE
, 0x0, 0x333300e4);

1423 i‡(!
ªsume
)

1424 
chù
->
ˇ±uª_sour˚
 = 3;

1425 } i‡(
chù
->
dëaûs
->
ac97
 == 1) {

1427 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_SOURCE
, 0x0, 0x444400e4);

1429 i‡(!
ªsume
)

1430 
chù
->
ˇ±uª_sour˚
 = 4;

1433 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
CAPTURE_SOURCE
, 0x0, 0x333300e4);

1435 i‡(!
ªsume
)

1436 
chù
->
ˇ±uª_sour˚
 = 3;

1439 i‡(
chù
->
dëaûs
->
gpio_ty≥
 == 2) {

1444 
	`oué
(0x0, 
chù
->
p‹t
+
GPIO
);

1446 
	`oué
(0x005f5301, 
chù
->
p‹t
+
GPIO
);

1447 } i‡(
chù
->
dëaûs
->
gpio_ty≥
 == 1) {

1452 
	`oué
(0x0, 
chù
->
p‹t
+
GPIO
);

1454 
	`oué
(0x005f5301, 
chù
->
p‹t
+
GPIO
);

1456 
	`oué
(0x0, 
chù
->
p‹t
+
GPIO
);

1457 
	`oué
(0x005f03a3, 
chù
->
p‹t
+
GPIO
);

1460 
	`¢d_ˇ0106_öå_íabÀ
(
chù
, 0x105);

1467 
	`oué
(
HCFG_AC97
 | 
HCFG_AUDIOENABLE
, 
chù
->
p‹t
+
HCFG
);

1469 i‡(
chù
->
dëaûs
->
i2c_adc
 == 1) {

1471 
size
, 
n
;

1473 
size
 = 
	`ARRAY_SIZE
(
i2c_adc_öô
);

1475 
n
 = 0;Ç < 
size
;Ç++)

1476 
	`¢d_ˇ0106_i2c_wrôe
(
chù
, 
i2c_adc_öô
[
n
][0],

1477 
i2c_adc_öô
[
n
][1]);

1478 
n
 = 0;Ç < 4;Ç++) {

1479 
chù
->
i2c_ˇ±uª_vﬁume
[
n
][0] = 0xcf;

1480 
chù
->
i2c_ˇ±uª_vﬁume
[
n
][1] = 0xcf;

1482 
chù
->
i2c_ˇ±uª_sour˚
 = 2;

1487 i‡(
chù
->
dëaûs
->
•i_dac
 == 1) {

1489 
size
, 
n
;

1491 
size
 = 
	`ARRAY_SIZE
(
•i_dac_öô
);

1492 
n
 = 0;Ç < 
size
;Ç++) {

1493 
ªg
 = 
•i_dac_öô
[
n
] >> 
SPI_REG_SHIFT
;

1495 
	`¢d_ˇ0106_•i_wrôe
(
chù
, 
•i_dac_öô
[
n
]);

1496 i‡(
ªg
 < 
	`ARRAY_SIZE
(
chù
->
•i_dac_ªg
))

1497 
chù
->
•i_dac_ªg
[
ªg
] = 
•i_dac_öô
[
n
];

1500 
	}
}

1502 
	$ˇ0106_°›_chù
(
¢d_ˇ0106
 *
chù
)

1505 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
BASIC_INTERRUPT
, 0, 0);

1506 
	`oué
(0, 
chù
->
p‹t
 + 
INTE
);

1507 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
EXTENDED_INT_MASK
, 0, 0);

1508 
	`udñay
(1000);

1511 
	`oué
(0, 
chù
->
p‹t
 + 
HCFG
);

1516 
	}
}

1518 
__devöô
 
	$¢d_ˇ0106_¸óã
(
dev
, 
¢d_ˇrd
 *
ˇrd
,

1519 
pci_dev
 *
pci
,

1520 
¢d_ˇ0106
 **
rchù
)

1522 
¢d_ˇ0106
 *
chù
;

1523 
¢d_ˇ0106_dëaûs
 *
c
;

1524 
îr
;

1525 
¢d_devi˚_›s
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(2))Ë
›s
 = {

1526 .
dev_‰ì
 = 
¢d_ˇ0106_dev_‰ì
,

1529 *
rchù
 = 
NULL
;

1531 
îr
 = 
	`pci_íabÀ_devi˚
(
pci
);

1532 i‡(
îr
 < 0)

1533  
îr
;

1534 i‡(
	`pci_£t_dma_mask
(
pci
, 
DMA_32BIT_MASK
) < 0 ||

1535 
	`pci_£t_c⁄si°ít_dma_mask
(
pci
, 
DMA_32BIT_MASK
) < 0) {

1536 
	`m¥ötk
(
KERN_ERR
 "errorÅo set 32bit mask DMA\n");

1537 
	`pci_dißbÀ_devi˚
(
pci
);

1538  -
ENXIO
;

1541 
chù
 = 
	`kzÆloc
((*chù), 
GFP_KERNEL
);

1542 i‡(
chù
 =
NULL
) {

1543 
	`pci_dißbÀ_devi˚
(
pci
);

1544  -
ENOMEM
;

1547 
chù
->
ˇrd
 = card;

1548 
chù
->
pci
 =Öci;

1549 
chù
->
úq
 = -1;

1551 
	`•ö_lock_öô
(&
chù
->
emu_lock
);

1553 
chù
->
p‹t
 = 
	`pci_ªsour˚_°¨t
(
pci
, 0);

1554 
chù
->
ªs_p‹t
 = 
	`ªque°_ªgi⁄
(chù->
p‹t
, 0x20, "snd_ca0106");

1555 i‡(!
chù
->
ªs_p‹t
) {

1556 
	`¢d_ˇ0106_‰ì
(
chù
);

1557 
	`m¥ötk
(
KERN_ERR
 "cannotállocateÅheÖort\n");

1558  -
EBUSY
;

1561 i‡(
	`ªque°_úq
(
pci
->
úq
, 
¢d_ˇ0106_öãºu±
,

1562 
IRQF_SHARED
, "¢d_ˇ0106", 
chù
)) {

1563 
	`¢d_ˇ0106_‰ì
(
chù
);

1564 
	`m¥ötk
(
KERN_ERR
 "cannot grab irq\n");

1565  -
EBUSY
;

1567 
chù
->
úq
 = 
pci
->irq;

1570 i‡(
	`¢d_dma_Æloc_∑ges
(
SNDRV_DMA_TYPE_DEV
, 
	`¢d_dma_pci_d©a
(
pci
),

1571 1024, &
chù
->
buf„r
) < 0) {

1572 
	`¢d_ˇ0106_‰ì
(
chù
);

1573  -
ENOMEM
;

1576 
	`pci_£t_ma°î
(
pci
);

1578 
	`pci_ªad_c⁄fig_dw‹d
(
pci
, 
PCI_SUBSYSTEM_VENDOR_ID
, &
chù
->
£rül
);

1579 
	`pci_ªad_c⁄fig_w‹d
(
pci
, 
PCI_SUBSYSTEM_ID
, &
chù
->
modñ
);

1580 
	`m¥ötk
(
KERN_INFO
 "snd-ca0106: Model %04x Rev %08x Serial %08x\n",

1581 
chù
->
modñ
, 
pci
->
ªvisi⁄
, chù->
£rül
);

1582 
	`°r˝y
(
ˇrd
->
drivî
, "CA0106");

1583 
	`°r˝y
(
ˇrd
->
sh‹äame
, "CA0106");

1585 
c
 = 
ˇ0106_chù_dëaûs
; c->
£rül
; c++) {

1586 i‡(
subsy°em
[
dev
]) {

1587 i‡(
c
->
£rül
 =
subsy°em
[
dev
])

1589 } i‡(
c
->
£rül
 =
chù
->serial)

1592 
chù
->
dëaûs
 = 
c
;

1593 i‡(
subsy°em
[
dev
]) {

1594 
	`m¥ötk
(
KERN_INFO
 "snd-ca0106: Sound cardÇame=%s, "

1596 
c
->
«me
, 
chù
->
£rül
, 
subsy°em
[
dev
]);

1599 
	`•rötf
(
ˇrd
->
l⁄g«me
, "%sát 0x%lx irq %i",

1600 
c
->
«me
, 
chù
->
p‹t
, chù->
úq
);

1602 
	`ˇ0106_öô_chù
(
chù
, 0);

1604 
îr
 = 
	`¢d_devi˚_√w
(
ˇrd
, 
SNDRV_DEV_LOWLEVEL
, 
chù
, &
›s
);

1605 i‡(
îr
 < 0) {

1606 
	`¢d_ˇ0106_‰ì
(
chù
);

1607  
îr
;

1609 *
rchù
 = 
chù
;

1611 
	}
}

1614 
	$ˇ0106_midi_öãºu±_íabÀ
(
¢d_ˇ_midi
 *
midi
, 
öå
)

1616 
	`¢d_ˇ0106_öå_íabÀ
((
¢d_ˇ0106
 *)(
midi
->
dev_id
), 
öå
);

1617 
	}
}

1619 
	$ˇ0106_midi_öãºu±_dißbÀ
(
¢d_ˇ_midi
 *
midi
, 
öå
)

1621 
	`¢d_ˇ0106_öå_dißbÀ
((
¢d_ˇ0106
 *)(
midi
->
dev_id
), 
öå
);

1622 
	}
}

1624 
	$ˇ0106_midi_ªad
(
¢d_ˇ_midi
 *
midi
, 
idx
)

1626  ()
	`¢d_ˇ0106_±r_ªad
((
¢d_ˇ0106
 *)(
midi
->
dev_id
),

1627 
midi
->
p‹t
 + 
idx
, 0);

1628 
	}
}

1630 
	$ˇ0106_midi_wrôe
(
¢d_ˇ_midi
 *
midi
, 
d©a
, 
idx
)

1632 
	`¢d_ˇ0106_±r_wrôe
((
¢d_ˇ0106
 *)(
midi
->
dev_id
), midi->
p‹t
 + 
idx
, 0, 
d©a
);

1633 
	}
}

1635 
¢d_ˇrd
 *
	$ˇ0106_dev_id_ˇrd
(*
dev_id
)

1637  ((
¢d_ˇ0106
 *)
dev_id
)->
ˇrd
;

1638 
	}
}

1640 
	$ˇ0106_dev_id_p‹t
(*
dev_id
)

1642  ((
¢d_ˇ0106
 *)
dev_id
)->
p‹t
;

1643 
	}
}

1645 
__devöô
 
	$¢d_ˇ0106_midi
(
¢d_ˇ0106
 *
chù
, 
ch™√l
)

1647 
¢d_ˇ_midi
 *
midi
;

1648 *
«me
;

1649 
îr
;

1651 i‡(
ch™√l
 =
CA0106_MIDI_CHAN_B
) {

1652 
«me
 = "CA0106 MPU-401 (UART) B";

1653 
midi
 = &
chù
->
midi2
;

1654 
midi
->
tx_íabÀ
 = 
INTE_MIDI_TX_B
;

1655 
midi
->
rx_íabÀ
 = 
INTE_MIDI_RX_B
;

1656 
midi
->
ùr_tx
 = 
IPR_MIDI_TX_B
;

1657 
midi
->
ùr_rx
 = 
IPR_MIDI_RX_B
;

1658 
midi
->
p‹t
 = 
MIDI_UART_B_DATA
;

1660 
«me
 = "CA0106 MPU-401 (UART)";

1661 
midi
 = &
chù
->midi;

1662 
midi
->
tx_íabÀ
 = 
INTE_MIDI_TX_A
;

1663 
midi
->
rx_íabÀ
 = 
INTE_MIDI_TX_B
;

1664 
midi
->
ùr_tx
 = 
IPR_MIDI_TX_A
;

1665 
midi
->
ùr_rx
 = 
IPR_MIDI_RX_A
;

1666 
midi
->
p‹t
 = 
MIDI_UART_A_DATA
;

1669 
midi
->
ª£t
 = 
CA0106_MPU401_RESET
;

1670 
midi
->
íãr_u¨t
 = 
CA0106_MPU401_ENTER_UART
;

1671 
midi
->
ack
 = 
CA0106_MPU401_ACK
;

1673 
midi
->
öput_avaû
 = 
CA0106_MIDI_INPUT_AVAIL
;

1674 
midi
->
ouçut_ªady
 = 
CA0106_MIDI_OUTPUT_READY
;

1676 
midi
->
ch™√l
 = channel;

1678 
midi
->
öãºu±_íabÀ
 = 
ˇ0106_midi_öãºu±_íabÀ
;

1679 
midi
->
öãºu±_dißbÀ
 = 
ˇ0106_midi_öãºu±_dißbÀ
;

1681 
midi
->
ªad
 = 
ˇ0106_midi_ªad
;

1682 
midi
->
wrôe
 = 
ˇ0106_midi_wrôe
;

1684 
midi
->
gë_dev_id_ˇrd
 = 
ˇ0106_dev_id_ˇrd
;

1685 
midi
->
gë_dev_id_p‹t
 = 
ˇ0106_dev_id_p‹t
;

1687 
midi
->
dev_id
 = 
chù
;

1689 i‡((
îr
 = 
	`ˇ_midi_öô
(
chù
, 
midi
, 0, 
«me
)) < 0)

1690  
îr
;

1693 
	}
}

1696 
__devöô
 
	$¢d_ˇ0106_¥obe
(
pci_dev
 *
pci
,

1697 c⁄° 
pci_devi˚_id
 *
pci_id
)

1699 
dev
;

1700 
¢d_ˇrd
 *
ˇrd
;

1701 
¢d_ˇ0106
 *
chù
;

1702 
i
, 
îr
;

1704 i‡(
dev
 >
SNDRV_CARDS
)

1705  -
ENODEV
;

1706 i‡(!
íabÀ
[
dev
]) {

1707 
dev
++;

1708  -
ENOENT
;

1711 
ˇrd
 = 
	`¢d_ˇrd_√w
(
ödex
[
dev
], 
id
[dev], 
THIS_MODULE
, 0);

1712 i‡(
ˇrd
 =
NULL
)

1713  -
ENOMEM
;

1715 
îr
 = 
	`¢d_ˇ0106_¸óã
(
dev
, 
ˇrd
, 
pci
, &
chù
);

1716 i‡(
îr
 < 0)

1717 
îr‹
;

1718 
ˇrd
->
¥iv©e_d©a
 = 
chù
;

1720 
i
 = 0; i < 4; i++) {

1721 
îr
 = 
	`¢d_ˇ0106_pcm
(
chù
, 
i
);

1722 i‡(
îr
 < 0)

1723 
îr‹
;

1726 i‡(
chù
->
dëaûs
->
ac97
 == 1) {

1728 
îr
 = 
	`¢d_ˇ0106_ac97
(
chù
);

1729 i‡(
îr
 < 0)

1730 
îr‹
;

1732 
îr
 = 
	`¢d_ˇ0106_mixî
(
chù
);

1733 i‡(
îr
 < 0)

1734 
îr‹
;

1736 
	`¢d_¥ötdd
("ca0106:Örobe for MIDI channel A ...");

1737 
îr
 = 
	`¢d_ˇ0106_midi
(
chù
, 
CA0106_MIDI_CHAN_A
);

1738 i‡(
îr
 < 0)

1739 
îr‹
;

1740 
	`¢d_¥ötdd
(" done.\n");

1742 #ifde‡
CONFIG_PROC_FS


1743 
	`¢d_ˇ0106_¥oc_öô
(
chù
);

1746 
	`¢d_ˇrd_£t_dev
(
ˇrd
, &
pci
->
dev
);

1748 
îr
 = 
	`¢d_ˇrd_ªgi°î
(
ˇrd
);

1749 i‡(
îr
 < 0)

1750 
îr‹
;

1752 
	`pci_£t_drvd©a
(
pci
, 
ˇrd
);

1753 
dev
++;

1756 
îr‹
:

1757 
	`¢d_ˇrd_‰ì
(
ˇrd
);

1758  
îr
;

1759 
	}
}

1761 
__devexô
 
	$¢d_ˇ0106_ªmove
(
pci_dev
 *
pci
)

1763 
	`¢d_ˇrd_‰ì
(
	`pci_gë_drvd©a
(
pci
));

1764 
	`pci_£t_drvd©a
(
pci
, 
NULL
);

1765 
	}
}

1767 #ifde‡
CONFIG_PM


1818 
	$¢d_ˇ0106_su•íd
(
pci_dev
 *
pci
, 
pm_mesßge_t
 
°©e
)

1820 
¢d_ˇrd
 *
ˇrd
 = 
	`pci_gë_drvd©a
(
pci
);

1821 
¢d_ˇ0106
 *
chù
 = 
ˇrd
->
¥iv©e_d©a
;

1822 
i
;

1824 
	`¢d_powî_ch™ge_°©e
(
ˇrd
, 
SNDRV_CTL_POWER_D3hŸ
);

1825 
i
 = 0; i < 4; i++)

1826 
	`¢d_pcm_su•íd_Æl
(
chù
->
pcm
[
i
]);

1827 i‡(
chù
->
dëaûs
->
ac97
)

1828 
	`¢d_ac97_su•íd
(
chù
->
ac97
);

1829 
	`¢d_ˇ0106_mixî_su•íd
(
chù
);

1831 
	`ˇ0106_°›_chù
(
chù
);

1833 
	`pci_dißbÀ_devi˚
(
pci
);

1834 
	`pci_ßve_°©e
(
pci
);

1835 
	`pci_£t_powî_°©e
(
pci
, 
	`pci_choo£_°©e
’ci, 
°©e
));

1837 
	}
}

1839 
	$¢d_ˇ0106_ªsume
(
pci_dev
 *
pci
)

1841 
¢d_ˇrd
 *
ˇrd
 = 
	`pci_gë_drvd©a
(
pci
);

1842 
¢d_ˇ0106
 *
chù
 = 
ˇrd
->
¥iv©e_d©a
;

1843 
i
;

1845 
	`pci_£t_powî_°©e
(
pci
, 
PCI_D0
);

1846 
	`pci_ª°‹e_°©e
(
pci
);

1848 i‡(
	`pci_íabÀ_devi˚
(
pci
) < 0) {

1849 
	`¢d_ˇrd_disc⁄√˘
(
ˇrd
);

1850  -
EIO
;

1853 
	`pci_£t_ma°î
(
pci
);

1855 
	`ˇ0106_öô_chù
(
chù
, 1);

1857 i‡(
chù
->
dëaûs
->
ac97
)

1858 
	`¢d_ac97_ªsume
(
chù
->
ac97
);

1859 
	`¢d_ˇ0106_mixî_ªsume
(
chù
);

1860 i‡(
chù
->
dëaûs
->
•i_dac
) {

1861 
i
 = 0; i < 
	`ARRAY_SIZE
(
chù
->
•i_dac_ªg
); i++)

1862 
	`¢d_ˇ0106_•i_wrôe
(
chù
, chù->
•i_dac_ªg
[
i
]);

1865 
	`¢d_powî_ch™ge_°©e
(
ˇrd
, 
SNDRV_CTL_POWER_D0
);

1867 
	}
}

1871 
pci_devi˚_id
 
	g¢d_ˇ0106_ids
[] = {

1872 { 0x1102, 0x0007, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 0 },

1875 
MODULE_DEVICE_TABLE
(
pci
, 
¢d_ˇ0106_ids
);

1878 
pci_drivî
 
	gdrivî
 = {

1879 .
«me
 = "CA0106",

1880 .
	gid_èbÀ
 = 
¢d_ˇ0106_ids
,

1881 .
	g¥obe
 = 
¢d_ˇ0106_¥obe
,

1882 .
	gªmove
 = 
__devexô_p
(
¢d_ˇ0106_ªmove
),

1883 #ifde‡
CONFIG_PM


1884 .
	gsu•íd
 = 
¢d_ˇ0106_su•íd
,

1885 .
	gªsume
 = 
¢d_ˇ0106_ªsume
,

1890 
__öô
 
	$Æß_ˇrd_ˇ0106_öô
()

1892 
	`öô_sound_c‹e
 ();

1893  
	`pci_ªgi°î_drivî
(&
drivî
);

1894 
	}
}

1897 
__exô
 
	$Æß_ˇrd_ˇ0106_exô
()

1899 
	`pci_uƒegi°î_drivî
(&
drivî
);

1900 
	`shutdown_sound_c‹e
 ();

1901 
	}
}

1903 
	$moduÀ_öô
(
Æß_ˇrd_ˇ0106_öô
)

1904 
	`moduÀ_exô
(
Æß_ˇrd_ˇ0106_exô
)

	@ca0106_mixer.c

64 
	#WRAPPERS_SYM_DRIVER_STEP1


	)

65 
	~"../../comm⁄/wøµîs_sym.h
"

68 
	~<löux/dñay.h
>

69 
	~<löux/öô.h
>

70 
	~<löux/öãºu±.h
>

71 
	~<löux/¶ab.h
>

72 
	~<löux/moduÀ∑øm.h
>

73 
	~<sound/c‹e.h
>

74 
	~<sound/öôvÆ.h
>

75 
	~<sound/pcm.h
>

76 
	~<sound/ac97_codec.h
>

77 
	~<sound/öfo.h
>

78 
	~<sound/év.h
>

79 
	~<asm/io.h
>

80 
	~"../../comm⁄/mpci-bus.h
"

82 
	~"ˇ0106.h
"

84 
	~<sound/timî.h
>

85 
	~<löux/¥oc_fs.h
>

86 
	~"modif_™nŸs.h
"

89 * (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
	g¶ave_vﬁs
[]Ë
	g__devöôd©a
 = {

99 
NULL


102 * (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
	g¶ave_sws
)[] 
	g__devöôd©a
 = {

108 
NULL


112 
	$ˇ0106_•dif_íabÀ
(
¢d_ˇ0106
 *
emu
)

114 
vÆ
;

116 i‡(
emu
->
•dif_íabÀ
) {

118 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
SPDIF_SELECT1
, 0, 0xf);

119 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
SPDIF_SELECT2
, 0, 0x0b000000);

120 
vÆ
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
CAPTURE_CONTROL
, 0) & ~0x1000;

121 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
CAPTURE_CONTROL
, 0, 
vÆ
);

122 
vÆ
 = 
	`öl
(
emu
->
p‹t
 + 
GPIO
) & ~0x101;

123 
	`oué
(
vÆ
, 
emu
->
p‹t
 + 
GPIO
);

127 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
SPDIF_SELECT1
, 0, 0xf);

128 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
SPDIF_SELECT2
, 0, 0x000f0000);

129 
vÆ
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
CAPTURE_CONTROL
, 0) | 0x1000;

130 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
CAPTURE_CONTROL
, 0, 
vÆ
);

131 
vÆ
 = 
	`öl
(
emu
->
p‹t
 + 
GPIO
) | 0x101;

132 
	`oué
(
vÆ
, 
emu
->
p‹t
 + 
GPIO
);

134 
	}
}

136 
	$ˇ0106_£t_ˇ±uª_sour˚
(
¢d_ˇ0106
 *
emu
)

138 
vÆ
 = 
emu
->
ˇ±uª_sour˚
;

139 
sour˚
, 
mask
;

140 
sour˚
 = (
vÆ
 << 28) | (val << 24) | (val << 20) | (val << 16);

141 
mask
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
CAPTURE_SOURCE
, 0) & 0xffff;

142 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
CAPTURE_SOURCE
, 0, 
sour˚
 | 
mask
);

143 
	}
}

145 
	$ˇ0106_£t_i2c_ˇ±uª_sour˚
(
¢d_ˇ0106
 *
emu
,

146 
vÆ
, 
f‹˚
)

148 
ngaö
, 
ogaö
;

149 
u32
 
sour˚
;

151 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_MUX
, 0);

152 
ngaö
 = 
emu
->
i2c_ˇ±uª_vﬁume
[
vÆ
][0];

153 
ogaö
 = 
emu
->
i2c_ˇ±uª_vﬁume
[emu->
i2c_ˇ±uª_sour˚
][0];

154 i‡(
f‹˚
 || 
ngaö
 !
ogaö
)

155 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_ATTEN_ADCL
, 
ngaö
 & 0xff);

156 
ngaö
 = 
emu
->
i2c_ˇ±uª_vﬁume
[
vÆ
][1];

157 
ogaö
 = 
emu
->
i2c_ˇ±uª_vﬁume
[emu->
i2c_ˇ±uª_sour˚
][1];

158 i‡(
f‹˚
 || 
ngaö
 !
ogaö
)

159 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_ATTEN_ADCR
, 
ngaö
 & 0xff);

160 
sour˚
 = 1 << 
vÆ
;

161 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_MUX
, 
sour˚
);

162 
emu
->
i2c_ˇ±uª_sour˚
 = 
vÆ
;

163 
	}
}

165 
	$ˇ0106_£t_ˇ±uª_mic_löe_ö
(
¢d_ˇ0106
 *
emu
)

167 
u32
 
tmp
;

169 i‡(
emu
->
ˇ±uª_mic_löe_ö
) {

171 
tmp
 = 
	`öl
(
emu
->
p‹t
+
GPIO
) & ~0x400;

172 
tmp
 =Åmp | 0x400;

173 
	`oué
(
tmp
, 
emu
->
p‹t
+
GPIO
);

177 
tmp
 = 
	`öl
(
emu
->
p‹t
+
GPIO
) & ~0x400;

178 
	`oué
(
tmp
, 
emu
->
p‹t
+
GPIO
);

181 
	}
}

183 
	$ˇ0106_£t_•dif_bôs
(
¢d_ˇ0106
 *
emu
, 
idx
)

185 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
SPCS0
 + 
idx
, 0,Ému->
•dif_°r_bôs
[idx]);

186 
	}
}

190 c⁄° 
DECLARE_TLV_DB_SCALE
(
¢d_ˇ0106_db_sˇÀ1
, -5175, 25, 1);

191 c⁄° 
DECLARE_TLV_DB_SCALE
(
¢d_ˇ0106_db_sˇÀ2
, -10350, 50, 1);

193 
	#¢d_ˇ0106_sh¨ed_•dif_öfo
 
¢d_˘l_boﬁón_m⁄o_öfo


	)

195 
	$¢d_ˇ0106_sh¨ed_•dif_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

196 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

198 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

200 
uc⁄åﬁ
->
vÆue
.
öãgî
.vÆue[0] = 
emu
->
•dif_íabÀ
;

202 
	}
}

204 
	$¢d_ˇ0106_sh¨ed_•dif_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

205 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

207 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

208 
vÆ
;

209 
ch™ge
 = 0;

211 
vÆ
 = !!
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0];

212 
ch™ge
 = (
emu
->
•dif_íabÀ
 !
vÆ
);

213 i‡(
ch™ge
) {

214 
emu
->
•dif_íabÀ
 = 
vÆ
;

215 
	`ˇ0106_•dif_íabÀ
(
emu
);

217  
ch™ge
;

218 
	}
}

220 
	$¢d_ˇ0106_ˇ±uª_sour˚_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

221 
¢d_˘l_ñem_öfo
 *
uöfo
)

223 *
ãxts
[6] = {

227 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_ENUMERATED
;

228 
uöfo
->
cou¡
 = 1;

229 
uöfo
->
vÆue
.
íumî©ed
.
ôems
 = 6;

230 i‡(
uöfo
->
vÆue
.
íumî©ed
.
ôem
 > 5)

231 
uöfo
->
vÆue
.
íumî©ed
.
ôem
 = 5;

232 
	`°r˝y
(
uöfo
->
vÆue
.
íumî©ed
.
«me
, 
ãxts
[uöfo->vÆue.íumî©ed.
ôem
]);

234 
	}
}

236 
	$¢d_ˇ0106_ˇ±uª_sour˚_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

237 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

239 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

241 
uc⁄åﬁ
->
vÆue
.
íumî©ed
.
ôem
[0] = 
emu
->
ˇ±uª_sour˚
;

243 
	}
}

245 
	$¢d_ˇ0106_ˇ±uª_sour˚_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

246 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

248 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

249 
vÆ
;

250 
ch™ge
 = 0;

252 
vÆ
 = 
uc⁄åﬁ
->
vÆue
.
íumî©ed
.
ôem
[0] ;

253 i‡(
vÆ
 >= 6)

254  -
EINVAL
;

255 
ch™ge
 = (
emu
->
ˇ±uª_sour˚
 !
vÆ
);

256 i‡(
ch™ge
) {

257 
emu
->
ˇ±uª_sour˚
 = 
vÆ
;

258 
	`ˇ0106_£t_ˇ±uª_sour˚
(
emu
);

260  
ch™ge
;

261 
	}
}

263 
	$¢d_ˇ0106_i2c_ˇ±uª_sour˚_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

264 
¢d_˘l_ñem_öfo
 *
uöfo
)

266 *
ãxts
[6] = {

270 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_ENUMERATED
;

271 
uöfo
->
cou¡
 = 1;

272 
uöfo
->
vÆue
.
íumî©ed
.
ôems
 = 4;

273 i‡(
uöfo
->
vÆue
.
íumî©ed
.
ôem
 > 3)

274 
uöfo
->
vÆue
.
íumî©ed
.
ôem
 = 3;

275 
	`°r˝y
(
uöfo
->
vÆue
.
íumî©ed
.
«me
, 
ãxts
[uöfo->vÆue.íumî©ed.
ôem
]);

277 
	}
}

279 
	$¢d_ˇ0106_i2c_ˇ±uª_sour˚_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

280 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

282 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

284 
uc⁄åﬁ
->
vÆue
.
íumî©ed
.
ôem
[0] = 
emu
->
i2c_ˇ±uª_sour˚
;

286 
	}
}

288 
	$¢d_ˇ0106_i2c_ˇ±uª_sour˚_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

289 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

291 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

292 
sour˚_id
;

293 
ch™ge
 = 0;

298 
sour˚_id
 = 
uc⁄åﬁ
->
vÆue
.
íumî©ed
.
ôem
[0] ;

299 i‡(
sour˚_id
 >= 4)

300  -
EINVAL
;

301 
ch™ge
 = (
emu
->
i2c_ˇ±uª_sour˚
 !
sour˚_id
);

302 i‡(
ch™ge
) {

303 
	`ˇ0106_£t_i2c_ˇ±uª_sour˚
(
emu
, 
sour˚_id
, 0);

305  
ch™ge
;

306 
	}
}

308 
	$¢d_ˇ0106_ˇ±uª_löe_ö_side_out_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

309 
¢d_˘l_ñem_öfo
 *
uöfo
)

311 *
ãxts
[2] = { "Side out", "Line in" };

313 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_ENUMERATED
;

314 
uöfo
->
cou¡
 = 1;

315 
uöfo
->
vÆue
.
íumî©ed
.
ôems
 = 2;

316 i‡(
uöfo
->
vÆue
.
íumî©ed
.
ôem
 > 1)

317 
uöfo
->
vÆue
.
íumî©ed
.
ôem
 = 1;

318 
	`°r˝y
(
uöfo
->
vÆue
.
íumî©ed
.
«me
, 
ãxts
[uöfo->vÆue.íumî©ed.
ôem
]);

320 
	}
}

322 
	$¢d_ˇ0106_ˇ±uª_mic_löe_ö_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

323 
¢d_˘l_ñem_öfo
 *
uöfo
)

325 *
ãxts
[2] = { "Line in", "Mic in" };

327 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_ENUMERATED
;

328 
uöfo
->
cou¡
 = 1;

329 
uöfo
->
vÆue
.
íumî©ed
.
ôems
 = 2;

330 i‡(
uöfo
->
vÆue
.
íumî©ed
.
ôem
 > 1)

331 
uöfo
->
vÆue
.
íumî©ed
.
ôem
 = 1;

332 
	`°r˝y
(
uöfo
->
vÆue
.
íumî©ed
.
«me
, 
ãxts
[uöfo->vÆue.íumî©ed.
ôem
]);

334 
	}
}

336 
	$¢d_ˇ0106_ˇ±uª_mic_löe_ö_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

337 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

339 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

341 
uc⁄åﬁ
->
vÆue
.
íumî©ed
.
ôem
[0] = 
emu
->
ˇ±uª_mic_löe_ö
;

343 
	}
}

345 
	$¢d_ˇ0106_ˇ±uª_mic_löe_ö_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

346 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

348 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

349 
vÆ
;

350 
ch™ge
 = 0;

352 
vÆ
 = 
uc⁄åﬁ
->
vÆue
.
íumî©ed
.
ôem
[0] ;

353 i‡(
vÆ
 > 1)

354  -
EINVAL
;

355 
ch™ge
 = (
emu
->
ˇ±uª_mic_löe_ö
 !
vÆ
);

356 i‡(
ch™ge
) {

357 
emu
->
ˇ±uª_mic_löe_ö
 = 
vÆ
;

358 
	`ˇ0106_£t_ˇ±uª_mic_löe_ö
(
emu
);

360  
ch™ge
;

361 
	}
}

363 
¢d_kc⁄åﬁ_√w
 
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
¢d_ˇ0106_ˇ±uª_mic_löe_ö
 
	g__devöôd©a
 =

365 .
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
,

366 .
	g«me
 = "Shared Mic/Line in Capture Switch",

367 .
	göfo
 = 
¢d_ˇ0106_ˇ±uª_mic_löe_ö_öfo
,

368 .
	ggë
 = 
¢d_ˇ0106_ˇ±uª_mic_löe_ö_gë
,

369 .
	gput
 = 
¢d_ˇ0106_ˇ±uª_mic_löe_ö_put


372 
¢d_kc⁄åﬁ_√w
 
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
¢d_ˇ0106_ˇ±uª_löe_ö_side_out
 
	g__devöôd©a
 =

374 .
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
,

375 .
	g«me
 = "Shared Line in/Side out Capture Switch",

376 .
	göfo
 = 
¢d_ˇ0106_ˇ±uª_löe_ö_side_out_öfo
,

377 .
	ggë
 = 
¢d_ˇ0106_ˇ±uª_mic_löe_ö_gë
,

378 .
	gput
 = 
¢d_ˇ0106_ˇ±uª_mic_löe_ö_put


382 
	$¢d_ˇ0106_•dif_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

383 
¢d_˘l_ñem_öfo
 *
uöfo
)

385 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_IEC958
;

386 
uöfo
->
cou¡
 = 1;

388 
	}
}

390 
	$decode_•dif_bôs
(*
°©us
, 
bôs
)

392 
°©us
[0] = (
bôs
 >> 0) & 0xff;

393 
°©us
[1] = (
bôs
 >> 8) & 0xff;

394 
°©us
[2] = (
bôs
 >> 16) & 0xff;

395 
°©us
[3] = (
bôs
 >> 24) & 0xff;

396 
	}
}

398 
	$¢d_ˇ0106_•dif_gë_deÁu…
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

399 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

401 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

402 
idx
 = 
	`¢d_˘l_gë_ioffidx
(
kc⁄åﬁ
, &
uc⁄åﬁ
->
id
);

404 
	`decode_•dif_bôs
(
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
,

405 
emu
->
•dif_bôs
[
idx
]);

407 
	}
}

409 
	$¢d_ˇ0106_•dif_gë_°ªam
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

410 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

412 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

413 
idx
 = 
	`¢d_˘l_gë_ioffidx
(
kc⁄åﬁ
, &
uc⁄åﬁ
->
id
);

415 
	`decode_•dif_bôs
(
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
,

416 
emu
->
•dif_°r_bôs
[
idx
]);

418 
	}
}

420 
	$¢d_ˇ0106_•dif_gë_mask
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

421 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

423 
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
[0] = 0xff;

424 
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
[1] = 0xff;

425 
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
[2] = 0xff;

426 
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
[3] = 0xff;

428 
	}
}

430 
	$ícode_•dif_bôs
(*
°©us
)

432  (()
°©us
[0] << 0) |

433 (()
°©us
[1] << 8) |

434 (()
°©us
[2] << 16) |

435 (()
°©us
[3] << 24);

436 
	}
}

438 
	$¢d_ˇ0106_•dif_put_deÁu…
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

439 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

441 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

442 
idx
 = 
	`¢d_˘l_gë_ioffidx
(
kc⁄åﬁ
, &
uc⁄åﬁ
->
id
);

443 
vÆ
;

445 
vÆ
 = 
	`ícode_•dif_bôs
(
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
);

446 i‡(
vÆ
 !
emu
->
•dif_bôs
[
idx
]) {

447 
emu
->
•dif_bôs
[
idx
] = 
vÆ
;

451 
emu
->
•dif_°r_bôs
[
idx
] = 
vÆ
;

452 
	`ˇ0106_£t_•dif_bôs
(
emu
, 
idx
);

456 
	}
}

458 
	$¢d_ˇ0106_•dif_put_°ªam
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

459 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

461 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

462 
idx
 = 
	`¢d_˘l_gë_ioffidx
(
kc⁄åﬁ
, &
uc⁄åﬁ
->
id
);

463 
vÆ
;

465 
vÆ
 = 
	`ícode_•dif_bôs
(
uc⁄åﬁ
->
vÆue
.
õc958
.
°©us
);

466 i‡(
vÆ
 !
emu
->
•dif_°r_bôs
[
idx
]) {

467 
emu
->
•dif_°r_bôs
[
idx
] = 
vÆ
;

468 
	`ˇ0106_£t_•dif_bôs
(
emu
, 
idx
);

472 
	}
}

474 
	$¢d_ˇ0106_vﬁume_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

475 
¢d_˘l_ñem_öfo
 *
uöfo
)

477 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_INTEGER
;

478 
uöfo
->
cou¡
 = 2;

479 
uöfo
->
vÆue
.
öãgî
.
mö
 = 0;

480 
uöfo
->
vÆue
.
öãgî
.
max
 = 255;

482 
	}
}

484 
	$¢d_ˇ0106_vﬁume_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

485 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

487 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

488 
vÆue
;

489 
ch™√l_id
, 
ªg
;

491 
ch™√l_id
 = (
kc⁄åﬁ
->
¥iv©e_vÆue
 >> 8) & 0xff;

492 
ªg
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
 & 0xff;

494 
vÆue
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
ªg
, 
ch™√l_id
);

495 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0] = 0xff - ((value >> 24) & 0xff);

496 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[1] = 0xff - ((value >> 16) & 0xff);

498 
	}
}

500 
	$¢d_ˇ0106_vﬁume_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

501 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

503 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

504 
ovÆ
, 
nvÆ
;

505 
ch™√l_id
, 
ªg
;

507 
ch™√l_id
 = (
kc⁄åﬁ
->
¥iv©e_vÆue
 >> 8) & 0xff;

508 
ªg
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
 & 0xff;

510 
ovÆ
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
ªg
, 
ch™√l_id
);

511 
nvÆ
 = ((0xf‡- 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0]) << 24) |

512 ((0xf‡- 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[1]) << 16);

513 
nvÆ
 |((0xf‡- 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0]) << 8) |

514 ((0xf‡- 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[1]) );

515 i‡(
ovÆ
 =
nvÆ
)

517 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
ªg
, 
ch™√l_id
, 
nvÆ
);

519 
	}
}

521 
	$¢d_ˇ0106_i2c_vﬁume_öfo
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

522 
¢d_˘l_ñem_öfo
 *
uöfo
)

524 
uöfo
->
ty≥
 = 
SNDRV_CTL_ELEM_TYPE_INTEGER
;

525 
uöfo
->
cou¡
 = 2;

526 
uöfo
->
vÆue
.
öãgî
.
mö
 = 0;

527 
uöfo
->
vÆue
.
öãgî
.
max
 = 255;

529 
	}
}

531 
	$¢d_ˇ0106_i2c_vﬁume_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

532 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

534 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

535 
sour˚_id
;

537 
sour˚_id
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
;

539 
uc⁄åﬁ
->
vÆue
.
öãgî
.vÆue[0] = 
emu
->
i2c_ˇ±uª_vﬁume
[
sour˚_id
][0];

540 
uc⁄åﬁ
->
vÆue
.
öãgî
.vÆue[1] = 
emu
->
i2c_ˇ±uª_vﬁume
[
sour˚_id
][1];

542 
	}
}

544 
	$¢d_ˇ0106_i2c_vﬁume_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

545 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

547 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

548 
ogaö
;

549 
ngaö
;

550 
sour˚_id
;

551 
ch™ge
 = 0;

553 
sour˚_id
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
;

554 
ogaö
 = 
emu
->
i2c_ˇ±uª_vﬁume
[
sour˚_id
][0];

555 
ngaö
 = 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0];

556 i‡(
ngaö
 > 0xff)

557  -
EINVAL
;

558 i‡(
ogaö
 !
ngaö
) {

559 i‡(
emu
->
i2c_ˇ±uª_sour˚
 =
sour˚_id
)

560 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_ATTEN_ADCL
, ((
ngaö
) & 0xff) );

561 
emu
->
i2c_ˇ±uª_vﬁume
[
sour˚_id
][0] = 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0];

562 
ch™ge
 = 1;

564 
ogaö
 = 
emu
->
i2c_ˇ±uª_vﬁume
[
sour˚_id
][1];

565 
ngaö
 = 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[1];

566 i‡(
ngaö
 > 0xff)

567  -
EINVAL
;

568 i‡(
ogaö
 !
ngaö
) {

569 i‡(
emu
->
i2c_ˇ±uª_sour˚
 =
sour˚_id
)

570 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ADC_ATTEN_ADCR
, ((
ngaö
) & 0xff));

571 
emu
->
i2c_ˇ±uª_vﬁume
[
sour˚_id
][1] = 
uc⁄åﬁ
->
vÆue
.
öãgî
.value[1];

572 
ch™ge
 = 1;

575  
ch™ge
;

576 
	}
}

578 
	#•i_muã_öfo
 
¢d_˘l_boﬁón_m⁄o_öfo


	)

580 
	$•i_muã_gë
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

581 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

583 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

584 
ªg
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
 >> 
SPI_REG_SHIFT
;

585 
bô
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
 & 
SPI_REG_MASK
;

587 
uc⁄åﬁ
->
vÆue
.
öãgî
.vÆue[0] = !(
emu
->
•i_dac_ªg
[
ªg
] & 
bô
);

589 
	}
}

591 
	$•i_muã_put
(
¢d_kc⁄åﬁ
 *
kc⁄åﬁ
,

592 
¢d_˘l_ñem_vÆue
 *
uc⁄åﬁ
)

594 
¢d_ˇ0106
 *
emu
 = 
	`¢d_kc⁄åﬁ_chù
(
kc⁄åﬁ
);

595 
ªg
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
 >> 
SPI_REG_SHIFT
;

596 
bô
 = 
kc⁄åﬁ
->
¥iv©e_vÆue
 & 
SPI_REG_MASK
;

597 
ªt
;

599 
ªt
 = 
emu
->
•i_dac_ªg
[
ªg
] & 
bô
;

600 i‡(
uc⁄åﬁ
->
vÆue
.
öãgî
.value[0]) {

601 i‡(!
ªt
)

603 
emu
->
•i_dac_ªg
[
ªg
] &~
bô
;

605 i‡(
ªt
)

607 
emu
->
•i_dac_ªg
[
ªg
] |
bô
;

610 
ªt
 = 
	`¢d_ˇ0106_•i_wrôe
(
emu
,Ému->
•i_dac_ªg
[
ªg
]);

611  
ªt
 ? -
EINVAL
 : 1;

612 
	}
}

614 
	#CA_VOLUME
(
x«me
,
chid
,
ªg
) \

616 .
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
, .
«me
 = 
x«me
, \

617 .
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
 | \

618 
SNDRV_CTL_ELEM_ACCESS_TLV_READ
, \

619 .
öfo
 = 
¢d_ˇ0106_vﬁume_öfo
, \

620 .
gë
 = 
¢d_ˇ0106_vﬁume_gë
, \

621 .
put
 = 
¢d_ˇ0106_vﬁume_put
, \

622 .
év
 = { .
p
 = 
¢d_ˇ0106_db_sˇÀ1
 }, \

623 .
¥iv©e_vÆue
 = ((
chid
Ë<< 8Ë| (
ªg
) \

624 }

	)

626 
¢d_kc⁄åﬁ_√w
 (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
¢d_ˇ0106_vﬁume_˘ls
)[] 
	g__devöôd©a
 = {

627 
CA_VOLUME
("Analog Front Playback Volume",

628 
CONTROL_FRONT_CHANNEL
, 
PLAYBACK_VOLUME2
),

629 
CA_VOLUME
("Analog Rear Playback Volume",

630 
CONTROL_REAR_CHANNEL
, 
PLAYBACK_VOLUME2
),

631 
CA_VOLUME
("Analog Center/LFE Playback Volume",

632 
CONTROL_CENTER_LFE_CHANNEL
, 
PLAYBACK_VOLUME2
),

633 
CA_VOLUME
("Analog Side Playback Volume",

634 
CONTROL_UNKNOWN_CHANNEL
, 
PLAYBACK_VOLUME2
),

636 
CA_VOLUME
("IEC958 Front Playback Volume",

637 
CONTROL_FRONT_CHANNEL
, 
PLAYBACK_VOLUME1
),

638 
CA_VOLUME
("IEC958 Rear Playback Volume",

639 
CONTROL_REAR_CHANNEL
, 
PLAYBACK_VOLUME1
),

640 
CA_VOLUME
("IEC958 Center/LFE Playback Volume",

641 
CONTROL_CENTER_LFE_CHANNEL
, 
PLAYBACK_VOLUME1
),

642 
CA_VOLUME
("IEC958 Unknown Playback Volume",

643 
CONTROL_UNKNOWN_CHANNEL
, 
PLAYBACK_VOLUME1
),

645 
CA_VOLUME
("CAPTURE feedback Playback Volume",

646 1, 
CAPTURE_CONTROL
),

649 .
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READ
,

650 .
	giÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_PCM
,

651 .
	g«me
 = 
SNDRV_CTL_NAME_IEC958
("",
PLAYBACK
,
MASK
),

652 .
	gcou¡
 = 4,

653 .
	göfo
 = 
¢d_ˇ0106_•dif_öfo
,

654 .
	ggë
 = 
¢d_ˇ0106_•dif_gë_mask


657 .
	giÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
,

658 .
	g«me
 = "IEC958 Playback Switch",

659 .
	göfo
 = 
¢d_ˇ0106_sh¨ed_•dif_öfo
,

660 .
	ggë
 = 
¢d_ˇ0106_sh¨ed_•dif_gë
,

661 .
	gput
 = 
¢d_ˇ0106_sh¨ed_•dif_put


664 .
	giÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
,

665 .
	g«me
 = "Digital Source Capture Enum",

666 .
	göfo
 = 
¢d_ˇ0106_ˇ±uª_sour˚_öfo
,

667 .
	ggë
 = 
¢d_ˇ0106_ˇ±uª_sour˚_gë
,

668 .
	gput
 = 
¢d_ˇ0106_ˇ±uª_sour˚_put


671 .
	giÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
,

672 .
	g«me
 = "Analog Source Capture Enum",

673 .
	göfo
 = 
¢d_ˇ0106_i2c_ˇ±uª_sour˚_öfo
,

674 .
	ggë
 = 
¢d_ˇ0106_i2c_ˇ±uª_sour˚_gë
,

675 .
	gput
 = 
¢d_ˇ0106_i2c_ˇ±uª_sour˚_put


678 .
	giÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_PCM
,

679 .
	g«me
 = 
SNDRV_CTL_NAME_IEC958
("",
PLAYBACK
,
DEFAULT
),

680 .
	gcou¡
 = 4,

681 .
	göfo
 = 
¢d_ˇ0106_•dif_öfo
,

682 .
	ggë
 = 
¢d_ˇ0106_•dif_gë_deÁu…
,

683 .
	gput
 = 
¢d_ˇ0106_•dif_put_deÁu…


686 .
	giÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_PCM
,

687 .
	g«me
 = 
SNDRV_CTL_NAME_IEC958
("",
PLAYBACK
,
PCM_STREAM
),

688 .
	gcou¡
 = 4,

689 .
	göfo
 = 
¢d_ˇ0106_•dif_öfo
,

690 .
	ggë
 = 
¢d_ˇ0106_•dif_gë_°ªam
,

691 .
	gput
 = 
¢d_ˇ0106_•dif_put_°ªam


695 
	#I2C_VOLUME
(
x«me
,
chid
) \

697 .
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
, .
«me
 = 
x«me
, \

698 .
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
 | \

699 
SNDRV_CTL_ELEM_ACCESS_TLV_READ
, \

700 .
öfo
 = 
¢d_ˇ0106_i2c_vﬁume_öfo
, \

701 .
gë
 = 
¢d_ˇ0106_i2c_vﬁume_gë
, \

702 .
put
 = 
¢d_ˇ0106_i2c_vﬁume_put
, \

703 .
év
 = { .
p
 = 
¢d_ˇ0106_db_sˇÀ2
 }, \

704 .
¥iv©e_vÆue
 = 
chid
 \

705 }

	)

707 
¢d_kc⁄åﬁ_√w
 (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
¢d_ˇ0106_vﬁume_i2c_adc_˘ls
)[] 
	g__devöôd©a
 = {

708 
I2C_VOLUME
("Phone Capture Volume", 0),

709 
I2C_VOLUME
("Mic Capture Volume", 1),

710 
I2C_VOLUME
("Line in Capture Volume", 2),

711 
I2C_VOLUME
("Aux Capture Volume", 3),

714 
	#SPI_SWITCH
(
x«me
,
ªg
,
bô
) \

716 .
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
, .
«me
 = 
x«me
, \

717 .
ac˚ss
 = 
SNDRV_CTL_ELEM_ACCESS_READWRITE
, \

718 .
öfo
 = 
•i_muã_öfo
, \

719 .
gë
 = 
•i_muã_gë
, \

720 .
put
 = 
•i_muã_put
, \

721 .
¥iv©e_vÆue
 = (
ªg
<<
SPI_REG_SHIFT
Ë| (
bô
) \

722 }

	)

724 
¢d_kc⁄åﬁ_√w
 (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
¢d_ˇ0106_vﬁume_•i_dac_˘ls
)[]

725 
	g__devöôd©a
 = {

726 
SPI_SWITCH
("Analog Front Playback Switch",

727 
SPI_DMUTE4_REG
, 
SPI_DMUTE4_BIT
),

728 
SPI_SWITCH
("Analog Rear Playback Switch",

729 
SPI_DMUTE0_REG
, 
SPI_DMUTE0_BIT
),

730 
SPI_SWITCH
("Analog Center/LFE Playback Switch",

731 
SPI_DMUTE2_REG
, 
SPI_DMUTE2_BIT
),

732 
SPI_SWITCH
("Analog Side Playback Switch",

733 
SPI_DMUTE1_REG
, 
SPI_DMUTE1_BIT
),

736 
__devöô
 
	$ªmove_˘l
(
¢d_ˇrd
 *
ˇrd
, c⁄° *
«me
)

738 
¢d_˘l_ñem_id
 
id
;

739 
	`mem£t
(&
id
, 0, (id));

740 
	`°r˝y
(
id
.
«me
,Çame);

741 
id
.
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
;

742  
	`¢d_˘l_ªmove_id
(
ˇrd
, &
id
);

743 
	}
}

745 
¢d_kc⁄åﬁ
 
__devöô
 *
	$˘l_föd
(
¢d_ˇrd
 *
ˇrd
, c⁄° *
«me
)

747 
¢d_˘l_ñem_id
 
sid
;

748 
	`mem£t
(&
sid
, 0, (sid));

750 
	`°r˝y
(
sid
.
«me
,Çame);

751 
sid
.
iÁ˚
 = 
SNDRV_CTL_ELEM_IFACE_MIXER
;

752  
	`¢d_˘l_föd_id
(
ˇrd
, &
sid
);

753 
	}
}

755 
__devöô
 
	$ª«me_˘l
(
¢d_ˇrd
 *
ˇrd
, c⁄° *
§c
, c⁄° *
d°
)

757 
¢d_kc⁄åﬁ
 *
k˘l
 = 
	`˘l_föd
(
ˇrd
, 
§c
);

758 i‡(
k˘l
) {

759 
	`°r˝y
(
k˘l
->
id
.
«me
, 
d°
);

762  -
ENOENT
;

763 
	}
}

765 
	#ADD_CTLS
(
emu
, 
˘ls
) \

767 
i
, 
_îr
; \

768 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘ls
); i++) { \

769 
_îr
 = 
	`¢d_˘l_add
(
ˇrd
, 
	`¢d_˘l_√w1
(&
˘ls
[
i
], 
emu
)); \

770 i‡(
_îr
 < 0) \

771  
_îr
; \

773 } 0)

	)

775 
__devöôd©a


776 
DECLARE_TLV_DB_SCALE
(
¢d_ˇ0106_ma°î_db_sˇÀ
, -6375, 50, 1);

801 
__devöô
 
	$add_¶aves
(
¢d_ˇrd
 *
ˇrd
,

802 
¢d_kc⁄åﬁ
 *
ma°î
, **
li°
)

804 ; *
li°
;Üist++) {

805 
¢d_kc⁄åﬁ
 *
¶ave
 = 
	`˘l_föd
(
ˇrd
, *
li°
);

806 i‡(
¶ave
)

807 
	`¢d_˘l_add_¶ave
(
ma°î
, 
¶ave
);

809 
	}
}

812 * (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
	gˇ0106_ªmove_˘ls
)[] = {

834 
NULL


836 * (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
	gˇ0106_ª«me_˘ls
)[] = {

847 
NULL


851 
__devöô
 
	$¢d_ˇ0106_mixî
(
¢d_ˇ0106
 *
emu
)

853 
îr
;

854 
¢d_ˇrd
 *
ˇrd
 = 
emu
->card;

855 **
c
;

856 
¢d_kc⁄åﬁ
 *
vma°î
;

895 
c
 = 
ˇ0106_ªmove_˘ls
; *c; c++)

896 
	`ªmove_˘l
(
ˇrd
, *
c
);

897 
c
 = 
ˇ0106_ª«me_˘ls
; *c; c += 2)

898 
	`ª«me_˘l
(
ˇrd
, 
c
[0], c[1]);

901 
	`ADD_CTLS
(
emu
, 
¢d_ˇ0106_vﬁume_˘ls
);

902 i‡(
emu
->
dëaûs
->
i2c_adc
 == 1) {

903 
	`ADD_CTLS
(
emu
, 
¢d_ˇ0106_vﬁume_i2c_adc_˘ls
);

904 i‡(
emu
->
dëaûs
->
gpio_ty≥
 == 1)

905 
îr
 = 
	`¢d_˘l_add
(
ˇrd
, 
	`¢d_˘l_√w1
(&
¢d_ˇ0106_ˇ±uª_mic_löe_ö
, 
emu
));

907 
îr
 = 
	`¢d_˘l_add
(
ˇrd
, 
	`¢d_˘l_√w1
(&
¢d_ˇ0106_ˇ±uª_löe_ö_side_out
, 
emu
));

908 i‡(
îr
 < 0)

909  
îr
;

911 i‡(
emu
->
dëaûs
->
•i_dac
 == 1)

912 
	`ADD_CTLS
(
emu
, 
¢d_ˇ0106_vﬁume_•i_dac_˘ls
);

915 
vma°î
 = 
	`¢d_˘l_make_vútuÆ_ma°î
("Master Playback Volume",

916 
¢d_ˇ0106_ma°î_db_sˇÀ
);

917 i‡(!
vma°î
)

918  -
ENOMEM
;

919 
	`add_¶aves
(
ˇrd
, 
vma°î
, 
¶ave_vﬁs
);

921 i‡(
emu
->
dëaûs
->
•i_dac
 == 1) {

922 
vma°î
 = 
	`¢d_˘l_make_vútuÆ_ma°î
("Master Playback Switch",

923 
NULL
);

924 i‡(!
vma°î
)

925  -
ENOMEM
;

926 
	`add_¶aves
(
ˇrd
, 
vma°î
, 
¶ave_sws
);

929 
	}
}

931 #ifde‡
CONFIG_PM


932 
	sˇ0106_vﬁ_tbl
 {

933 
	mch™√l_id
;

934 
	mªg
;

937 
ˇ0106_vﬁ_tbl
 (
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
ßved_vﬁumes
)[
NUM_SAVED_VOLUMES
] = {

938 { 
CONTROL_FRONT_CHANNEL
, 
PLAYBACK_VOLUME2
 },

939 { 
CONTROL_REAR_CHANNEL
, 
PLAYBACK_VOLUME2
 },

940 { 
CONTROL_CENTER_LFE_CHANNEL
, 
PLAYBACK_VOLUME2
 },

941 { 
CONTROL_UNKNOWN_CHANNEL
, 
PLAYBACK_VOLUME2
 },

942 { 
CONTROL_FRONT_CHANNEL
, 
PLAYBACK_VOLUME1
 },

943 { 
CONTROL_REAR_CHANNEL
, 
PLAYBACK_VOLUME1
 },

944 { 
CONTROL_CENTER_LFE_CHANNEL
, 
PLAYBACK_VOLUME1
 },

945 { 
CONTROL_UNKNOWN_CHANNEL
, 
PLAYBACK_VOLUME1
 },

946 { 1, 
CAPTURE_CONTROL
 },

949 
	$¢d_ˇ0106_mixî_su•íd
(
¢d_ˇ0106
 *
chù
)

951 
i
;

954 
i
 = 0; i < 
NUM_SAVED_VOLUMES
; i++)

955 
chù
->
ßved_vﬁ
[
i
] =

956 
	`¢d_ˇ0106_±r_ªad
(
chù
, 
ßved_vﬁumes
[
i
].
ªg
,

957 
ßved_vﬁumes
[
i
].
ch™√l_id
);

958 
	}
}

960 
	$¢d_ˇ0106_mixî_ªsume
(
¢d_ˇ0106
 *
chù
)

962 
i
;

964 
i
 = 0; i < 
NUM_SAVED_VOLUMES
; i++)

965 
	`¢d_ˇ0106_±r_wrôe
(
chù
, 
ßved_vﬁumes
[
i
].
ªg
,

966 
ßved_vﬁumes
[
i
].
ch™√l_id
,

967 
chù
->
ßved_vﬁ
[
i
]);

969 
	`ˇ0106_•dif_íabÀ
(
chù
);

970 
	`ˇ0106_£t_ˇ±uª_sour˚
(
chù
);

971 
	`ˇ0106_£t_i2c_ˇ±uª_sour˚
(
chù
, chù->
i2c_ˇ±uª_sour˚
, 1);

972 
i
 = 0; i < 4; i++)

973 
	`ˇ0106_£t_•dif_bôs
(
chù
, 
i
);

974 i‡(
chù
->
dëaûs
->
i2c_adc
)

975 
	`ˇ0106_£t_ˇ±uª_mic_löe_ö
(
chù
);

976 
	}
}

	@ca0106_proc.c

63 
	~<löux/dñay.h
>

64 
	~<löux/öô.h
>

65 
	~<löux/öãºu±.h
>

66 
	~<löux/¶ab.h
>

67 
	~<löux/moduÀ∑øm.h
>

68 
	~<sound/c‹e.h
>

69 
	~<sound/öôvÆ.h
>

70 
	~<sound/pcm.h
>

71 
	~<sound/ac97_codec.h
>

72 
	~<sound/öfo.h
>

73 
	~<sound/asoundef.h
>

74 
	~<asm/io.h
>

76 
	~"ˇ0106.h
"

79 #ifde‡
CONFIG_PROC_FS


81 
	s¢d_ˇ0106_ˇãg‹y_°r
 {

82 
	mvÆ
;

83 c⁄° *
	m«me
;

86 
¢d_ˇ0106_ˇãg‹y_°r
 
	g¢d_ˇ0106_c⁄_ˇãg‹y
[] = {

87 { 
IEC958_AES1_CON_DAT
, "DAT" },

88 { 
IEC958_AES1_CON_VCR
, "VCR" },

89 { 
IEC958_AES1_CON_MICROPHONE
, "microphone" },

90 { 
IEC958_AES1_CON_SYNTHESIZER
, "synthesizer" },

91 { 
IEC958_AES1_CON_RATE_CONVERTER
, "rate converter" },

92 { 
IEC958_AES1_CON_MIXER
, "mixer" },

93 { 
IEC958_AES1_CON_SAMPLER
, "sampler" },

94 { 
IEC958_AES1_CON_PCM_CODER
, "PCM coder" },

95 { 
IEC958_AES1_CON_IEC908_CD
, "CD" },

96 { 
IEC958_AES1_CON_NON_IEC908_CD
, "non-IEC908 CD" },

97 { 
IEC958_AES1_CON_GENERAL
, "general" },

101 
	$¢d_ˇ0106_¥oc_dump_õc958
–
¢d_öfo_buf„r
 *
buf„r
, 
u32
 
vÆue
)

103 
i
;

104 
u32
 
°©us
[4];

105 
°©us
[0] = 
vÆue
 & 0xff;

106 
°©us
[1] = (
vÆue
 >> 8) & 0xff;

107 
°©us
[2] = (
vÆue
 >> 16) & 0xff;

108 
°©us
[3] = (
vÆue
 >> 24) & 0xff;

110 i‡(! (
°©us
[0] & 
IEC958_AES0_PROFESSIONAL
)) {

112 
	`¢d_ùrötf
(
buf„r
, "Mode: consumer\n");

113 
	`¢d_ùrötf
(
buf„r
, "Data: ");

114 i‡(!(
°©us
[0] & 
IEC958_AES0_NONAUDIO
)) {

115 
	`¢d_ùrötf
(
buf„r
, "audio\n");

117 
	`¢d_ùrötf
(
buf„r
, "non-audio\n");

119 
	`¢d_ùrötf
(
buf„r
, "Rate: ");

120 
°©us
[3] & 
IEC958_AES3_CON_FS
) {

121 
IEC958_AES3_CON_FS_44100
:

122 
	`¢d_ùrötf
(
buf„r
, "44100 Hz\n");

124 
IEC958_AES3_CON_FS_48000
:

125 
	`¢d_ùrötf
(
buf„r
, "48000 Hz\n");

127 
IEC958_AES3_CON_FS_32000
:

128 
	`¢d_ùrötf
(
buf„r
, "32000 Hz\n");

131 
	`¢d_ùrötf
(
buf„r
, "unknown\n");

134 
	`¢d_ùrötf
(
buf„r
, "Copyright: ");

135 i‡(
°©us
[0] & 
IEC958_AES0_CON_NOT_COPYRIGHT
) {

136 
	`¢d_ùrötf
(
buf„r
, "permitted\n");

138 
	`¢d_ùrötf
(
buf„r
, "protected\n");

140 
	`¢d_ùrötf
(
buf„r
, "Emphasis: ");

141 i‡((
°©us
[0] & 
IEC958_AES0_CON_EMPHASIS
Ë!
IEC958_AES0_CON_EMPHASIS_5015
) {

142 
	`¢d_ùrötf
(
buf„r
, "none\n");

144 
	`¢d_ùrötf
(
buf„r
, "50/15us\n");

146 
	`¢d_ùrötf
(
buf„r
, "Category: ");

147 
i
 = 0; i < 
	`ARRAY_SIZE
(
¢d_ˇ0106_c⁄_ˇãg‹y
); i++) {

148 i‡((
°©us
[1] & 
IEC958_AES1_CON_CATEGORY
Ë=
¢d_ˇ0106_c⁄_ˇãg‹y
[
i
].
vÆ
) {

149 
	`¢d_ùrötf
(
buf„r
, "%s\n", 
¢d_ˇ0106_c⁄_ˇãg‹y
[
i
].
«me
);

153 i‡(
i
 >
	`ARRAY_SIZE
(
¢d_ˇ0106_c⁄_ˇãg‹y
)) {

154 
	`¢d_ùrötf
(
buf„r
, "unknow¿0x%x\n", 
°©us
[1] & 
IEC958_AES1_CON_CATEGORY
);

156 
	`¢d_ùrötf
(
buf„r
, "Original: ");

157 i‡(
°©us
[1] & 
IEC958_AES1_CON_ORIGINAL
) {

158 
	`¢d_ùrötf
(
buf„r
, "original\n");

160 
	`¢d_ùrötf
(
buf„r
, "1st generation\n");

162 
	`¢d_ùrötf
(
buf„r
, "Clock: ");

163 
°©us
[3] & 
IEC958_AES3_CON_CLOCK
) {

164 
IEC958_AES3_CON_CLOCK_1000PPM
:

165 
	`¢d_ùrötf
(
buf„r
, "1000Öpm\n");

167 
IEC958_AES3_CON_CLOCK_50PPM
:

168 
	`¢d_ùrötf
(
buf„r
, "50Öpm\n");

170 
IEC958_AES3_CON_CLOCK_VARIABLE
:

171 
	`¢d_ùrötf
(
buf„r
, "variableÖitch\n");

174 
	`¢d_ùrötf
(
buf„r
, "unknown\n");

178 
	`¢d_ùrötf
(
buf„r
, "Mode:Örofessional\n");

179 
	`¢d_ùrötf
(
buf„r
, "Data: ");

180 i‡(!(
°©us
[0] & 
IEC958_AES0_NONAUDIO
)) {

181 
	`¢d_ùrötf
(
buf„r
, "audio\n");

183 
	`¢d_ùrötf
(
buf„r
, "non-audio\n");

185 
	`¢d_ùrötf
(
buf„r
, "Rate: ");

186 
°©us
[0] & 
IEC958_AES0_PRO_FS
) {

187 
IEC958_AES0_PRO_FS_44100
:

188 
	`¢d_ùrötf
(
buf„r
, "44100 Hz\n");

190 
IEC958_AES0_PRO_FS_48000
:

191 
	`¢d_ùrötf
(
buf„r
, "48000 Hz\n");

193 
IEC958_AES0_PRO_FS_32000
:

194 
	`¢d_ùrötf
(
buf„r
, "32000 Hz\n");

197 
	`¢d_ùrötf
(
buf„r
, "unknown\n");

200 
	`¢d_ùrötf
(
buf„r
, "Rate Locked: ");

201 i‡(
°©us
[0] & 
IEC958_AES0_PRO_FREQ_UNLOCKED
)

202 
	`¢d_ùrötf
(
buf„r
, "no\n");

204 
	`¢d_ùrötf
(
buf„r
, "yes\n");

205 
	`¢d_ùrötf
(
buf„r
, "Emphasis: ");

206 
°©us
[0] & 
IEC958_AES0_PRO_EMPHASIS
) {

207 
IEC958_AES0_PRO_EMPHASIS_CCITT
:

208 
	`¢d_ùrötf
(
buf„r
, "CCITT J.17\n");

210 
IEC958_AES0_PRO_EMPHASIS_NONE
:

211 
	`¢d_ùrötf
(
buf„r
, "none\n");

213 
IEC958_AES0_PRO_EMPHASIS_5015
:

214 
	`¢d_ùrötf
(
buf„r
, "50/15us\n");

216 
IEC958_AES0_PRO_EMPHASIS_NOTID
:

218 
	`¢d_ùrötf
(
buf„r
, "unknown\n");

221 
	`¢d_ùrötf
(
buf„r
, "Stereophonic: ");

222 i‡((
°©us
[1] & 
IEC958_AES1_PRO_MODE
Ë=
IEC958_AES1_PRO_MODE_STEREOPHONIC
) {

223 
	`¢d_ùrötf
(
buf„r
, "stereo\n");

225 
	`¢d_ùrötf
(
buf„r
, "not indicated\n");

227 
	`¢d_ùrötf
(
buf„r
, "Userbits: ");

228 
°©us
[1] & 
IEC958_AES1_PRO_USERBITS
) {

229 
IEC958_AES1_PRO_USERBITS_192
:

230 
	`¢d_ùrötf
(
buf„r
, "192bit\n");

232 
IEC958_AES1_PRO_USERBITS_UDEF
:

233 
	`¢d_ùrötf
(
buf„r
, "user-defined\n");

236 
	`¢d_ùrötf
(
buf„r
, "unkown\n");

239 
	`¢d_ùrötf
(
buf„r
, "Sample Bits: ");

240 
°©us
[2] & 
IEC958_AES2_PRO_SBITS
) {

241 
IEC958_AES2_PRO_SBITS_20
:

242 
	`¢d_ùrötf
(
buf„r
, "20 bit\n");

244 
IEC958_AES2_PRO_SBITS_24
:

245 
	`¢d_ùrötf
(
buf„r
, "24 bit\n");

247 
IEC958_AES2_PRO_SBITS_UDEF
:

248 
	`¢d_ùrötf
(
buf„r
, "user defined\n");

251 
	`¢d_ùrötf
(
buf„r
, "unknown\n");

254 
	`¢d_ùrötf
(
buf„r
, "Word Length: ");

255 
°©us
[2] & 
IEC958_AES2_PRO_WORDLEN
) {

256 
IEC958_AES2_PRO_WORDLEN_22_18
:

257 
	`¢d_ùrötf
(
buf„r
, "22 bit or 18 bit\n");

259 
IEC958_AES2_PRO_WORDLEN_23_19
:

260 
	`¢d_ùrötf
(
buf„r
, "23 bit or 19 bit\n");

262 
IEC958_AES2_PRO_WORDLEN_24_20
:

263 
	`¢d_ùrötf
(
buf„r
, "24 bit or 20 bit\n");

265 
IEC958_AES2_PRO_WORDLEN_20_16
:

266 
	`¢d_ùrötf
(
buf„r
, "20 bit or 16 bit\n");

269 
	`¢d_ùrötf
(
buf„r
, "unknown\n");

273 
	}
}

275 
	$¢d_ˇ0106_¥oc_õc958
(
¢d_öfo_íåy
 *
íåy
,

276 
¢d_öfo_buf„r
 *
buf„r
)

278 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

279 
u32
 
vÆue
;

281 
vÆue
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
SAMPLE_RATE_TRACKER_STATUS
, 0);

282 
	`¢d_ùrötf
(
buf„r
, "Status: %s, %s, %s\n",

283 (
vÆue
 & 0x100000) ? "Rate Locked" : "Not Rate Locked",

284 (
vÆue
 & 0x200000) ? "SPDIF Locked" : "No SPDIF Lock",

285 (
vÆue
 & 0x400000) ? "Audio Valid" : "No validáudio" );

286 
	`¢d_ùrötf
(
buf„r
, "Estimated sampleÑate: %u\n",

287 ((
vÆue
 & 0xfffff) * 48000) / 0x8000 );

288 i‡(
vÆue
 & 0x200000) {

289 
	`¢d_ùrötf
(
buf„r
, "IEC958/SPDIF input status:\n");

290 
vÆue
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
SPDIF_INPUT_STATUS
, 0);

291 
	`¢d_ˇ0106_¥oc_dump_õc958
(
buf„r
, 
vÆue
);

294 
	`¢d_ùrötf
(
buf„r
, "\n");

295 
	}
}

297 
	$¢d_ˇ0106_¥oc_ªg_wrôe32
(
¢d_öfo_íåy
 *
íåy
,

298 
¢d_öfo_buf„r
 *
buf„r
)

300 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

301 
Êags
;

302 
löe
[64];

303 
u32
 
ªg
, 
vÆ
;

304 !
	`¢d_öfo_gë_löe
(
buf„r
, 
löe
, (line))) {

305 i‡(
	`ssˇnf
(
löe
, "%x %x", &
ªg
, &
vÆ
) != 2)

307 i‡((
ªg
 < 0x40Ë&& (ªg >=0Ë&& (
vÆ
 <= 0xffffffff) ) {

308 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

309 
	`oué
(
vÆ
, 
emu
->
p‹t
 + (
ªg
 & 0xfffffffc));

310 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

313 
	}
}

315 
	$¢d_ˇ0106_¥oc_ªg_ªad32
(
¢d_öfo_íåy
 *
íåy
,

316 
¢d_öfo_buf„r
 *
buf„r
)

318 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

319 
vÆue
;

320 
Êags
;

321 
i
;

322 
	`¢d_ùrötf
(
buf„r
, "Registers:\n\n");

323 
i
 = 0; i < 0x20; i+=4) {

324 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

325 
vÆue
 = 
	`öl
(
emu
->
p‹t
 + 
i
);

326 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

327 
	`¢d_ùrötf
(
buf„r
, "Regi°î %02X: %08lX\n", 
i
, 
vÆue
);

329 
	}
}

331 
	$¢d_ˇ0106_¥oc_ªg_ªad16
(
¢d_öfo_íåy
 *
íåy
,

332 
¢d_öfo_buf„r
 *
buf„r
)

334 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

335 
vÆue
;

336 
Êags
;

337 
i
;

338 
	`¢d_ùrötf
(
buf„r
, "Registers:\n\n");

339 
i
 = 0; i < 0x20; i+=2) {

340 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

341 
vÆue
 = 
	`öw
(
emu
->
p‹t
 + 
i
);

342 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

343 
	`¢d_ùrötf
(
buf„r
, "Regi°î %02X: %04X\n", 
i
, 
vÆue
);

345 
	}
}

347 
	$¢d_ˇ0106_¥oc_ªg_ªad8
(
¢d_öfo_íåy
 *
íåy
,

348 
¢d_öfo_buf„r
 *
buf„r
)

350 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

351 
vÆue
;

352 
Êags
;

353 
i
;

354 
	`¢d_ùrötf
(
buf„r
, "Registers:\n\n");

355 
i
 = 0; i < 0x20; i+=1) {

356 
	`•ö_lock_úqßve
(&
emu
->
emu_lock
, 
Êags
);

357 
vÆue
 = 
	`öb
(
emu
->
p‹t
 + 
i
);

358 
	`•ö_u∆ock_úqª°‹e
(&
emu
->
emu_lock
, 
Êags
);

359 
	`¢d_ùrötf
(
buf„r
, "Regi°î %02X: %02X\n", 
i
, 
vÆue
);

361 
	}
}

363 
	$¢d_ˇ0106_¥oc_ªg_ªad1
(
¢d_öfo_íåy
 *
íåy
,

364 
¢d_öfo_buf„r
 *
buf„r
)

366 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

367 
vÆue
;

368 
i
,
j
;

370 
	`¢d_ùrötf
(
buf„r
, "Registers\n");

371 
i
 = 0; i < 0x40; i++) {

372 
	`¢d_ùrötf
(
buf„r
, "%02X: ",
i
);

373 
j
 = 0; j < 4; j++) {

374 
vÆue
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
i
, 
j
);

375 
	`¢d_ùrötf
(
buf„r
, "%08lX ", 
vÆue
);

377 
	`¢d_ùrötf
(
buf„r
, "\n");

379 
	}
}

381 
	$¢d_ˇ0106_¥oc_ªg_ªad2
(
¢d_öfo_íåy
 *
íåy
,

382 
¢d_öfo_buf„r
 *
buf„r
)

384 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

385 
vÆue
;

386 
i
,
j
;

388 
	`¢d_ùrötf
(
buf„r
, "Registers\n");

389 
i
 = 0x40; i < 0x80; i++) {

390 
	`¢d_ùrötf
(
buf„r
, "%02X: ",
i
);

391 
j
 = 0; j < 4; j++) {

392 
vÆue
 = 
	`¢d_ˇ0106_±r_ªad
(
emu
, 
i
, 
j
);

393 
	`¢d_ùrötf
(
buf„r
, "%08lX ", 
vÆue
);

395 
	`¢d_ùrötf
(
buf„r
, "\n");

397 
	}
}

399 
	$¢d_ˇ0106_¥oc_ªg_wrôe
(
¢d_öfo_íåy
 *
íåy
,

400 
¢d_öfo_buf„r
 *
buf„r
)

402 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

403 
löe
[64];

404 
ªg
, 
ch™√l_id
 , 
vÆ
;

405 !
	`¢d_öfo_gë_löe
(
buf„r
, 
löe
, (line))) {

406 i‡(
	`ssˇnf
(
löe
, "%x %x %x", &
ªg
, &
ch™√l_id
, &
vÆ
) != 3)

408 i‡((
ªg
 < 0x80Ë&& (ªg >=0Ë&& (
vÆ
 <0xffffffffË&& (
ch™√l_id
 >=0) && (channel_id <= 3) )

409 
	`¢d_ˇ0106_±r_wrôe
(
emu
, 
ªg
, 
ch™√l_id
, 
vÆ
);

411 
	}
}

413 
	$¢d_ˇ0106_¥oc_i2c_wrôe
(
¢d_öfo_íåy
 *
íåy
,

414 
¢d_öfo_buf„r
 *
buf„r
)

416 
¢d_ˇ0106
 *
emu
 = 
íåy
->
¥iv©e_d©a
;

417 
löe
[64];

418 
ªg
, 
vÆ
;

419 !
	`¢d_öfo_gë_löe
(
buf„r
, 
löe
, (line))) {

420 i‡(
	`ssˇnf
(
löe
, "%x %x", &
ªg
, &
vÆ
) != 2)

422 i‡((
ªg
 <0x7fË|| (
vÆ
 <= 0x1ff)) {

423 
	`¢d_ˇ0106_i2c_wrôe
(
emu
, 
ªg
, 
vÆ
);

426 
	}
}

428 
__devöô
 
	$¢d_ˇ0106_¥oc_öô
(
¢d_ˇ0106
 * 
emu
)

430 
¢d_öfo_íåy
 *
íåy
;

432 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "õc958", &
íåy
))

433 
	`¢d_öfo_£t_ãxt_›s
(
íåy
, 
emu
, 
¢d_ˇ0106_¥oc_õc958
);

434 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "ˇ0106_ªg32", &
íåy
)) {

435 
	`¢d_öfo_£t_ãxt_›s
(
íåy
, 
emu
, 
¢d_ˇ0106_¥oc_ªg_ªad32
);

436 
íåy
->
c
.
ãxt
.
wrôe
 = 
¢d_ˇ0106_¥oc_ªg_wrôe32
;

437 
íåy
->
mode
 |
S_IWUSR
;

439 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "ˇ0106_ªg16", &
íåy
))

440 
	`¢d_öfo_£t_ãxt_›s
(
íåy
, 
emu
, 
¢d_ˇ0106_¥oc_ªg_ªad16
);

441 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "ˇ0106_ªg8", &
íåy
))

442 
	`¢d_öfo_£t_ãxt_›s
(
íåy
, 
emu
, 
¢d_ˇ0106_¥oc_ªg_ªad8
);

443 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "ˇ0106_ªgs1", &
íåy
)) {

444 
	`¢d_öfo_£t_ãxt_›s
(
íåy
, 
emu
, 
¢d_ˇ0106_¥oc_ªg_ªad1
);

445 
íåy
->
c
.
ãxt
.
wrôe
 = 
¢d_ˇ0106_¥oc_ªg_wrôe
;

446 
íåy
->
mode
 |
S_IWUSR
;

448 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "ˇ0106_i2c", &
íåy
)) {

449 
íåy
->
c
.
ãxt
.
wrôe
 = 
¢d_ˇ0106_¥oc_i2c_wrôe
;

450 
íåy
->
¥iv©e_d©a
 = 
emu
;

451 
íåy
->
mode
 |
S_IWUSR
;

453 if(! 
	`¢d_ˇrd_¥oc_√w
(
emu
->
ˇrd
, "ˇ0106_ªgs2", &
íåy
))

454 
	`¢d_öfo_£t_ãxt_›s
(
íåy
, 
emu
, 
¢d_ˇ0106_¥oc_ªg_ªad2
);

456 
	}
}

	@ca_midi.c

29 
	~<löux/•ölock.h
>

30 
	~<sound/c‹e.h
>

31 
	~<sound/øwmidi.h
>

33 
	~"ˇ_midi.h
"

35 
	#ˇ_midi_wrôe_d©a
(
midi
, 
d©a
Ëmidi->
	`wrôe
(midi, d©a, 0)

	)

36 
	#ˇ_midi_wrôe_cmd
(
midi
, 
d©a
Ëmidi->
	`wrôe
(midi, d©a, 1)

	)

37 
	#ˇ_midi_ªad_d©a
(
midi
Ëmidi->
	`ªad
(midi, 0)

	)

38 
	#ˇ_midi_ªad_°©
(
midi
Ëmidi->
	`ªad
(midi, 1)

	)

39 
	#ˇ_midi_öput_avaû
(
midi
Ë(!(
	`ˇ_midi_ªad_°©
(midiË& midi->
öput_avaû
))

	)

40 
	#ˇ_midi_ouçut_ªady
(
midi
Ë(!(
	`ˇ_midi_ªad_°©
(midiË& midi->
ouçut_ªady
))

	)

42 
	$ˇ_midi_˛ór_rx
(
¢d_ˇ_midi
 *
midi
)

44 
timeout
 = 100000;

45 ; 
timeout
 > 0 && 
	`ˇ_midi_öput_avaû
(
midi
);Åimeout--)

46 
	`ˇ_midi_ªad_d©a
(
midi
);

47 #ifde‡
CONFIG_SND_DEBUG


48 i‡(
timeout
 <= 0)

49 
	`¢d_m¥ötk
(
KERN_ERR
 "ca_midi_clear_rx:Åimeout (status = 0x%x)\n",

50 
	`ˇ_midi_ªad_°©
(
midi
));

52 
	}
}

54 
	$ˇ_midi_öãºu±
(
¢d_ˇ_midi
 *
midi
, 
°©us
)

56 
byã
;

58 i‡(
midi
->
rmidi
 =
NULL
) {

59 
midi
->
	`öãºu±_dißbÀ
(midi,midi->
tx_íabÀ
 | midi->
rx_íabÀ
);

63 
	`•ö_lock
(&
midi
->
öput_lock
);

64 i‡((
°©us
 & 
midi
->
ùr_rx
Ë&& 
	`ˇ_midi_öput_avaû
(midi)) {

65 i‡(!(
midi
->
midi_mode
 & 
CA_MIDI_MODE_INPUT
)) {

66 
	`ˇ_midi_˛ór_rx
(
midi
);

68 
byã
 = 
	`ˇ_midi_ªad_d©a
(
midi
);

69 if(
midi
->
sub°ªam_öput
)

70 
	`¢d_øwmidi_ª˚ive
(
midi
->
sub°ªam_öput
, &
byã
, 1);

75 
	`•ö_u∆ock
(&
midi
->
öput_lock
);

77 
	`•ö_lock
(&
midi
->
ouçut_lock
);

78 i‡((
°©us
 & 
midi
->
ùr_tx
Ë&& 
	`ˇ_midi_ouçut_ªady
(midi)) {

79 i‡(
midi
->
sub°ªam_ouçut
 &&

80 
	`¢d_øwmidi_å™smô
(
midi
->
sub°ªam_ouçut
, &
byã
, 1) == 1) {

81 
	`ˇ_midi_wrôe_d©a
(
midi
, 
byã
);

83 
midi
->
	`öãºu±_dißbÀ
(midi,midi->
tx_íabÀ
);

86 
	`•ö_u∆ock
(&
midi
->
ouçut_lock
);

88 
	}
}

90 
	$ˇ_midi_cmd
(
¢d_ˇ_midi
 *
midi
, 
cmd
, 
ack
)

92 
Êags
;

93 
timeout
, 
ok
;

95 
	`•ö_lock_úqßve
(&
midi
->
öput_lock
, 
Êags
);

96 
	`ˇ_midi_wrôe_d©a
(
midi
, 0x00);

99 
	`ˇ_midi_wrôe_cmd
(
midi
, 
cmd
);

100 i‡(
ack
) {

101 
ok
 = 0;

102 
timeout
 = 10000;

103 !
ok
 && 
timeout
-- > 0) {

104 i‡(
	`ˇ_midi_öput_avaû
(
midi
)) {

105 i‡(
	`ˇ_midi_ªad_d©a
(
midi
Ë=midi->
ack
)

106 
ok
 = 1;

109 i‡(!
ok
 && 
	`ˇ_midi_ªad_d©a
(
midi
Ë=midi->
ack
)

110 
ok
 = 1;

112 
ok
 = 1;

114 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
öput_lock
, 
Êags
);

115 i‡(!
ok
)

116 
	`¢d_m¥ötk
(
KERN_ERR
 "ca_midi_cmd: 0x%x failedát 0x%x (status = 0x%x, data = 0x%x)!!!\n",

117 
cmd
,

118 
midi
->
	`gë_dev_id_p‹t
(midi->
dev_id
),

119 
	`ˇ_midi_ªad_°©
(
midi
),

120 
	`ˇ_midi_ªad_d©a
(
midi
));

121 
	}
}

123 
	$ˇ_midi_öput_›í
(
¢d_øwmidi_sub°ªam
 *
sub°ªam
)

125 
¢d_ˇ_midi
 *
midi
 = 
sub°ªam
->
rmidi
->
¥iv©e_d©a
;

126 
Êags
;

128 i‡(
	`¢d_BUG_ON
(!
midi
->
dev_id
))

129  -
ENXIO
;

130 
	`•ö_lock_úqßve
(&
midi
->
›í_lock
, 
Êags
);

131 
midi
->
midi_mode
 |
CA_MIDI_MODE_INPUT
;

132 
midi
->
sub°ªam_öput
 = 
sub°ªam
;

133 i‡(!(
midi
->
midi_mode
 & 
CA_MIDI_MODE_OUTPUT
)) {

134 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

135 
	`ˇ_midi_cmd
(
midi
, midi->
ª£t
, 1);

136 
	`ˇ_midi_cmd
(
midi
, midi->
íãr_u¨t
, 1);

138 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

141 
	}
}

143 
	$ˇ_midi_ouçut_›í
(
¢d_øwmidi_sub°ªam
 *
sub°ªam
)

145 
¢d_ˇ_midi
 *
midi
 = 
sub°ªam
->
rmidi
->
¥iv©e_d©a
;

146 
Êags
;

148 i‡(
	`¢d_BUG_ON
(!
midi
->
dev_id
))

149  -
ENXIO
;

150 
	`•ö_lock_úqßve
(&
midi
->
›í_lock
, 
Êags
);

151 
midi
->
midi_mode
 |
CA_MIDI_MODE_OUTPUT
;

152 
midi
->
sub°ªam_ouçut
 = 
sub°ªam
;

153 i‡(!(
midi
->
midi_mode
 & 
CA_MIDI_MODE_INPUT
)) {

154 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

155 
	`ˇ_midi_cmd
(
midi
, midi->
ª£t
, 1);

156 
	`ˇ_midi_cmd
(
midi
, midi->
íãr_u¨t
, 1);

158 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

161 
	}
}

163 
	$ˇ_midi_öput_˛o£
(
¢d_øwmidi_sub°ªam
 *
sub°ªam
)

165 
¢d_ˇ_midi
 *
midi
 = 
sub°ªam
->
rmidi
->
¥iv©e_d©a
;

166 
Êags
;

168 i‡(
	`¢d_BUG_ON
(!
midi
->
dev_id
))

169  -
ENXIO
;

170 
	`•ö_lock_úqßve
(&
midi
->
›í_lock
, 
Êags
);

171 
midi
->
	`öãºu±_dißbÀ
(midi,midi->
rx_íabÀ
);

172 
midi
->
midi_mode
 &~
CA_MIDI_MODE_INPUT
;

173 
midi
->
sub°ªam_öput
 = 
NULL
;

174 i‡(!(
midi
->
midi_mode
 & 
CA_MIDI_MODE_OUTPUT
)) {

175 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

176 
	`ˇ_midi_cmd
(
midi
, midi->
ª£t
, 0);

178 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

181 
	}
}

183 
	$ˇ_midi_ouçut_˛o£
(
¢d_øwmidi_sub°ªam
 *
sub°ªam
)

185 
¢d_ˇ_midi
 *
midi
 = 
sub°ªam
->
rmidi
->
¥iv©e_d©a
;

186 
Êags
;

188 i‡(
	`¢d_BUG_ON
(!
midi
->
dev_id
))

189  -
ENXIO
;

191 
	`•ö_lock_úqßve
(&
midi
->
›í_lock
, 
Êags
);

193 
midi
->
	`öãºu±_dißbÀ
(midi,midi->
tx_íabÀ
);

194 
midi
->
midi_mode
 &~
CA_MIDI_MODE_OUTPUT
;

195 
midi
->
sub°ªam_ouçut
 = 
NULL
;

197 i‡(!(
midi
->
midi_mode
 & 
CA_MIDI_MODE_INPUT
)) {

198 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

199 
	`ˇ_midi_cmd
(
midi
, midi->
ª£t
, 0);

201 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
›í_lock
, 
Êags
);

204 
	}
}

206 
	$ˇ_midi_öput_åiggî
(
¢d_øwmidi_sub°ªam
 *
sub°ªam
, 
up
)

208 
¢d_ˇ_midi
 *
midi
 = 
sub°ªam
->
rmidi
->
¥iv©e_d©a
;

210 i‡(
	`¢d_BUG_ON
(!
midi
->
dev_id
))

213 i‡(
up
) {

214 
midi
->
	`öãºu±_íabÀ
(midi,midi->
rx_íabÀ
);

216 
midi
->
	`öãºu±_dißbÀ
(midi, midi->
rx_íabÀ
);

218 
	}
}

220 
	$ˇ_midi_ouçut_åiggî
(
¢d_øwmidi_sub°ªam
 *
sub°ªam
, 
up
)

222 
¢d_ˇ_midi
 *
midi
 = 
sub°ªam
->
rmidi
->
¥iv©e_d©a
;

223 
Êags
;

225 i‡(
	`¢d_BUG_ON
(!
midi
->
dev_id
))

228 i‡(
up
) {

229 
max
 = 4;

230 
byã
;

232 
	`•ö_lock_úqßve
(&
midi
->
ouçut_lock
, 
Êags
);

235 
max
 > 0) {

236 i‡(
	`ˇ_midi_ouçut_ªady
(
midi
)) {

237 i‡(!(
midi
->
midi_mode
 & 
CA_MIDI_MODE_OUTPUT
) ||

238 
	`¢d_øwmidi_å™smô
(
sub°ªam
, &
byã
, 1) != 1) {

240 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
ouçut_lock
, 
Êags
);

243 
	`ˇ_midi_wrôe_d©a
(
midi
, 
byã
);

244 
max
--;

250 
	`•ö_u∆ock_úqª°‹e
(&
midi
->
ouçut_lock
, 
Êags
);

251 
midi
->
	`öãºu±_íabÀ
(midi,midi->
tx_íabÀ
);

254 
midi
->
	`öãºu±_dißbÀ
(midi,midi->
tx_íabÀ
);

256 
	}
}

258 
¢d_øwmidi_›s
 
	gˇ_midi_ouçut
 =

260 .
›í
 = 
ˇ_midi_ouçut_›í
,

261 .
	g˛o£
 = 
ˇ_midi_ouçut_˛o£
,

262 .
	gåiggî
 = 
ˇ_midi_ouçut_åiggî
,

265 
¢d_øwmidi_›s
 
	gˇ_midi_öput
 =

267 .
›í
 = 
ˇ_midi_öput_›í
,

268 .
	g˛o£
 = 
ˇ_midi_öput_˛o£
,

269 .
	gåiggî
 = 
ˇ_midi_öput_åiggî
,

272 
	$ˇ_midi_‰ì
(
¢d_ˇ_midi
 *
midi
)

274 
midi
->
öãºu±
 = 
NULL
;

275 
midi
->
öãºu±_íabÀ
 = 
NULL
;

276 
midi
->
öãºu±_dißbÀ
 = 
NULL
;

277 
midi
->
ªad
 = 
NULL
;

278 
midi
->
wrôe
 = 
NULL
;

279 
midi
->
gë_dev_id_ˇrd
 = 
NULL
;

280 
midi
->
gë_dev_id_p‹t
 = 
NULL
;

281 
midi
->
rmidi
 = 
NULL
;

282 
	}
}

284 
	$ˇ_rmidi_‰ì
(
¢d_øwmidi
 *
rmidi
)

286 
	`ˇ_midi_‰ì
(
rmidi
->
¥iv©e_d©a
);

287 
	}
}

289 
__devöô
 
	$ˇ_midi_öô
(*
dev_id
, 
¢d_ˇ_midi
 *
midi
, 
devi˚
, *
«me
)

291 
¢d_øwmidi
 *
rmidi
;

292 
îr
;

294 i‡((
îr
 = 
	`¢d_øwmidi_√w
(
midi
->
	`gë_dev_id_ˇrd
(midi->
dev_id
), 
«me
, 
devi˚
, 1, 1, &
rmidi
)) < 0)

295  
îr
;

297 
midi
->
dev_id
 = dev_id;

298 
midi
->
öãºu±
 = 
ˇ_midi_öãºu±
;

300 
	`•ö_lock_öô
(&
midi
->
›í_lock
);

301 
	`•ö_lock_öô
(&
midi
->
öput_lock
);

302 
	`•ö_lock_öô
(&
midi
->
ouçut_lock
);

304 
	`°r˝y
(
rmidi
->
«me
,Çame);

305 
	`¢d_øwmidi_£t_›s
(
rmidi
, 
SNDRV_RAWMIDI_STREAM_OUTPUT
, &
ˇ_midi_ouçut
);

306 
	`¢d_øwmidi_£t_›s
(
rmidi
, 
SNDRV_RAWMIDI_STREAM_INPUT
, &
ˇ_midi_öput
);

307 
rmidi
->
öfo_Êags
 |
SNDRV_RAWMIDI_INFO_OUTPUT
 |

308 
SNDRV_RAWMIDI_INFO_INPUT
 |

309 
SNDRV_RAWMIDI_INFO_DUPLEX
;

310 
rmidi
->
¥iv©e_d©a
 = 
midi
;

311 
rmidi
->
¥iv©e_‰ì
 = 
ˇ_rmidi_‰ì
;

313 
midi
->
rmidi
 =Ñmidi;

315 
	}
}

	@ca_midi.h

25 
	~<löux/•ölock.h
>

26 
	~<sound/øwmidi.h
>

27 
	~<sound/mpu401.h
>

29 
	#CA_MIDI_MODE_INPUT
 
MPU401_MODE_INPUT


	)

30 
	#CA_MIDI_MODE_OUTPUT
 
MPU401_MODE_OUTPUT


	)

32 
	s¢d_ˇ_midi
 {

34 
¢d_øwmidi
 * 
__©åibuã__
((
ªcursive
)Ë
	mrmidi
;

35 
¢d_øwmidi_sub°ªam
 *
__©åibuã__
((
ªcursive
))
	msub°ªam_öput
;

36 
¢d_øwmidi_sub°ªam
 *
__©åibuã__
((
ªcursive
))
	msub°ªam_ouçut
;

38 * 
__©åibuã__
((
ªcursive
)Ë
	mdev_id
;

40 
•ölock_t
 
	möput_lock
;

41 
•ölock_t
 
	mouçut_lock
;

42 
•ölock_t
 
	m›í_lock
;

44 
	mch™√l
;

46 
	mmidi_mode
;

47 
	mp‹t
;

48 
	mtx_íabÀ
, 
	mrx_íabÀ
;

49 
	mùr_tx
, 
	mùr_rx
;

51 
	möput_avaû
, 
	mouçut_ªady
;

52 
	mack
, 
	mª£t
, 
	míãr_u¨t
;

54 (*
	möãºu±
)(
¢d_ˇ_midi
 *
	mmidi
, 
	m°©us
);

55 (*
	möãºu±_íabÀ
)(
¢d_ˇ_midi
 *
	mmidi
, 
	möå
);

56 (*
	möãºu±_dißbÀ
)(
¢d_ˇ_midi
 *
	mmidi
, 
	möå
);

58 (*
	mªad
)(
¢d_ˇ_midi
 *
	mmidi
, 
	midx
);

59 (*
	mwrôe
)(
¢d_ˇ_midi
 *
	mmidi
, 
	md©a
, 
	midx
);

62 
	m¢d_ˇrd
 *(*
	mgë_dev_id_ˇrd
)(*
	mdev_id
);

63 (*
	mgë_dev_id_p‹t
)(*
	mdev_id
);

66 
ˇ_midi_öô
(*
ˇrd
, 
¢d_ˇ_midi
 *
midi
, 
devi˚
, *
«me
);

	@modif_annots.h

1 
	glök
 ../
	gcomm⁄
/
	g¢d_modif_™nŸs
.h

	@../../common/mpci-bus.h

1 #i‚de‡
MPCI_BUS_H


2 
	#MPCI_BUS_H


	)

10 
	~<löux/devi˚.h
>

11 
	~<löux/mod_devi˚èbÀ.h
>

12 
	~<löux/pci_ids.h
>

13 
	~<löux/pci_ªgs.h
>

14 
	~<löux/i›‹t.h
>

19 
bus_ty≥
 
pci_bus_ty≥
;

24 
	t__bôwi£
 
	tpci_powî_t
;

31 
	mPCI_STD_RESOURCES
,

32 
	mPCI_STD_RESOURCE_END
 = 5,

35 
	mPCI_ROM_RESOURCE
,

38 
	#PCI_BRIDGE_RESOURCE_NUM
 4

	)

40 
	mPCI_BRIDGE_RESOURCES
,

41 
	mPCI_BRIDGE_RESOURCE_END
 = 
PCI_BRIDGE_RESOURCES
 +

42 
PCI_BRIDGE_RESOURCE_NUM
 - 1,

45 
	mPCI_NUM_RESOURCES
,

48 
	mDEVICE_COUNT_RESOURCE


51 
	spci_dynids
 {

52 
•ölock_t
 
	mlock
;

53 
li°_hód
 
	mli°
;

60 
	spci_drivî
 {

61 *
__©åibuã__
((
nuŒãrm
)Ë
	m«me
;

62 c⁄° 
pci_devi˚_id
 *
	mid_èbÀ
;

64 (*
	m¥obe
Ë(
pci_dev
 *
	mdev
, c⁄° 
pci_devi˚_id
 *
	mid
);

65 (*
	mªmove
Ë(
pci_dev
 *
	mdev
);

66 (*
	msu•íd
Ë(
pci_dev
 *
	mdev
, 
pm_mesßge_t
 
	m°©e
);

67 (*
	msu•íd_œã
Ë(
pci_dev
 *
	mdev
, 
pm_mesßge_t
 
	m°©e
);

68 (*
	mªsume_óæy
Ë(
pci_dev
 *
	mdev
);

69 (*
	mªsume
Ë(
pci_dev
 *
	mdev
);

70 (*
	mshutdown
Ë(
pci_dev
 *
	mdev
);

72 
pci_îr‹_h™dÀrs
 *
	mîr_h™dÀr
;

73 
devi˚_drivî
 
	mdrivî
;

74 
pci_dynids
 
	mdynids
;

77 
	spci_bus
 {

78 
	mnumbî
;

79 
	m¥im¨y
;

80 
	m£c⁄d¨y
;

81 
	msub‹dö©e
;

82 
	m«me
[48];

92 
	#DEFINE_PCI_DEVICE_TABLE
(
_èbÀ
) \

93 c⁄° 
pci_devi˚_id
 
_èbÀ
[] 
__devöôc⁄°


	)

105 
	spci_dev
 {

106 *
__©åibuã__
((
nuŒãrm
)Ë
	m«me
;

107 
pci_drivî
 *
	mdrivî
;

108 
pci_bus
 *
	mbus
;

109 
pci_bus
 *
	msub‹dö©e
;

110 
devi˚
 
	mdev
;

112 
	mdev‚
;

113 
	mvíd‹
;

114 
	mdevi˚
;

115 
	msubsy°em_víd‹
;

116 
	msubsy°em_devi˚
;

117 
	m˛ass
;

118 
u8
 
	mªvisi⁄
;

124 
u64
 
	mdma_mask
;

129 
	mpm_ˇp
;

136 
	múq
;

137 
ªsour˚
 
	mªsour˚
[
DEVICE_COUNT_RESOURCE
];

138 
	mˇ∑bûôõs
[32];

145 
	#to_pci_drivî
(
drv
Ë
	`c⁄èöî_of
(drv, 
pci_drivî
, 
drivî
);

	)

146 
	#to_pci_dev
(
dev
Ë
	`c⁄èöî_of
(dev, 
pci_dev
, dev);

	)

148 
	#pci_ªsour˚_°¨t
(
dev
, 
b¨
Ë((dev)->
ªsour˚
[(b¨)].
°¨t
)

	)

149 
	#pci_ªsour˚_íd
(
dev
, 
b¨
Ë((dev)->
ªsour˚
[(b¨)].
íd
)

	)

150 
	#pci_ªsour˚_Êags
(
dev
, 
b¨
Ë((dev)->
ªsour˚
[(b¨)].
Êags
)

	)

151 
	#pci_ªsour˚_Àn
(
dev
,
b¨
) \

152 ((
	`pci_ªsour˚_°¨t
((
dev
), (
b¨
)) == 0 && \

153 
	`pci_ªsour˚_íd
((
dev
), (
b¨
)) == \

154 
	`pci_ªsour˚_°¨t
((
dev
), (
b¨
))) ? 0 : \

156 (
	`pci_ªsour˚_íd
((
dev
), (
b¨
)) - \

157 
	`pci_ªsour˚_°¨t
((
dev
), (
b¨
)Ë+ 1))

	)

160 
pci_bus_ªad_c⁄fig_byã
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u8
 *
vÆ
);

161 
pci_bus_ªad_c⁄fig_w‹d
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u16
 *
vÆ
);

162 
pci_bus_ªad_c⁄fig_dw‹d
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u32
 *
vÆ
);

163 
pci_bus_wrôe_c⁄fig_byã
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u8
 
vÆ
);

164 
pci_bus_wrôe_c⁄fig_w‹d
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u16
 
vÆ
);

165 
pci_bus_wrôe_c⁄fig_dw‹d
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u32
 
vÆ
);

166 
	#pci_ªad_c⁄fig_byã
(
dev
, 
whîe
, 
vÆ
) \

167 
	`pci_bus_ªad_c⁄fig_byã
(
dev
->
bus
, dev->
dev‚
, 
whîe
, 
vÆ
)

	)

168 
	#pci_ªad_c⁄fig_w‹d
(
dev
, 
whîe
, 
vÆ
) \

169 
	`pci_bus_ªad_c⁄fig_w‹d
(
dev
->
bus
, dev->
dev‚
, 
whîe
, 
vÆ
)

	)

170 
	#pci_ªad_c⁄fig_dw‹d
(
dev
, 
whîe
, 
vÆ
) \

171 
	`pci_bus_ªad_c⁄fig_dw‹d
(
dev
->
bus
, dev->
dev‚
, 
whîe
, 
vÆ
)

	)

172 
	#pci_wrôe_c⁄fig_byã
(
dev
, 
whîe
, 
vÆ
) \

173 
	`pci_bus_wrôe_c⁄fig_byã
(
dev
->
bus
, dev->
dev‚
, 
whîe
, 
vÆ
)

	)

174 
	#pci_wrôe_c⁄fig_w‹d
(
dev
, 
whîe
, 
vÆ
) \

175 
	`pci_bus_wrôe_c⁄fig_w‹d
(
dev
->
bus
, dev->
dev‚
, 
whîe
, 
vÆ
)

	)

176 
	#pci_wrôe_c⁄fig_dw‹d
(
dev
, 
whîe
, 
vÆ
) \

177 
	`pci_bus_wrôe_c⁄fig_dw‹d
(
dev
->
bus
, dev->
dev‚
, 
whîe
, 
vÆ
)

	)

180 
pci_£t_ma°î
(
pci_dev
 *
dev
);

181 
pci_˛ór_ma°î
(
pci_dev
 *
dev
);

182 
pci_íabÀ_devi˚
(
pci_dev
 *
dev
);

183 
pci_dißbÀ_devi˚
(
pci_dev
 *
dev
);

184 
pci_£t_dma_mask
(
pci_dev
 *
dev
, 
u64
 
mask
);

185 
pci_£t_c⁄si°ít_dma_mask
(
pci_dev
 *
dev
, 
u64
 
mask
);

186 
pci_ªque°_ªgi⁄s
(
pci_dev
 *, c⁄° *
__©åibuã__
((
nuŒãrm
)Ë
ªs_«me
);

187 
pci_ªÀa£_ªgi⁄s
(
pci_dev
 *);

190 *
pci_gë_drvd©a
(
pci_dev
 *
pdev
);

191 
pci_£t_drvd©a
(
pci_dev
 *
pdev
, *
d©a
);

192 
ölöe
 c⁄° *
	$pci_«me
(
pci_dev
 *
pdev
) {

193  
	`dev_«me
(&
pdev
->
dev
);

194 
	}
}

196 
pci_£t_powî_°©e
(
pci_dev
 *
dev
, 
pci_powî_t
 
°©e
);

197 
pci_powî_t
 
pci_choo£_°©e
(
pci_dev
 *
dev
, 
pm_mesßge_t
 
°©e
);

198 
pci_íabÀ_wake
(
pci_dev
 *
dev
, 
pci_powî_t
 
°©e
, 
íabÀ
);

201 
pci_ªgi°î_devi˚
(
pci_dev
 *);

202 
pci_uƒegi°î_devi˚
(
pci_dev
 *);

203 
__pci_ªgi°î_drivî
(
pci_drivî
 *, 
moduÀ
 *, c⁄° * 
__©åibuã__
((
nuŒãrm
)));

204 
	#pci_ªgi°î_drivî
(
drivî
Ë
	`__pci_ªgi°î_drivî
(drivî, 
THIS_MODULE
, 
KBUILD_MODNAME
)

	)

205 
pci_uƒegi°î_drivî
(
pci_drivî
 *);

208 
pci_£À˘_b¨s
(
pci_dev
 *
dev
, 
Êags
);

209 
pci_föd_ˇ∑bûôy
(
pci_dev
 *
dev
, 
ˇp
);

210 
pci_dma_sync_sögÀ_f‹_devi˚
(
pci_dev
 *
dev
, 
dma_addr_t
 
dma_addr
,

211 
size_t
 
size
, 
dúe˘i⁄
);

212 
pci_ªque°_£À˘ed_ªgi⁄s
(
pci_dev
 *
pdev
, 
b¨s
,

213 c⁄° *
ªs_«me
);

214 
pci_ªÀa£_£À˘ed_ªgi⁄s
(
pci_dev
 *
pdev
, 
b¨s
);

215 
pci_íabÀ_devi˚_mem
(
pci_dev
 *
dev
);

216 
pci_dißbÀ_msi
(
pci_dev
 *
dev
);

217 
pci_i‹em≠_b¨
(
pci_dev
 *
pdev
, 
b¨
);

218 
pci_£t_mwi
(
pci_dev
 *
dev
);

219 
pci_˛ór_mwi
(
pci_dev
 *
dev
);

220 
pci_íabÀ_msi
(
pci_dev
* 
dev
);

221 
pci_ch™√l_ofÊöe
(
pci_dev
 *
pdev
);

222 
pcix_gë_mmrbc
(
pci_dev
 *
dev
);

223 
pci_dma_sync_sögÀ_f‹_˝u
(
pci_dev
 *
pdev
, 
dma_addr_t
 
dma_h™dÀ
,

224 
size_t
 
size
, 
dúe˘i⁄
);

225 
pcix_£t_mmrbc
(
pci_dev
 *
dev
, 
mmrbc
);

228 
pci_dev_¥e£¡
 (c⁄° 
pci_devi˚_id
 *
ids
);

233 
pci_ßve_°©e
(
pci_dev
 *
dev
);

234 
pci_dev
 *
pci_dev_gë
(pci_dev *
dev
);

235 
pci_dev_put
(
pci_dev
 *
dev
);

236 
pci_dev
 *
pci_gë_devi˚
(
víd‹
, 
devi˚
, pci_dev *
‰om
);

237 
pci_powî_t
 
pci_èrgë_°©e
(
pci_dev
 *
dev
);

238 
pci_ª°‹e_°©e
(
pci_dev
 *
dev
);

239 
boﬁ
 
pci_pme_ˇ∑bÀ
(
pci_dev
 *
dev
, 
pci_powî_t
 
°©e
);

240 
pci_dev
 * 
pci_gë_¶Ÿ
(
pci_bus
 *
bus
, 
dev‚
);

241 
pcõ_£t_ªadrq
(
pci_dev
 *
dev
, 
rq
);

242 *
pci_Æloc_c⁄si°ít
(
pci_dev
 *
hwdev
, 
size_t
 
size
, 
dma_addr_t
 *
dma_h™dÀ
);

247 
iounm≠
(vﬁ©ûê
__iomem
 *
addr
);

248 
mmiowb
();

250 
	t__bôwi£
 
	tpci_îs_ªsu…_t
;

252 
	epci_îs_ªsu…
 {

254 
	mPCI_ERS_RESULT_NONE
 = (
__f‹˚
 
pci_îs_ªsu…_t
) 1,

257 
	mPCI_ERS_RESULT_CAN_RECOVER
 = (
__f‹˚
 
pci_îs_ªsu…_t
) 2,

260 
	mPCI_ERS_RESULT_NEED_RESET
 = (
__f‹˚
 
pci_îs_ªsu…_t
) 3,

263 
	mPCI_ERS_RESULT_DISCONNECT
 = (
__f‹˚
 
pci_îs_ªsu…_t
) 4,

267 
	mPCI_ERS_RESULT_RECOVERED
 = (
__f‹˚
 
pci_îs_ªsu…_t
) 5,

270 
	t__bôwi£
 
	tpci_ch™√l_°©e_t
;

272 
	epci_ch™√l_°©e
 {

274 
	mpci_ch™√l_io_n‹mÆ
 = (
__f‹˚
 
pci_ch™√l_°©e_t
) 1,

277 
	mpci_ch™√l_io_‰ozí
 = (
__f‹˚
 
pci_ch™√l_°©e_t
) 2,

280 
	mpci_ch™√l_io_≥rm_Áûuª
 = (
__f‹˚
 
pci_ch™√l_°©e_t
) 3,

284 
	spci_îr‹_h™dÀrs
 {

286 
pci_îs_ªsu…_t
 (*
îr‹_dëe˘ed
)(
pci_dev
 *
	mdev
,

287 
pci_ch™√l_°©e
 
	mîr‹
);

290 
pci_îs_ªsu…_t
 (*
mmio_íabÀd
)(
pci_dev
 *
	mdev
);

293 
pci_îs_ªsu…_t
 (*
lök_ª£t
)(
pci_dev
 *
	mdev
);

296 
pci_îs_ªsu…_t
 (*
¶Ÿ_ª£t
)(
pci_dev
 *
	mdev
);

299 (*
	mªsume
)(
pci_dev
 *
	mdev
);

303 
	t__bôwi£
 
	tpcõ_ª£t_°©e_t
;

305 
	epcõ_ª£t_°©e
 {

307 
	mpcõ_dós£π_ª£t
 = (
__f‹˚
 
pcõ_ª£t_°©e_t
) 1,

310 
	mpcõ_w¨m_ª£t
 = (
__f‹˚
 
pcõ_ª£t_°©e_t
) 2,

313 
	mpcõ_hŸ_ª£t
 = (
__f‹˚
 
pcõ_ª£t_°©e_t
) 3

317 
	#PCI_D0
 ((
pci_powî_t
 
__f‹˚
Ë0)

	)

318 
	#PCI_D1
 ((
pci_powî_t
 
__f‹˚
Ë1)

	)

319 
	#PCI_D2
 ((
pci_powî_t
 
__f‹˚
Ë2)

	)

320 
	#PCI_D3hŸ
 ((
pci_powî_t
 
__f‹˚
Ë3)

	)

321 
	#PCI_D3cﬁd
 ((
pci_powî_t
 
__f‹˚
Ë4)

	)

322 
	#PCI_UNKNOWN
 ((
pci_powî_t
 
__f‹˚
Ë5)

	)

323 
	#PCI_POWER_ERROR
 ((
pci_powî_t
 
__f‹˚
Ë-1)

	)

325 
	#PCI_PM_D2_DELAY
 200

	)

326 
	#PCI_PM_D3_WAIT
 10

	)

327 
	#PCI_PM_BUS_WAIT
 50

	)

329 
	#PCI_DEVICE
(
víd
,
dev
) \

330 .
víd‹
 = (
víd
), .
devi˚
 = (
dev
), \

331 .
subvíd‹
 = 
PCI_ANY_ID
, .
subdevi˚
 = 
	)
PCI_ANY_ID

334 
	#DECLARE_PCI_UNMAP_ADDR
(
ADDR_NAME
) \

335 
dma_addr_t
 
ADDR_NAME
;

	)

336 
	#DECLARE_PCI_UNMAP_LEN
(
LEN_NAME
) \

337 
__u32
 
LEN_NAME
;

	)

338 
	#pci_unm≠_addr
(
PTR
, 
ADDR_NAME
) \

339 ((
PTR
)->
ADDR_NAME
)

	)

340 
	#pci_unm≠_addr_£t
(
PTR
, 
ADDR_NAME
, 
VAL
) \

341 (((
PTR
)->
ADDR_NAME
Ë(
VAL
))

	)

342 
	#pci_unm≠_Àn
(
PTR
, 
LEN_NAME
) \

343 ((
PTR
)->
LEN_NAME
)

	)

344 
	#pci_unm≠_Àn_£t
(
PTR
, 
LEN_NAME
, 
VAL
) \

345 (((
PTR
)->
LEN_NAME
Ë(
VAL
))

	)

348 
	#PCI_DMA_BIDIRECTIONAL
 0

	)

349 
	#PCI_DMA_TODEVICE
 1

	)

350 
	#PCI_DMA_FROMDEVICE
 2

	)

351 
	#PCI_DMA_NONE
 3

	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

145 #ifde‡
__STDC__


147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
__BEGIN_NAMESPACE_STD


154 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

156 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_ATFILE


161 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

162 
__c⁄°
 *
__√w
Ë
__THROW
;

165 
__BEGIN_NAMESPACE_STD


170 #i‚de‡
__USE_FILE_OFFSET64


171 
FILE
 *
	`tmpfûe
 ();

173 #ifde‡
__REDIRECT


174 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

176 
	#tmpfûe
 
tmpfûe64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
FILE
 *
	`tmpfûe64
 ();

185 *
	$tm≤am
 (*
__s
Ë
__THROW
;

186 
__END_NAMESPACE_STD


188 #ifde‡
__USE_MISC


191 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

195 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


203 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

204 
__THROW
 
__©åibuã_mÆloc__
;

208 
__BEGIN_NAMESPACE_STD


213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

219 
__END_NAMESPACE_STD


221 #ifde‡
__USE_MISC


228 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

231 #ifde‡
__USE_GNU


238 
	`f˛o£Æl
 ();

242 
__BEGIN_NAMESPACE_STD


243 #i‚de‡
__USE_FILE_OFFSET64


248 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

249 
__c⁄°
 *
__ª°ri˘
 
__modes
);

254 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
,

256 
FILE
 *
__ª°ri˘
 
__°ªam
);

258 #ifde‡
__REDIRECT


259 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

260 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

261 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

262 
__c⁄°
 *
__ª°ri˘
 
__modes
,

263 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 
__END_NAMESPACE_STD


270 #ifde‡
__USE_LARGEFILE64


271 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
);

273 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
);

278 #ifdef 
__USE_POSIX


280 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

283 #ifdef 
__USE_GNU


286 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

287 
__c⁄°
 *
__ª°ri˘
 
__modes
,

288 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

291 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

296 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

300 
__BEGIN_NAMESPACE_STD


303 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

307 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

308 
__modes
, 
size_t
 
__n
Ë
__THROW
;

309 
__END_NAMESPACE_STD


311 #ifdef 
__USE_BSD


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

322 
__BEGIN_NAMESPACE_STD


327 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

328 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

333 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

335 
	$•rötf
 (*
__ª°ri˘
 
__s
,

336 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

342 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

343 
_G_va_li°
 
__¨g
);

348 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

350 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

351 
_G_va_li°
 
__¨g
Ë
__THROW
;

352 
__END_NAMESPACE_STD


354 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


355 
__BEGIN_NAMESPACE_C99


357 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

359 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

361 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

364 
__END_NAMESPACE_C99


367 #ifde‡
__USE_GNU


370 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

371 
_G_va_li°
 
__¨g
)

372 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

373 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

374 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

375 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

376 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

377 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

378 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

386 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

387 
_G_va_li°
 
__¨g
)

388 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

389 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

390 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

394 
__BEGIN_NAMESPACE_STD


399 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

400 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

405 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
__END_NAMESPACE_STD


411 #ifdef 
__USE_ISOC99


412 
__BEGIN_NAMESPACE_C99


417 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

418 
_G_va_li°
 
__¨g
)

419 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

425 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

426 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

429 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

431 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

432 
__END_NAMESPACE_C99


436 
__BEGIN_NAMESPACE_STD


441 
	`fgëc
 (
FILE
 *
__°ªam
);

442 
	`gëc
 (
FILE
 *
__°ªam
);

448 
	`gëch¨
 ();

449 
__END_NAMESPACE_STD


453 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

455 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


460 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

461 
	`gëch¨_u∆ocked
 ();

464 #ifde‡
__USE_MISC


471 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

475 
__BEGIN_NAMESPACE_STD


483 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

484 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

490 
	`putch¨
 (
__c
);

491 
__END_NAMESPACE_STD


495 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

497 #ifde‡
__USE_MISC


504 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

507 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


512 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

513 
	`putch¨_u∆ocked
 (
__c
);

517 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

518 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

520 
	`gëw
 (
FILE
 *
__°ªam
);

523 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

527 
__BEGIN_NAMESPACE_STD


532 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

533 
__wur
;

540 *
	$gës
 (*
__s
Ë
__wur
;

541 
__END_NAMESPACE_STD


543 #ifde‡
__USE_GNU


550 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

551 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

555 #ifdef 
__USE_GNU


566 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

567 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

568 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

569 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

570 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

571 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

579 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

580 
size_t
 *
__ª°ri˘
 
__n
,

581 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

585 
__BEGIN_NAMESPACE_STD


590 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

596 
	`puts
 (
__c⁄°
 *
__s
);

603 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

610 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

611 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

617 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

618 
__END_NAMESPACE_STD


620 #ifde‡
__USE_GNU


627 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

628 
FILE
 *
__ª°ri˘
 
__°ªam
);

631 #ifde‡
__USE_MISC


638 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

639 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

640 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

641 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__BEGIN_NAMESPACE_STD


650 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

655 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

660 
	`ªwöd
 (
FILE
 *
__°ªam
);

661 
__END_NAMESPACE_STD


668 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


669 #i‚de‡
__USE_FILE_OFFSET64


674 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

679 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

681 #ifde‡
__REDIRECT


682 
	`__REDIRECT
 (
f£eko
,

683 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

684 
f£eko64
);

685 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

687 
	#f£eko
 
f£eko64


	)

688 
	#·ñlo
 
·ñlo64


	)

693 
__BEGIN_NAMESPACE_STD


694 #i‚de‡
__USE_FILE_OFFSET64


699 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

704 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

708 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

709 
	`__REDIRECT
 (
f£ços
,

710 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

712 
	#fgëpos
 
fgëpos64


	)

713 
	#f£ços
 
f£ços64


	)

716 
__END_NAMESPACE_STD


718 #ifde‡
__USE_LARGEFILE64


719 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

720 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

721 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

722 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

725 
__BEGIN_NAMESPACE_STD


727 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

729 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

731 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

732 
__END_NAMESPACE_STD


734 #ifde‡
__USE_MISC


736 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

737 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

738 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

742 
__BEGIN_NAMESPACE_STD


747 
	`≥º‹
 (
__c⁄°
 *
__s
);

748 
__END_NAMESPACE_STD


754 
	~<bôs/sys_îæi°.h
>

757 #ifdef 
__USE_POSIX


759 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

762 #ifde‡
__USE_MISC


764 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

768 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

769 
deföed
 
__USE_MISC
)

774 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

780 
	`p˛o£
 (
FILE
 *
__°ªam
);

784 #ifdef 
__USE_POSIX


786 *
	$˘îmid
 (*
__s
Ë
__THROW
;

790 #ifde‡
__USE_XOPEN


792 *
	`cu£rid
 (*
__s
);

796 #ifdef 
__USE_GNU


797 
ob°ack
;

800 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

801 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

802 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

803 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

804 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

805 
_G_va_li°
 
__¨gs
)

806 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

810 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


814 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

818 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

821 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

824 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


828 
	#__√ed_gë›t


	)

829 
	~<gë›t.h
>

834 #ifde‡
__USE_EXTERN_INLINES


835 
	~<bôs/°dio.h
>

837 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


838 
	~<bôs/°dio2.h
>

840 #ifde‡
__LDBL_COMPAT


841 
	~<bôs/°dio-ldbl.h
>

844 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

32 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

33 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

34 
__END_NAMESPACE_STD


36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


37 
__BEGIN_NAMESPACE_C99


38 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

39 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

40 
__END_NAMESPACE_C99


43 #ifdef 
__USE_ISOC99


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

46 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

47 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

48 
__END_NAMESPACE_C99


51 #ifde‡
__USE_GNU


52 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

53 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

54 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

55 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

56 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

57 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

58 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

61 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


62 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

63 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

64 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


65 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

66 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #ifde‡
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

57 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


59 
__STDIO_INLINE
 

60 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

62  
	`_IO_gëc_u∆ocked
 (
__Â
);

63 
	}
}

66 
__STDIO_INLINE
 

67 
	$gëch¨_u∆ocked
 ()

69  
	`_IO_gëc_u∆ocked
 (
°dö
);

70 
	}
}

75 
__STDIO_INLINE
 

76 
	$putch¨
 (
__c
)

78  
	`_IO_putc
 (
__c
, 
°dout
);

79 
	}
}

82 #ifde‡
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

92 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


94 
__STDIO_INLINE
 

95 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

97  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

98 
	}
}

101 
__STDIO_INLINE
 

102 
	$putch¨_u∆ocked
 (
__c
)

104  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

105 
	}
}

109 #ifdef 
__USE_GNU


111 
__STDIO_INLINE
 
_IO_ssize_t


112 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

114  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

115 
	}
}

119 #ifde‡
__USE_MISC


121 
__STDIO_INLINE
 

122 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

124  
	`_IO_„of_u∆ocked
 (
__°ªam
);

125 
	}
}

128 
__STDIO_INLINE
 

129 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

131  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

132 
	}
}

138 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


140 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

141 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

142 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

143 && (
size_t
Ë(
size
) != 0) \

144 ? ({ *
__±r
 = (*Ë(
±r
); \

145 
FILE
 *
__°ªam
 = (
°ªam
); \

146 
size_t
 
__˙t
; \

147 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

148 
__˙t
 > 0; --__cnt) \

150 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

151 i‡(
__c
 =
EOF
) \

153 *
__±r
++ = 
__c
; \

155 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

156 / (
size_t
Ë(
size
); }) \

157 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

158 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

160 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

161 (Ë(
n
), (
size_t
) 0) \

162 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

164 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

165 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

166 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

167 && (
size_t
Ë(
size
) != 0) \

168 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

169 
FILE
 *
__°ªam
 = (
°ªam
); \

170 
size_t
 
__˙t
; \

171 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

172 
__˙t
 > 0; --__cnt) \

173 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

175 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

176 / (
size_t
Ë(
size
); }) \

177 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

178 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

180 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

181 (Ë(
n
), (
size_t
) 0) \

182 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

186 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 
	#•rötf
(
°r
, ...) \

31 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

32 
__VA_ARGS__
)

	)

33 
	#v•rötf
(
°r
, 
fmt
, 
≠
) \

34 
	`__buûtö___v•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (°r), 
fmt
, 
≠
)

	)

36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


38 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

39 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

40 ...Ë
__THROW
;

41 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

42 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

43 
_G_va_li°
 
__≠
Ë
__THROW
;

45 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

46 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

47 
__VA_ARGS__
)

	)

48 
	#v¢¥ötf
(
°r
, 
Àn
, 
fmt
, 
≠
) \

49 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

50 
fmt
, 
≠
)

	)

54 #i‡
__USE_FORTIFY_LEVEL
 > 1

56 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

57 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

58 
	`__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

59 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

60 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

61 
	`__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

62 
_G_va_li°
 
__≠
);

64 #i‡
	`__GNUC_PREREQ
 (4, 0)

65 
	#¥ötf
(...) \

66 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

67 
	#Ârötf
(
°ªam
, ...) \

68 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

69 
	#v¥ötf
(
f‹m©
, 
≠
) \

70 
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

71 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

72 
	`__vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

74 
	#¥ötf
(...) \

75 
	`__buûtö___¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

76 
	#Ârötf
(
°ªam
, ...) \

77 
	`__buûtö___Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

78 
	#v¥ötf
(
f‹m©
, 
≠
) \

79 
	`__buûtö___v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

80 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

81 
	`__buûtö___vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

86 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

87 *
	`__REDIRECT
 (
__gës_Æüs
, (*
__°r
), 
gës
Ë
__wur
;

89 
__Æways_ölöe
 
__wur
 *

90 
	$gës
 (*
__°r
)

92 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

93  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

94  
	`__gës_Æüs
 (
__°r
);

95 
	}
}

97 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

98 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

99 *
	`__REDIRECT
 (
__fgës_Æüs
,

100 (*
__ª°ri˘
 
__s
, 
__n
,

101 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

103 
__Æways_ölöe
 
__wur
 *

104 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

106 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

107 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

108  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

109  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

110 
	}
}

112 #ifde‡
__USE_GNU


113 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

114 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

115 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

116 (*
__ª°ri˘
 
__s
, 
__n
,

117 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

119 
__Æways_ölöe
 
__wur
 *

120 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

122 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

123 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

124  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

125  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

126 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

119 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

120 #ñi‡
__WORDSIZE
 == 64

121 
	t__SQUAD_TYPE
 

	)

122 
	t__UQUAD_TYPE
 

	)

123 
	t__SWORD_TYPE
 

	)

124 
	t__UWORD_TYPE
 

	)

125 
	t__SLONG32_TYPE
 

	)

126 
	t__ULONG32_TYPE
 

	)

127 
	t__S64_TYPE
 

	)

128 
	t__U64_TYPE
 

	)

130 
	t__STD_TYPE
 

	)

134 
	~<bôs/ty≥sizes.h
>

137 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

138 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

139 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

140 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

141 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

142 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

143 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

144 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

145 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

146 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

147 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

148 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

149 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

150 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

151 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

152 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

153 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

154 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

156 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

157 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

158 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

161 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

164 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

167 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

172 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

173 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

176 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

177 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

180 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

181 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

183 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

187 
__off64_t
 
	t__loff_t
;

188 
__quad_t
 *
	t__qaddr_t
;

189 *
	t__ˇddr_t
;

192 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

195 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

198 #unde‡
__STD_TYPE


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_POSIX


95 #unde‡
__USE_POSIX2


96 #unde‡
__USE_POSIX199309


97 #unde‡
__USE_POSIX199506


98 #unde‡
__USE_XOPEN


99 #unde‡
__USE_XOPEN_EXTENDED


100 #unde‡
__USE_UNIX98


101 #unde‡
__USE_XOPEN2K


102 #unde‡
__USE_LARGEFILE


103 #unde‡
__USE_LARGEFILE64


104 #unde‡
__USE_FILE_OFFSET64


105 #unde‡
__USE_BSD


106 #unde‡
__USE_SVID


107 #unde‡
__USE_MISC


108 #unde‡
__USE_ATFILE


109 #unde‡
__USE_GNU


110 #unde‡
__USE_REENTRANT


111 #unde‡
__USE_FORTIFY_LEVEL


112 #unde‡
__FAVOR_BSD


113 #unde‡
__KERNEL_STRICT_NAMES


117 #i‚de‡
_LOOSE_KERNEL_NAMES


118 
	#__KERNEL_STRICT_NAMES


	)

122 
	#__USE_ANSI
 1

	)

131 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


132 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

133 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

135 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

140 #i‡
deföed
 
_BSD_SOURCE
 && \

141 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

142 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

143 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

144 
	#__FAVOR_BSD
 1

	)

148 #ifde‡
_GNU_SOURCE


149 #unde‡
_ISOC99_SOURCE


150 
	#_ISOC99_SOURCE
 1

	)

151 #unde‡
_POSIX_SOURCE


152 
	#_POSIX_SOURCE
 1

	)

153 #unde‡
_POSIX_C_SOURCE


154 
	#_POSIX_C_SOURCE
 200112L

	)

155 #unde‡
_XOPEN_SOURCE


156 
	#_XOPEN_SOURCE
 600

	)

157 #unde‡
_XOPEN_SOURCE_EXTENDED


158 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

159 #unde‡
_LARGEFILE64_SOURCE


160 
	#_LARGEFILE64_SOURCE
 1

	)

161 #unde‡
_BSD_SOURCE


162 
	#_BSD_SOURCE
 1

	)

163 #unde‡
_SVID_SOURCE


164 
	#_SVID_SOURCE
 1

	)

165 #unde‡
_ATFILE_SOURCE


166 
	#_ATFILE_SOURCE
 1

	)

171 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

172 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

173 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

174 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

175 
	#_BSD_SOURCE
 1

	)

176 
	#_SVID_SOURCE
 1

	)

183 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

184 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

185 
	#__USE_ISOC99
 1

	)

190 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

191 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

192 
	#_POSIX_SOURCE
 1

	)

193 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

194 
	#_POSIX_C_SOURCE
 2

	)

195 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

196 
	#_POSIX_C_SOURCE
 199506L

	)

198 
	#_POSIX_C_SOURCE
 200112L

	)

202 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


203 
	#__USE_POSIX
 1

	)

206 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


207 
	#__USE_POSIX2
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

211 
	#__USE_POSIX199309
 1

	)

214 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

215 
	#__USE_POSIX199506
 1

	)

218 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

219 
	#__USE_XOPEN2K
 1

	)

222 #ifdef 
_XOPEN_SOURCE


223 
	#__USE_XOPEN
 1

	)

224 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

225 
	#__USE_XOPEN_EXTENDED
 1

	)

226 
	#__USE_UNIX98
 1

	)

227 #unde‡
_LARGEFILE_SOURCE


228 
	#_LARGEFILE_SOURCE
 1

	)

229 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

230 
	#__USE_XOPEN2K
 1

	)

231 #unde‡
__USE_ISOC99


232 
	#__USE_ISOC99
 1

	)

235 #ifde‡
_XOPEN_SOURCE_EXTENDED


236 
	#__USE_XOPEN_EXTENDED
 1

	)

241 #ifde‡
_LARGEFILE_SOURCE


242 
	#__USE_LARGEFILE
 1

	)

245 #ifde‡
_LARGEFILE64_SOURCE


246 
	#__USE_LARGEFILE64
 1

	)

249 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

250 
	#__USE_FILE_OFFSET64
 1

	)

253 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


254 
	#__USE_MISC
 1

	)

257 #ifdef 
_BSD_SOURCE


258 
	#__USE_BSD
 1

	)

261 #ifdef 
_SVID_SOURCE


262 
	#__USE_SVID
 1

	)

265 #ifdef 
_ATFILE_SOURCE


266 
	#__USE_ATFILE
 1

	)

269 #ifdef 
_GNU_SOURCE


270 
	#__USE_GNU
 1

	)

273 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


274 
	#__USE_REENTRANT
 1

	)

277 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

278 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0 \

279 && (
__GNUC_PREREQ
 (4, 1) \

280 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

281 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

282 && 
	g__GNUC_MINOR__
 == 4 \

283 && (
__GNUC_PATCHLEVEL__
 > 2 \

284 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

285 #i‡
_FORTIFY_SOURCE
 > 1

286 
	#__USE_FORTIFY_LEVEL
 2

	)

288 
	#__USE_FORTIFY_LEVEL
 1

	)

291 
	#__USE_FORTIFY_LEVEL
 0

	)

295 
	#__STDC_IEC_559__
 1

	)

296 
	#__STDC_IEC_559_COMPLEX__
 1

	)

299 
	#__STDC_ISO_10646__
 200009L

	)

307 #unde‡
__GNU_LIBRARY__


308 
	#__GNU_LIBRARY__
 6

	)

312 
	#__GLIBC__
 2

	)

313 
	#__GLIBC_MINOR__
 5

	)

315 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

316 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

319 #i‡
deföed
 
__GNUC__
 \

320 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

321 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

322 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

323 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

327 #i‚de‡
__ASSEMBLER__


328 #i‚de‡
_SYS_CDEFS_H


329 
	~<sys/cdefs.h
>

334 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


335 
	#__USE_LARGEFILE
 1

	)

336 
	#__USE_LARGEFILE64
 1

	)

342 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

343 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


344 
	#__USE_EXTERN_INLINES
 1

	)

352 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

148 
	#_IO_SKIPWS
 01

	)

149 
	#_IO_LEFT
 02

	)

150 
	#_IO_RIGHT
 04

	)

151 
	#_IO_INTERNAL
 010

	)

152 
	#_IO_DEC
 020

	)

153 
	#_IO_OCT
 040

	)

154 
	#_IO_HEX
 0100

	)

155 
	#_IO_SHOWBASE
 0200

	)

156 
	#_IO_SHOWPOINT
 0400

	)

157 
	#_IO_UPPERCASE
 01000

	)

158 
	#_IO_SHOWPOS
 02000

	)

159 
	#_IO_SCIENTIFIC
 04000

	)

160 
	#_IO_FIXED
 010000

	)

161 
	#_IO_UNITBUF
 020000

	)

162 
	#_IO_STDIO
 040000

	)

163 
	#_IO_DONT_CLOSE
 0100000

	)

164 
	#_IO_BOOLALPHA
 0200000

	)

167 
_IO_jump_t
; 
	g_IO_FILE
;

170 #ifde‡
_IO_MTSAFE_IO


171 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

172 
	~<bôs/°dio-lock.h
>

177 
	t_IO_lock_t
;

183 
	s_IO_m¨kî
 {

184 
_IO_m¨kî
 *
	m_√xt
;

185 
_IO_FILE
 *
	m_sbuf
;

189 
	m_pos
;

191 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

192 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

193 
	mpublic
:

194 
°ªamm¨kî
(
°ªambuf
 *
sb
);

195 ~
°ªamm¨kî
();

196 
ßvög
(Ë{  
	m_•os
 == -2; }

197 
dñè
(
°ªamm¨kî
&);

198 
dñè
();

203 
	e__codecvt_ªsu…


205 
	m__codecvt_ok
,

206 
	m__codecvt_∑πül
,

207 
	m__codecvt_îr‹
,

208 
	m__codecvt_noc⁄v


211 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


214 
	s_IO_codecvt


216 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

217 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

218 
	m__mb°©e_t
 *,

219 c⁄° 
	mwch¨_t
 *,

220 c⁄° 
	mwch¨_t
 *,

221 c⁄° 
	mwch¨_t
 **, *,

223 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

224 
	m__mb°©e_t
 *, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *,

229 c⁄° **, 
	mwch¨_t
 *,

230 
	mwch¨_t
 *, wchar_t **);

231 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

232 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

233 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

234 c⁄° *, c⁄° *, 
	m_IO_size_t
);

235 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

237 
_IO_ic⁄v_t
 
	m__cd_ö
;

238 
_IO_ic⁄v_t
 
	m__cd_out
;

242 
	s_IO_wide_d©a


244 
wch¨_t
 *
	m_IO_ªad_±r
;

245 
wch¨_t
 *
	m_IO_ªad_íd
;

246 
wch¨_t
 *
	m_IO_ªad_ba£
;

247 
wch¨_t
 *
	m_IO_wrôe_ba£
;

248 
wch¨_t
 *
	m_IO_wrôe_±r
;

249 
wch¨_t
 *
	m_IO_wrôe_íd
;

250 
wch¨_t
 *
	m_IO_buf_ba£
;

251 
wch¨_t
 *
	m_IO_buf_íd
;

253 
wch¨_t
 *
	m_IO_ßve_ba£
;

254 
wch¨_t
 *
	m_IO_backup_ba£
;

256 
wch¨_t
 *
	m_IO_ßve_íd
;

258 
__mb°©e_t
 
	m_IO_°©e
;

259 
__mb°©e_t
 
	m_IO_œ°_°©e
;

260 
_IO_codecvt
 
	m_codecvt
;

262 
wch¨_t
 
	m_sh‹tbuf
[1];

264 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

268 
	s_IO_FILE
 {

269 
	m_Êags
;

270 
	#_IO_fûe_Êags
 
_Êags


	)

274 * 
	m_IO_ªad_±r
;

275 * 
	m_IO_ªad_íd
;

276 * 
	m_IO_ªad_ba£
;

277 * 
	m_IO_wrôe_ba£
;

278 * 
	m_IO_wrôe_±r
;

279 * 
	m_IO_wrôe_íd
;

280 * 
	m_IO_buf_ba£
;

281 * 
	m_IO_buf_íd
;

283 *
	m_IO_ßve_ba£
;

284 *
	m_IO_backup_ba£
;

285 *
	m_IO_ßve_íd
;

287 
_IO_m¨kî
 *
	m_m¨kîs
;

289 
_IO_FILE
 *
	m_chaö
;

291 
	m_fûío
;

293 
	m_blksize
;

295 
	m_Êags2
;

297 
_IO_off_t
 
	m_ﬁd_off£t
;

299 
	#__HAVE_COLUMN


	)

301 
	m_cur_cﬁumn
;

302 sig√d 
	m_vèbÀ_off£t
;

303 
	m_sh‹tbuf
[1];

307 
_IO_lock_t
 *
	m_lock
;

308 #ifde‡
_IO_USE_OLD_IO_FILE


311 
	s_IO_FILE_com∂ëe


313 
_IO_FILE
 
	m_fûe
;

315 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

316 
_IO_off64_t
 
	m_off£t
;

317 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


319 
_IO_codecvt
 *
	m_codecvt
;

320 
_IO_wide_d©a
 *
	m_wide_d©a
;

321 
_IO_FILE
 *
	m_‰ìªs_li°
;

322 *
	m_‰ìªs_buf
;

323 
size_t
 
	m_‰ìªs_size
;

325 *
	m__∑d1
;

326 *
	m__∑d2
;

327 *
	m__∑d3
;

328 *
	m__∑d4
;

329 
size_t
 
	m__∑d5
;

331 
	m_mode
;

333 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

337 #i‚de‡
__˝lu•lus


338 
_IO_FILE
 
	t_IO_FILE
;

341 
	g_IO_FILE_∂us
;

343 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

344 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

345 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

346 #i‚de‡
_LIBC


347 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

348 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

349 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

351 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

352 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

353 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

361 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

369 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

370 
	tsize_t
 
	t__n
);

378 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

381 
	t__io_˛o£_‚
 (*
	t__cookõ
);

384 #ifde‡
_GNU_SOURCE


386 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

387 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

388 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

389 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

394 
__io_ªad_‚
 *
	mªad
;

395 
__io_wrôe_‚
 *
	mwrôe
;

396 
__io_£ek_‚
 *
	m£ek
;

397 
__io_˛o£_‚
 *
	m˛o£
;

398 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

399 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

401 
	g_IO_cookõ_fûe
;

404 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

405 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

409 #ifde‡
__˝lu•lus


413 
__undîÊow
 (
_IO_FILE
 *);

414 
__uÊow
 (
_IO_FILE
 *);

415 
__ovîÊow
 (
_IO_FILE
 *, );

416 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

417 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

418 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

420 #i‡ 
__GNUC__
 >= 3

421 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

423 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

426 
	#_IO_gëc_u∆ocked
(
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

428 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

429 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

430 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

431 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

432 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

433 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

435 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

436 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

438 
	#_IO_gëwc_u∆ocked
(
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

441 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

442 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

443 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

444 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

445 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

446 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

448 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

449 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

451 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

452 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

453 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

454 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

456 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

459 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

460 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

462 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

463 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

464 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

466 #ifde‡
_IO_MTSAFE_IO


467 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

468 
	#_IO_Êockfûe
(
_Â
) \

469 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

470 
	#_IO_fu∆ockfûe
(
_Â
) \

471 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

473 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

474 
	#_IO_Êockfûe
(
_Â
Ë

	)

475 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

476 
	#_IO_·rylockfûe
(
_Â
Ë

	)

477 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

478 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

481 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

482 
_IO_va_li°
, *
__ª°ri˘
);

483 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

484 
_IO_va_li°
);

485 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

486 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

488 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

489 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

491 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

493 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


494 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

495 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

496 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

497 #i‡
__GNUC__
 >= 2

500 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


501 
	~<shlib-com∑t.h
>

502 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

503 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

504 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

505 c⁄° 
_IO_°dö_u£d
;

506 
wók_exã∫
 (
_IO_°dö_u£d
);

509 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


510 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

514 
	#_IO_fwide
(
__Â
, 
__mode
) \

515 ({ 
__ªsu…
 = (
__mode
); \

516 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

518 i‡((
__Â
)->
_mode
 == 0) \

520 (
__Â
)->
_mode
 = -1; \

521 
__ªsu…
 = (
__Â
)->
_mode
; \

523 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

524 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

526 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

527 
__ªsu…
; })

	)

530 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

531 
_IO_va_li°
, *
__ª°ri˘
);

532 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

533 
_IO_va_li°
);

534 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

535 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

538 #ifde‡
__LDBL_COMPAT


539 
	~<bôs/libio-ldbl.h
>

542 #ifde‡
__˝lu•lus


	@/usr/include/linux/pci_ids.h

9 
	#PCI_CLASS_NOT_DEFINED
 0x0000

	)

10 
	#PCI_CLASS_NOT_DEFINED_VGA
 0x0001

	)

12 
	#PCI_BASE_CLASS_STORAGE
 0x01

	)

13 
	#PCI_CLASS_STORAGE_SCSI
 0x0100

	)

14 
	#PCI_CLASS_STORAGE_IDE
 0x0101

	)

15 
	#PCI_CLASS_STORAGE_FLOPPY
 0x0102

	)

16 
	#PCI_CLASS_STORAGE_IPI
 0x0103

	)

17 
	#PCI_CLASS_STORAGE_RAID
 0x0104

	)

18 
	#PCI_CLASS_STORAGE_SATA
 0x0106

	)

19 
	#PCI_CLASS_STORAGE_SATA_AHCI
 0x010601

	)

20 
	#PCI_CLASS_STORAGE_SAS
 0x0107

	)

21 
	#PCI_CLASS_STORAGE_OTHER
 0x0180

	)

23 
	#PCI_BASE_CLASS_NETWORK
 0x02

	)

24 
	#PCI_CLASS_NETWORK_ETHERNET
 0x0200

	)

25 
	#PCI_CLASS_NETWORK_TOKEN_RING
 0x0201

	)

26 
	#PCI_CLASS_NETWORK_FDDI
 0x0202

	)

27 
	#PCI_CLASS_NETWORK_ATM
 0x0203

	)

28 
	#PCI_CLASS_NETWORK_OTHER
 0x0280

	)

30 
	#PCI_BASE_CLASS_DISPLAY
 0x03

	)

31 
	#PCI_CLASS_DISPLAY_VGA
 0x0300

	)

32 
	#PCI_CLASS_DISPLAY_XGA
 0x0301

	)

33 
	#PCI_CLASS_DISPLAY_3D
 0x0302

	)

34 
	#PCI_CLASS_DISPLAY_OTHER
 0x0380

	)

36 
	#PCI_BASE_CLASS_MULTIMEDIA
 0x04

	)

37 
	#PCI_CLASS_MULTIMEDIA_VIDEO
 0x0400

	)

38 
	#PCI_CLASS_MULTIMEDIA_AUDIO
 0x0401

	)

39 
	#PCI_CLASS_MULTIMEDIA_PHONE
 0x0402

	)

40 
	#PCI_CLASS_MULTIMEDIA_OTHER
 0x0480

	)

42 
	#PCI_BASE_CLASS_MEMORY
 0x05

	)

43 
	#PCI_CLASS_MEMORY_RAM
 0x0500

	)

44 
	#PCI_CLASS_MEMORY_FLASH
 0x0501

	)

45 
	#PCI_CLASS_MEMORY_OTHER
 0x0580

	)

47 
	#PCI_BASE_CLASS_BRIDGE
 0x06

	)

48 
	#PCI_CLASS_BRIDGE_HOST
 0x0600

	)

49 
	#PCI_CLASS_BRIDGE_ISA
 0x0601

	)

50 
	#PCI_CLASS_BRIDGE_EISA
 0x0602

	)

51 
	#PCI_CLASS_BRIDGE_MC
 0x0603

	)

52 
	#PCI_CLASS_BRIDGE_PCI
 0x0604

	)

53 
	#PCI_CLASS_BRIDGE_PCMCIA
 0x0605

	)

54 
	#PCI_CLASS_BRIDGE_NUBUS
 0x0606

	)

55 
	#PCI_CLASS_BRIDGE_CARDBUS
 0x0607

	)

56 
	#PCI_CLASS_BRIDGE_RACEWAY
 0x0608

	)

57 
	#PCI_CLASS_BRIDGE_OTHER
 0x0680

	)

59 
	#PCI_BASE_CLASS_COMMUNICATION
 0x07

	)

60 
	#PCI_CLASS_COMMUNICATION_SERIAL
 0x0700

	)

61 
	#PCI_CLASS_COMMUNICATION_PARALLEL
 0x0701

	)

62 
	#PCI_CLASS_COMMUNICATION_MULTISERIAL
 0x0702

	)

63 
	#PCI_CLASS_COMMUNICATION_MODEM
 0x0703

	)

64 
	#PCI_CLASS_COMMUNICATION_OTHER
 0x0780

	)

66 
	#PCI_BASE_CLASS_SYSTEM
 0x08

	)

67 
	#PCI_CLASS_SYSTEM_PIC
 0x0800

	)

68 
	#PCI_CLASS_SYSTEM_PIC_IOAPIC
 0x080010

	)

69 
	#PCI_CLASS_SYSTEM_PIC_IOXAPIC
 0x080020

	)

70 
	#PCI_CLASS_SYSTEM_DMA
 0x0801

	)

71 
	#PCI_CLASS_SYSTEM_TIMER
 0x0802

	)

72 
	#PCI_CLASS_SYSTEM_RTC
 0x0803

	)

73 
	#PCI_CLASS_SYSTEM_PCI_HOTPLUG
 0x0804

	)

74 
	#PCI_CLASS_SYSTEM_SDHCI
 0x0805

	)

75 
	#PCI_CLASS_SYSTEM_OTHER
 0x0880

	)

77 
	#PCI_BASE_CLASS_INPUT
 0x09

	)

78 
	#PCI_CLASS_INPUT_KEYBOARD
 0x0900

	)

79 
	#PCI_CLASS_INPUT_PEN
 0x0901

	)

80 
	#PCI_CLASS_INPUT_MOUSE
 0x0902

	)

81 
	#PCI_CLASS_INPUT_SCANNER
 0x0903

	)

82 
	#PCI_CLASS_INPUT_GAMEPORT
 0x0904

	)

83 
	#PCI_CLASS_INPUT_OTHER
 0x0980

	)

85 
	#PCI_BASE_CLASS_DOCKING
 0x0a

	)

86 
	#PCI_CLASS_DOCKING_GENERIC
 0x0a00

	)

87 
	#PCI_CLASS_DOCKING_OTHER
 0x0a80

	)

89 
	#PCI_BASE_CLASS_PROCESSOR
 0x0b

	)

90 
	#PCI_CLASS_PROCESSOR_386
 0x0b00

	)

91 
	#PCI_CLASS_PROCESSOR_486
 0x0b01

	)

92 
	#PCI_CLASS_PROCESSOR_PENTIUM
 0x0b02

	)

93 
	#PCI_CLASS_PROCESSOR_ALPHA
 0x0b10

	)

94 
	#PCI_CLASS_PROCESSOR_POWERPC
 0x0b20

	)

95 
	#PCI_CLASS_PROCESSOR_MIPS
 0x0b30

	)

96 
	#PCI_CLASS_PROCESSOR_CO
 0x0b40

	)

98 
	#PCI_BASE_CLASS_SERIAL
 0x0c

	)

99 
	#PCI_CLASS_SERIAL_FIREWIRE
 0x0c00

	)

100 
	#PCI_CLASS_SERIAL_FIREWIRE_OHCI
 0x0c0010

	)

101 
	#PCI_CLASS_SERIAL_ACCESS
 0x0c01

	)

102 
	#PCI_CLASS_SERIAL_SSA
 0x0c02

	)

103 
	#PCI_CLASS_SERIAL_USB
 0x0c03

	)

104 
	#PCI_CLASS_SERIAL_USB_UHCI
 0x0c0300

	)

105 
	#PCI_CLASS_SERIAL_USB_OHCI
 0x0c0310

	)

106 
	#PCI_CLASS_SERIAL_USB_EHCI
 0x0c0320

	)

107 
	#PCI_CLASS_SERIAL_FIBER
 0x0c04

	)

108 
	#PCI_CLASS_SERIAL_SMBUS
 0x0c05

	)

110 
	#PCI_BASE_CLASS_INTELLIGENT
 0x0e

	)

111 
	#PCI_CLASS_INTELLIGENT_I2O
 0x0e00

	)

113 
	#PCI_BASE_CLASS_SATELLITE
 0x0f

	)

114 
	#PCI_CLASS_SATELLITE_TV
 0x0f00

	)

115 
	#PCI_CLASS_SATELLITE_AUDIO
 0x0f01

	)

116 
	#PCI_CLASS_SATELLITE_VOICE
 0x0f03

	)

117 
	#PCI_CLASS_SATELLITE_DATA
 0x0f04

	)

119 
	#PCI_BASE_CLASS_CRYPT
 0x10

	)

120 
	#PCI_CLASS_CRYPT_NETWORK
 0x1000

	)

121 
	#PCI_CLASS_CRYPT_ENTERTAINMENT
 0x1001

	)

122 
	#PCI_CLASS_CRYPT_OTHER
 0x1080

	)

124 
	#PCI_BASE_CLASS_SIGNAL_PROCESSING
 0x11

	)

125 
	#PCI_CLASS_SP_DPIO
 0x1100

	)

126 
	#PCI_CLASS_SP_OTHER
 0x1180

	)

128 
	#PCI_CLASS_OTHERS
 0xff

	)

132 
	#PCI_VENDOR_ID_DYNALINK
 0x0675

	)

133 
	#PCI_DEVICE_ID_DYNALINK_IS64PH
 0x1702

	)

135 
	#PCI_VENDOR_ID_BERKOM
 0x0871

	)

136 
	#PCI_DEVICE_ID_BERKOM_A1T
 0xfÁ1

	)

137 
	#PCI_DEVICE_ID_BERKOM_T_CONCEPT
 0xfÁ2

	)

138 
	#PCI_DEVICE_ID_BERKOM_A4T
 0xfÁ4

	)

139 
	#PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO
 0xfÁ8

	)

141 
	#PCI_VENDOR_ID_COMPAQ
 0x0e11

	)

142 
	#PCI_DEVICE_ID_COMPAQ_TOKENRING
 0x0508

	)

143 
	#PCI_DEVICE_ID_COMPAQ_TACHYON
 0xa0fc

	)

144 
	#PCI_DEVICE_ID_COMPAQ_SMART2P
 0x´10

	)

145 
	#PCI_DEVICE_ID_COMPAQ_NETEL100
 0x´32

	)

146 
	#PCI_DEVICE_ID_COMPAQ_NETEL10
 0x´34

	)

147 
	#PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE
 0x´33

	)

148 
	#PCI_DEVICE_ID_COMPAQ_NETFLEX3I
 0x´35

	)

149 
	#PCI_DEVICE_ID_COMPAQ_NETEL100D
 0x´40

	)

150 
	#PCI_DEVICE_ID_COMPAQ_NETEL100PI
 0x´43

	)

151 
	#PCI_DEVICE_ID_COMPAQ_NETEL100I
 0xb011

	)

152 
	#PCI_DEVICE_ID_COMPAQ_CISS
 0xb060

	)

153 
	#PCI_DEVICE_ID_COMPAQ_CISSB
 0xb178

	)

154 
	#PCI_DEVICE_ID_COMPAQ_CISSC
 0x46

	)

155 
	#PCI_DEVICE_ID_COMPAQ_THUNDER
 0xf130

	)

156 
	#PCI_DEVICE_ID_COMPAQ_NETFLEX3B
 0xf150

	)

158 
	#PCI_VENDOR_ID_NCR
 0x1000

	)

159 
	#PCI_VENDOR_ID_LSI_LOGIC
 0x1000

	)

160 
	#PCI_DEVICE_ID_NCR_53C810
 0x0001

	)

161 
	#PCI_DEVICE_ID_NCR_53C820
 0x0002

	)

162 
	#PCI_DEVICE_ID_NCR_53C825
 0x0003

	)

163 
	#PCI_DEVICE_ID_NCR_53C815
 0x0004

	)

164 
	#PCI_DEVICE_ID_LSI_53C810AP
 0x0005

	)

165 
	#PCI_DEVICE_ID_NCR_53C860
 0x0006

	)

166 
	#PCI_DEVICE_ID_LSI_53C1510
 0x000a

	)

167 
	#PCI_DEVICE_ID_NCR_53C896
 0x000b

	)

168 
	#PCI_DEVICE_ID_NCR_53C895
 0x000c

	)

169 
	#PCI_DEVICE_ID_NCR_53C885
 0x000d

	)

170 
	#PCI_DEVICE_ID_NCR_53C875
 0x000f

	)

171 
	#PCI_DEVICE_ID_NCR_53C1510
 0x0010

	)

172 
	#PCI_DEVICE_ID_LSI_53C895A
 0x0012

	)

173 
	#PCI_DEVICE_ID_LSI_53C875A
 0x0013

	)

174 
	#PCI_DEVICE_ID_LSI_53C1010_33
 0x0020

	)

175 
	#PCI_DEVICE_ID_LSI_53C1010_66
 0x0021

	)

176 
	#PCI_DEVICE_ID_LSI_53C1030
 0x0030

	)

177 
	#PCI_DEVICE_ID_LSI_1030_53C1035
 0x0032

	)

178 
	#PCI_DEVICE_ID_LSI_53C1035
 0x0040

	)

179 
	#PCI_DEVICE_ID_NCR_53C875J
 0x008f

	)

180 
	#PCI_DEVICE_ID_LSI_FC909
 0x0621

	)

181 
	#PCI_DEVICE_ID_LSI_FC929
 0x0622

	)

182 
	#PCI_DEVICE_ID_LSI_FC929_LAN
 0x0623

	)

183 
	#PCI_DEVICE_ID_LSI_FC919
 0x0624

	)

184 
	#PCI_DEVICE_ID_LSI_FC919_LAN
 0x0625

	)

185 
	#PCI_DEVICE_ID_LSI_FC929X
 0x0626

	)

186 
	#PCI_DEVICE_ID_LSI_FC939X
 0x0642

	)

187 
	#PCI_DEVICE_ID_LSI_FC949X
 0x0640

	)

188 
	#PCI_DEVICE_ID_LSI_FC949ES
 0x0646

	)

189 
	#PCI_DEVICE_ID_LSI_FC919X
 0x0628

	)

190 
	#PCI_DEVICE_ID_NCR_YELLOWFIN
 0x0701

	)

191 
	#PCI_DEVICE_ID_LSI_61C102
 0x0901

	)

192 
	#PCI_DEVICE_ID_LSI_63C815
 0x1000

	)

193 
	#PCI_DEVICE_ID_LSI_SAS1064
 0x0050

	)

194 
	#PCI_DEVICE_ID_LSI_SAS1064R
 0x0411

	)

195 
	#PCI_DEVICE_ID_LSI_SAS1066
 0x005E

	)

196 
	#PCI_DEVICE_ID_LSI_SAS1068
 0x0054

	)

197 
	#PCI_DEVICE_ID_LSI_SAS1064A
 0x005C

	)

198 
	#PCI_DEVICE_ID_LSI_SAS1064E
 0x0056

	)

199 
	#PCI_DEVICE_ID_LSI_SAS1066E
 0x005A

	)

200 
	#PCI_DEVICE_ID_LSI_SAS1068E
 0x0058

	)

201 
	#PCI_DEVICE_ID_LSI_SAS1078
 0x0060

	)

203 
	#PCI_VENDOR_ID_ATI
 0x1002

	)

205 
	#PCI_DEVICE_ID_ATI_68800
 0x4158

	)

206 
	#PCI_DEVICE_ID_ATI_215CT222
 0x4354

	)

207 
	#PCI_DEVICE_ID_ATI_210888CX
 0x4358

	)

208 
	#PCI_DEVICE_ID_ATI_215ET222
 0x4554

	)

210 
	#PCI_DEVICE_ID_ATI_215GB
 0x4742

	)

211 
	#PCI_DEVICE_ID_ATI_215GD
 0x4744

	)

212 
	#PCI_DEVICE_ID_ATI_215GI
 0x4749

	)

213 
	#PCI_DEVICE_ID_ATI_215GP
 0x4750

	)

214 
	#PCI_DEVICE_ID_ATI_215GQ
 0x4751

	)

215 
	#PCI_DEVICE_ID_ATI_215XL
 0x4752

	)

216 
	#PCI_DEVICE_ID_ATI_215GT
 0x4754

	)

217 
	#PCI_DEVICE_ID_ATI_215GTB
 0x4755

	)

218 
	#PCI_DEVICE_ID_ATI_215_IV
 0x4756

	)

219 
	#PCI_DEVICE_ID_ATI_215_IW
 0x4757

	)

220 
	#PCI_DEVICE_ID_ATI_215_IZ
 0x475A

	)

221 
	#PCI_DEVICE_ID_ATI_210888GX
 0x4758

	)

222 
	#PCI_DEVICE_ID_ATI_215_LB
 0x4c42

	)

223 
	#PCI_DEVICE_ID_ATI_215_LD
 0x4c44

	)

224 
	#PCI_DEVICE_ID_ATI_215_LG
 0x4c47

	)

225 
	#PCI_DEVICE_ID_ATI_215_LI
 0x4c49

	)

226 
	#PCI_DEVICE_ID_ATI_215_LM
 0x4c4D

	)

227 
	#PCI_DEVICE_ID_ATI_215_LN
 0x4c4E

	)

228 
	#PCI_DEVICE_ID_ATI_215_LR
 0x4c52

	)

229 
	#PCI_DEVICE_ID_ATI_215_LS
 0x4c53

	)

230 
	#PCI_DEVICE_ID_ATI_264_LT
 0x4c54

	)

232 
	#PCI_DEVICE_ID_ATI_264VT
 0x5654

	)

233 
	#PCI_DEVICE_ID_ATI_264VU
 0x5655

	)

234 
	#PCI_DEVICE_ID_ATI_264VV
 0x5656

	)

236 
	#PCI_DEVICE_ID_ATI_RAGE128_RE
 0x5245

	)

237 
	#PCI_DEVICE_ID_ATI_RAGE128_RF
 0x5246

	)

238 
	#PCI_DEVICE_ID_ATI_RAGE128_RG
 0x5247

	)

240 
	#PCI_DEVICE_ID_ATI_RAGE128_RK
 0x524b

	)

241 
	#PCI_DEVICE_ID_ATI_RAGE128_RL
 0x524c

	)

242 
	#PCI_DEVICE_ID_ATI_RAGE128_SE
 0x5345

	)

243 
	#PCI_DEVICE_ID_ATI_RAGE128_SF
 0x5346

	)

244 
	#PCI_DEVICE_ID_ATI_RAGE128_SG
 0x5347

	)

245 
	#PCI_DEVICE_ID_ATI_RAGE128_SH
 0x5348

	)

246 
	#PCI_DEVICE_ID_ATI_RAGE128_SK
 0x534b

	)

247 
	#PCI_DEVICE_ID_ATI_RAGE128_SL
 0x534c

	)

248 
	#PCI_DEVICE_ID_ATI_RAGE128_SM
 0x534d

	)

249 
	#PCI_DEVICE_ID_ATI_RAGE128_SN
 0x534e

	)

251 
	#PCI_DEVICE_ID_ATI_RAGE128_TF
 0x5446

	)

252 
	#PCI_DEVICE_ID_ATI_RAGE128_TL
 0x544c

	)

253 
	#PCI_DEVICE_ID_ATI_RAGE128_TR
 0x5452

	)

254 
	#PCI_DEVICE_ID_ATI_RAGE128_TS
 0x5453

	)

255 
	#PCI_DEVICE_ID_ATI_RAGE128_TT
 0x5454

	)

256 
	#PCI_DEVICE_ID_ATI_RAGE128_TU
 0x5455

	)

258 
	#PCI_DEVICE_ID_ATI_RAGE128_LE
 0x4c45

	)

259 
	#PCI_DEVICE_ID_ATI_RAGE128_LF
 0x4c46

	)

261 
	#PCI_DEVICE_ID_ATI_RAGE128_MF
 0x4d46

	)

262 
	#PCI_DEVICE_ID_ATI_RAGE128_ML
 0x4d4c

	)

264 
	#PCI_DEVICE_ID_ATI_RAGE128_PA
 0x5041

	)

265 
	#PCI_DEVICE_ID_ATI_RAGE128_PB
 0x5042

	)

266 
	#PCI_DEVICE_ID_ATI_RAGE128_PC
 0x5043

	)

267 
	#PCI_DEVICE_ID_ATI_RAGE128_PD
 0x5044

	)

268 
	#PCI_DEVICE_ID_ATI_RAGE128_PE
 0x5045

	)

269 
	#PCI_DEVICE_ID_ATI_RAGE128_PF
 0x5046

	)

271 
	#PCI_DEVICE_ID_ATI_RAGE128_PG
 0x5047

	)

272 
	#PCI_DEVICE_ID_ATI_RAGE128_PH
 0x5048

	)

273 
	#PCI_DEVICE_ID_ATI_RAGE128_PI
 0x5049

	)

274 
	#PCI_DEVICE_ID_ATI_RAGE128_PJ
 0x504A

	)

275 
	#PCI_DEVICE_ID_ATI_RAGE128_PK
 0x504B

	)

276 
	#PCI_DEVICE_ID_ATI_RAGE128_PL
 0x504C

	)

277 
	#PCI_DEVICE_ID_ATI_RAGE128_PM
 0x504D

	)

278 
	#PCI_DEVICE_ID_ATI_RAGE128_PN
 0x504E

	)

279 
	#PCI_DEVICE_ID_ATI_RAGE128_PO
 0x504F

	)

280 
	#PCI_DEVICE_ID_ATI_RAGE128_PP
 0x5050

	)

281 
	#PCI_DEVICE_ID_ATI_RAGE128_PQ
 0x5051

	)

282 
	#PCI_DEVICE_ID_ATI_RAGE128_PR
 0x5052

	)

283 
	#PCI_DEVICE_ID_ATI_RAGE128_PS
 0x5053

	)

284 
	#PCI_DEVICE_ID_ATI_RAGE128_PT
 0x5054

	)

285 
	#PCI_DEVICE_ID_ATI_RAGE128_PU
 0x5055

	)

286 
	#PCI_DEVICE_ID_ATI_RAGE128_PV
 0x5056

	)

287 
	#PCI_DEVICE_ID_ATI_RAGE128_PW
 0x5057

	)

288 
	#PCI_DEVICE_ID_ATI_RAGE128_PX
 0x5058

	)

291 
	#PCI_DEVICE_ID_ATI_RADEON_QD
 0x5144

	)

292 
	#PCI_DEVICE_ID_ATI_RADEON_QE
 0x5145

	)

293 
	#PCI_DEVICE_ID_ATI_RADEON_QF
 0x5146

	)

294 
	#PCI_DEVICE_ID_ATI_RADEON_QG
 0x5147

	)

296 
	#PCI_DEVICE_ID_ATI_RADEON_QY
 0x5159

	)

297 
	#PCI_DEVICE_ID_ATI_RADEON_QZ
 0x515a

	)

299 
	#PCI_DEVICE_ID_ATI_RADEON_QL
 0x514c

	)

300 
	#PCI_DEVICE_ID_ATI_RADEON_QN
 0x514e

	)

301 
	#PCI_DEVICE_ID_ATI_RADEON_QO
 0x514f

	)

302 
	#PCI_DEVICE_ID_ATI_RADEON_Ql
 0x516c

	)

303 
	#PCI_DEVICE_ID_ATI_RADEON_BB
 0x4242

	)

305 
	#PCI_DEVICE_ID_ATI_RADEON_QM
 0x514d

	)

307 
	#PCI_DEVICE_ID_ATI_RADEON_QW
 0x5157

	)

308 
	#PCI_DEVICE_ID_ATI_RADEON_QX
 0x5158

	)

311 
	#PCI_DEVICE_ID_ATI_RADEON_Id
 0x4964

	)

312 
	#PCI_DEVICE_ID_ATI_RADEON_Ie
 0x4965

	)

313 
	#PCI_DEVICE_ID_ATI_RADEON_If
 0x4966

	)

314 
	#PCI_DEVICE_ID_ATI_RADEON_Ig
 0x4967

	)

316 
	#PCI_DEVICE_ID_ATI_RADEON_Ya
 0x5961

	)

317 
	#PCI_DEVICE_ID_ATI_RADEON_Yd
 0x5964

	)

320 
	#PCI_DEVICE_ID_ATI_RADEON_ND
 0x4e44

	)

321 
	#PCI_DEVICE_ID_ATI_RADEON_NE
 0x4e45

	)

322 
	#PCI_DEVICE_ID_ATI_RADEON_NF
 0x4e46

	)

323 
	#PCI_DEVICE_ID_ATI_RADEON_NG
 0x4e47

	)

327 
	#PCI_DEVICE_ID_ATI_RADEON_LY
 0x4c59

	)

328 
	#PCI_DEVICE_ID_ATI_RADEON_LZ
 0x4c5a

	)

330 
	#PCI_DEVICE_ID_ATI_RADEON_LW
 0x4c57

	)

331 
	#PCI_DEVICE_ID_ATI_RADEON_LX
 0x4c58

	)

333 
	#PCI_DEVICE_ID_ATI_RADEON_Ld
 0x4c64

	)

334 
	#PCI_DEVICE_ID_ATI_RADEON_Le
 0x4c65

	)

335 
	#PCI_DEVICE_ID_ATI_RADEON_Lf
 0x4c66

	)

336 
	#PCI_DEVICE_ID_ATI_RADEON_Lg
 0x4c67

	)

339 
	#PCI_DEVICE_ID_ATI_RS100
 0xˇb0

	)

340 
	#PCI_DEVICE_ID_ATI_RS200
 0xˇb2

	)

341 
	#PCI_DEVICE_ID_ATI_RS200_B
 0xcbb2

	)

342 
	#PCI_DEVICE_ID_ATI_RS250
 0xˇb3

	)

343 
	#PCI_DEVICE_ID_ATI_RS300_100
 0x5830

	)

344 
	#PCI_DEVICE_ID_ATI_RS300_133
 0x5831

	)

345 
	#PCI_DEVICE_ID_ATI_RS300_166
 0x5832

	)

346 
	#PCI_DEVICE_ID_ATI_RS300_200
 0x5833

	)

347 
	#PCI_DEVICE_ID_ATI_RS350_100
 0x7830

	)

348 
	#PCI_DEVICE_ID_ATI_RS350_133
 0x7831

	)

349 
	#PCI_DEVICE_ID_ATI_RS350_166
 0x7832

	)

350 
	#PCI_DEVICE_ID_ATI_RS350_200
 0x7833

	)

351 
	#PCI_DEVICE_ID_ATI_RS400_100
 0x5a30

	)

352 
	#PCI_DEVICE_ID_ATI_RS400_133
 0x5a31

	)

353 
	#PCI_DEVICE_ID_ATI_RS400_166
 0x5a32

	)

354 
	#PCI_DEVICE_ID_ATI_RS400_200
 0x5a33

	)

355 
	#PCI_DEVICE_ID_ATI_RS480
 0x5950

	)

357 
	#PCI_DEVICE_ID_ATI_IXP200_IDE
 0x4349

	)

358 
	#PCI_DEVICE_ID_ATI_IXP200_SMBUS
 0x4353

	)

359 
	#PCI_DEVICE_ID_ATI_IXP300_SMBUS
 0x4363

	)

360 
	#PCI_DEVICE_ID_ATI_IXP300_IDE
 0x4369

	)

361 
	#PCI_DEVICE_ID_ATI_IXP300_SATA
 0x436e

	)

362 
	#PCI_DEVICE_ID_ATI_IXP400_SMBUS
 0x4372

	)

363 
	#PCI_DEVICE_ID_ATI_IXP400_IDE
 0x4376

	)

364 
	#PCI_DEVICE_ID_ATI_IXP400_SATA
 0x4379

	)

365 
	#PCI_DEVICE_ID_ATI_IXP400_SATA2
 0x437a

	)

366 
	#PCI_DEVICE_ID_ATI_IXP600_SATA
 0x4380

	)

367 
	#PCI_DEVICE_ID_ATI_SBX00_SMBUS
 0x4385

	)

368 
	#PCI_DEVICE_ID_ATI_IXP600_IDE
 0x438c

	)

369 
	#PCI_DEVICE_ID_ATI_IXP700_SATA
 0x4390

	)

370 
	#PCI_DEVICE_ID_ATI_IXP700_IDE
 0x439c

	)

372 
	#PCI_VENDOR_ID_VLSI
 0x1004

	)

373 
	#PCI_DEVICE_ID_VLSI_82C592
 0x0005

	)

374 
	#PCI_DEVICE_ID_VLSI_82C593
 0x0006

	)

375 
	#PCI_DEVICE_ID_VLSI_82C594
 0x0007

	)

376 
	#PCI_DEVICE_ID_VLSI_82C597
 0x0009

	)

377 
	#PCI_DEVICE_ID_VLSI_82C541
 0x000c

	)

378 
	#PCI_DEVICE_ID_VLSI_82C543
 0x000d

	)

379 
	#PCI_DEVICE_ID_VLSI_82C532
 0x0101

	)

380 
	#PCI_DEVICE_ID_VLSI_82C534
 0x0102

	)

381 
	#PCI_DEVICE_ID_VLSI_82C535
 0x0104

	)

382 
	#PCI_DEVICE_ID_VLSI_82C147
 0x0105

	)

383 
	#PCI_DEVICE_ID_VLSI_VAS96011
 0x0702

	)

386 
	#PCI_DEVICE_ID_RD890_IOMMU
 0x5a23

	)

388 
	#PCI_VENDOR_ID_ADL
 0x1005

	)

389 
	#PCI_DEVICE_ID_ADL_2301
 0x2301

	)

391 
	#PCI_VENDOR_ID_NS
 0x100b

	)

392 
	#PCI_DEVICE_ID_NS_87415
 0x0002

	)

393 
	#PCI_DEVICE_ID_NS_87560_LIO
 0x000e

	)

394 
	#PCI_DEVICE_ID_NS_87560_USB
 0x0012

	)

395 
	#PCI_DEVICE_ID_NS_83815
 0x0020

	)

396 
	#PCI_DEVICE_ID_NS_83820
 0x0022

	)

397 
	#PCI_DEVICE_ID_NS_CS5535_ISA
 0x002b

	)

398 
	#PCI_DEVICE_ID_NS_CS5535_IDE
 0x002d

	)

399 
	#PCI_DEVICE_ID_NS_CS5535_AUDIO
 0x002e

	)

400 
	#PCI_DEVICE_ID_NS_CS5535_USB
 0x002f

	)

401 
	#PCI_DEVICE_ID_NS_GX_VIDEO
 0x0030

	)

402 
	#PCI_DEVICE_ID_NS_SATURN
 0x0035

	)

403 
	#PCI_DEVICE_ID_NS_SCx200_BRIDGE
 0x0500

	)

404 
	#PCI_DEVICE_ID_NS_SCx200_SMI
 0x0501

	)

405 
	#PCI_DEVICE_ID_NS_SCx200_IDE
 0x0502

	)

406 
	#PCI_DEVICE_ID_NS_SCx200_AUDIO
 0x0503

	)

407 
	#PCI_DEVICE_ID_NS_SCx200_VIDEO
 0x0504

	)

408 
	#PCI_DEVICE_ID_NS_SCx200_XBUS
 0x0505

	)

409 
	#PCI_DEVICE_ID_NS_SC1100_BRIDGE
 0x0510

	)

410 
	#PCI_DEVICE_ID_NS_SC1100_SMI
 0x0511

	)

411 
	#PCI_DEVICE_ID_NS_SC1100_XBUS
 0x0515

	)

412 
	#PCI_DEVICE_ID_NS_87410
 0xd001

	)

414 
	#PCI_DEVICE_ID_NS_GX_HOST_BRIDGE
 0x0028

	)

416 
	#PCI_VENDOR_ID_TSENG
 0x100c

	)

417 
	#PCI_DEVICE_ID_TSENG_W32P_2
 0x3202

	)

418 
	#PCI_DEVICE_ID_TSENG_W32P_b
 0x3205

	)

419 
	#PCI_DEVICE_ID_TSENG_W32P_c
 0x3206

	)

420 
	#PCI_DEVICE_ID_TSENG_W32P_d
 0x3207

	)

421 
	#PCI_DEVICE_ID_TSENG_ET6000
 0x3208

	)

423 
	#PCI_VENDOR_ID_WEITEK
 0x100e

	)

424 
	#PCI_DEVICE_ID_WEITEK_P9000
 0x9001

	)

425 
	#PCI_DEVICE_ID_WEITEK_P9100
 0x9100

	)

427 
	#PCI_VENDOR_ID_DEC
 0x1011

	)

428 
	#PCI_DEVICE_ID_DEC_BRD
 0x0001

	)

429 
	#PCI_DEVICE_ID_DEC_TULIP
 0x0002

	)

430 
	#PCI_DEVICE_ID_DEC_TGA
 0x0004

	)

431 
	#PCI_DEVICE_ID_DEC_TULIP_FAST
 0x0009

	)

432 
	#PCI_DEVICE_ID_DEC_TGA2
 0x000D

	)

433 
	#PCI_DEVICE_ID_DEC_FDDI
 0x000F

	)

434 
	#PCI_DEVICE_ID_DEC_TULIP_PLUS
 0x0014

	)

435 
	#PCI_DEVICE_ID_DEC_21142
 0x0019

	)

436 
	#PCI_DEVICE_ID_DEC_21052
 0x0021

	)

437 
	#PCI_DEVICE_ID_DEC_21150
 0x0022

	)

438 
	#PCI_DEVICE_ID_DEC_21152
 0x0024

	)

439 
	#PCI_DEVICE_ID_DEC_21153
 0x0025

	)

440 
	#PCI_DEVICE_ID_DEC_21154
 0x0026

	)

441 
	#PCI_DEVICE_ID_DEC_21285
 0x1065

	)

442 
	#PCI_DEVICE_ID_COMPAQ_42XX
 0x0046

	)

444 
	#PCI_VENDOR_ID_CIRRUS
 0x1013

	)

445 
	#PCI_DEVICE_ID_CIRRUS_7548
 0x0038

	)

446 
	#PCI_DEVICE_ID_CIRRUS_5430
 0x00a0

	)

447 
	#PCI_DEVICE_ID_CIRRUS_5434_4
 0x00a4

	)

448 
	#PCI_DEVICE_ID_CIRRUS_5434_8
 0x00a8

	)

449 
	#PCI_DEVICE_ID_CIRRUS_5436
 0x00ac

	)

450 
	#PCI_DEVICE_ID_CIRRUS_5446
 0x00b8

	)

451 
	#PCI_DEVICE_ID_CIRRUS_5480
 0x00bc

	)

452 
	#PCI_DEVICE_ID_CIRRUS_5462
 0x00d0

	)

453 
	#PCI_DEVICE_ID_CIRRUS_5464
 0x00d4

	)

454 
	#PCI_DEVICE_ID_CIRRUS_5465
 0x00d6

	)

455 
	#PCI_DEVICE_ID_CIRRUS_6729
 0x1100

	)

456 
	#PCI_DEVICE_ID_CIRRUS_6832
 0x1110

	)

457 
	#PCI_DEVICE_ID_CIRRUS_7543
 0x1202

	)

458 
	#PCI_DEVICE_ID_CIRRUS_4610
 0x6001

	)

459 
	#PCI_DEVICE_ID_CIRRUS_4612
 0x6003

	)

460 
	#PCI_DEVICE_ID_CIRRUS_4615
 0x6004

	)

462 
	#PCI_VENDOR_ID_IBM
 0x1014

	)

463 
	#PCI_DEVICE_ID_IBM_TR
 0x0018

	)

464 
	#PCI_DEVICE_ID_IBM_TR_WAKE
 0x003e

	)

465 
	#PCI_DEVICE_ID_IBM_CPC710_PCI64
 0x00fc

	)

466 
	#PCI_DEVICE_ID_IBM_SNIPE
 0x0180

	)

467 
	#PCI_DEVICE_ID_IBM_CITRINE
 0x028C

	)

468 
	#PCI_DEVICE_ID_IBM_GEMSTONE
 0xB166

	)

469 
	#PCI_DEVICE_ID_IBM_OBSIDIAN
 0x02BD

	)

470 
	#PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1
 0x0031

	)

471 
	#PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2
 0x0219

	)

472 
	#PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX
 0x021A

	)

473 
	#PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM
 0x0251

	)

474 
	#PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL
 0x252

	)

475 
	#PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM_PCIE
 0x0361

	)

476 
	#PCI_SUBVENDOR_ID_IBM
 0x1014

	)

477 
	#PCI_SUBDEVICE_ID_IBM_SATURN_SERIAL_ONE_PORT
 0x03d4

	)

479 
	#PCI_VENDOR_ID_UNISYS
 0x1018

	)

480 
	#PCI_DEVICE_ID_UNISYS_DMA_DIRECTOR
 0x001C

	)

482 
	#PCI_VENDOR_ID_COMPEX2
 0x101®

	)

483 
	#PCI_DEVICE_ID_COMPEX2_100VG
 0x0005

	)

485 
	#PCI_VENDOR_ID_WD
 0x101c

	)

486 
	#PCI_DEVICE_ID_WD_90C
 0xc24a

	)

488 
	#PCI_VENDOR_ID_AMI
 0x101e

	)

489 
	#PCI_DEVICE_ID_AMI_MEGARAID3
 0x1960

	)

490 
	#PCI_DEVICE_ID_AMI_MEGARAID
 0x9010

	)

491 
	#PCI_DEVICE_ID_AMI_MEGARAID2
 0x9060

	)

493 
	#PCI_VENDOR_ID_AMD
 0x1022

	)

494 
	#PCI_DEVICE_ID_AMD_K8_NB
 0x1100

	)

495 
	#PCI_DEVICE_ID_AMD_K8_NB_MISC
 0x1103

	)

496 
	#PCI_DEVICE_ID_AMD_10H_NB_HT
 0x1200

	)

497 
	#PCI_DEVICE_ID_AMD_10H_NB_MAP
 0x1201

	)

498 
	#PCI_DEVICE_ID_AMD_10H_NB_DRAM
 0x1202

	)

499 
	#PCI_DEVICE_ID_AMD_10H_NB_MISC
 0x1203

	)

500 
	#PCI_DEVICE_ID_AMD_10H_NB_LINK
 0x1204

	)

501 
	#PCI_DEVICE_ID_AMD_11H_NB_HT
 0x1300

	)

502 
	#PCI_DEVICE_ID_AMD_11H_NB_MAP
 0x1301

	)

503 
	#PCI_DEVICE_ID_AMD_11H_NB_DRAM
 0x1302

	)

504 
	#PCI_DEVICE_ID_AMD_11H_NB_MISC
 0x1303

	)

505 
	#PCI_DEVICE_ID_AMD_11H_NB_LINK
 0x1304

	)

506 
	#PCI_DEVICE_ID_AMD_LANCE
 0x2000

	)

507 
	#PCI_DEVICE_ID_AMD_LANCE_HOME
 0x2001

	)

508 
	#PCI_DEVICE_ID_AMD_SCSI
 0x2020

	)

509 
	#PCI_DEVICE_ID_AMD_SERENADE
 0x36c0

	)

510 
	#PCI_DEVICE_ID_AMD_FE_GATE_7006
 0x7006

	)

511 
	#PCI_DEVICE_ID_AMD_FE_GATE_7007
 0x7007

	)

512 
	#PCI_DEVICE_ID_AMD_FE_GATE_700C
 0x700C

	)

513 
	#PCI_DEVICE_ID_AMD_FE_GATE_700E
 0x700E

	)

514 
	#PCI_DEVICE_ID_AMD_COBRA_7401
 0x7401

	)

515 
	#PCI_DEVICE_ID_AMD_VIPER_7409
 0x7409

	)

516 
	#PCI_DEVICE_ID_AMD_VIPER_740B
 0x740B

	)

517 
	#PCI_DEVICE_ID_AMD_VIPER_7410
 0x7410

	)

518 
	#PCI_DEVICE_ID_AMD_VIPER_7411
 0x7411

	)

519 
	#PCI_DEVICE_ID_AMD_VIPER_7413
 0x7413

	)

520 
	#PCI_DEVICE_ID_AMD_VIPER_7440
 0x7440

	)

521 
	#PCI_DEVICE_ID_AMD_OPUS_7441
 0x7441

	)

522 
	#PCI_DEVICE_ID_AMD_OPUS_7443
 0x7443

	)

523 
	#PCI_DEVICE_ID_AMD_VIPER_7443
 0x7443

	)

524 
	#PCI_DEVICE_ID_AMD_OPUS_7445
 0x7445

	)

525 
	#PCI_DEVICE_ID_AMD_8111_LPC
 0x7468

	)

526 
	#PCI_DEVICE_ID_AMD_8111_IDE
 0x7469

	)

527 
	#PCI_DEVICE_ID_AMD_8111_SMBUS2
 0x746a

	)

528 
	#PCI_DEVICE_ID_AMD_8111_SMBUS
 0x746b

	)

529 
	#PCI_DEVICE_ID_AMD_8111_AUDIO
 0x746d

	)

530 
	#PCI_DEVICE_ID_AMD_8151_0
 0x7454

	)

531 
	#PCI_DEVICE_ID_AMD_8131_BRIDGE
 0x7450

	)

532 
	#PCI_DEVICE_ID_AMD_8131_APIC
 0x7451

	)

533 
	#PCI_DEVICE_ID_AMD_8132_BRIDGE
 0x7458

	)

534 
	#PCI_DEVICE_ID_AMD_HUDSON2_SMBUS
 0x780b

	)

535 
	#PCI_DEVICE_ID_AMD_CS5536_ISA
 0x2090

	)

536 
	#PCI_DEVICE_ID_AMD_CS5536_FLASH
 0x2091

	)

537 
	#PCI_DEVICE_ID_AMD_CS5536_AUDIO
 0x2093

	)

538 
	#PCI_DEVICE_ID_AMD_CS5536_OHC
 0x2094

	)

539 
	#PCI_DEVICE_ID_AMD_CS5536_EHC
 0x2095

	)

540 
	#PCI_DEVICE_ID_AMD_CS5536_UDC
 0x2096

	)

541 
	#PCI_DEVICE_ID_AMD_CS5536_UOC
 0x2097

	)

542 
	#PCI_DEVICE_ID_AMD_CS5536_IDE
 0x209A

	)

543 
	#PCI_DEVICE_ID_AMD_LX_VIDEO
 0x2081

	)

544 
	#PCI_DEVICE_ID_AMD_LX_AES
 0x2082

	)

545 
	#PCI_DEVICE_ID_AMD_HUDSON2_IDE
 0x780c

	)

546 
	#PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE
 0x7800

	)

548 
	#PCI_VENDOR_ID_TRIDENT
 0x1023

	)

549 
	#PCI_DEVICE_ID_TRIDENT_4DWAVE_DX
 0x2000

	)

550 
	#PCI_DEVICE_ID_TRIDENT_4DWAVE_NX
 0x2001

	)

551 
	#PCI_DEVICE_ID_TRIDENT_9320
 0x9320

	)

552 
	#PCI_DEVICE_ID_TRIDENT_9388
 0x9388

	)

553 
	#PCI_DEVICE_ID_TRIDENT_9397
 0x9397

	)

554 
	#PCI_DEVICE_ID_TRIDENT_939A
 0x939A

	)

555 
	#PCI_DEVICE_ID_TRIDENT_9520
 0x9520

	)

556 
	#PCI_DEVICE_ID_TRIDENT_9525
 0x9525

	)

557 
	#PCI_DEVICE_ID_TRIDENT_9420
 0x9420

	)

558 
	#PCI_DEVICE_ID_TRIDENT_9440
 0x9440

	)

559 
	#PCI_DEVICE_ID_TRIDENT_9660
 0x9660

	)

560 
	#PCI_DEVICE_ID_TRIDENT_9750
 0x9750

	)

561 
	#PCI_DEVICE_ID_TRIDENT_9850
 0x9850

	)

562 
	#PCI_DEVICE_ID_TRIDENT_9880
 0x9880

	)

563 
	#PCI_DEVICE_ID_TRIDENT_8400
 0x8400

	)

564 
	#PCI_DEVICE_ID_TRIDENT_8420
 0x8420

	)

565 
	#PCI_DEVICE_ID_TRIDENT_8500
 0x8500

	)

567 
	#PCI_VENDOR_ID_AI
 0x1025

	)

568 
	#PCI_DEVICE_ID_AI_M1435
 0x1435

	)

570 
	#PCI_VENDOR_ID_DELL
 0x1028

	)

571 
	#PCI_DEVICE_ID_DELL_RACIII
 0x0008

	)

572 
	#PCI_DEVICE_ID_DELL_RAC4
 0x0012

	)

573 
	#PCI_DEVICE_ID_DELL_PERC5
 0x0015

	)

575 
	#PCI_VENDOR_ID_MATROX
 0x102B

	)

576 
	#PCI_DEVICE_ID_MATROX_MGA_2
 0x0518

	)

577 
	#PCI_DEVICE_ID_MATROX_MIL
 0x0519

	)

578 
	#PCI_DEVICE_ID_MATROX_MYS
 0x051A

	)

579 
	#PCI_DEVICE_ID_MATROX_MIL_2
 0x051b

	)

580 
	#PCI_DEVICE_ID_MATROX_MYS_AGP
 0x051e

	)

581 
	#PCI_DEVICE_ID_MATROX_MIL_2_AGP
 0x051f

	)

582 
	#PCI_DEVICE_ID_MATROX_MGA_IMP
 0x0d10

	)

583 
	#PCI_DEVICE_ID_MATROX_G100_MM
 0x1000

	)

584 
	#PCI_DEVICE_ID_MATROX_G100_AGP
 0x1001

	)

585 
	#PCI_DEVICE_ID_MATROX_G200_PCI
 0x0520

	)

586 
	#PCI_DEVICE_ID_MATROX_G200_AGP
 0x0521

	)

587 
	#PCI_DEVICE_ID_MATROX_G400
 0x0525

	)

588 
	#PCI_DEVICE_ID_MATROX_G550
 0x2527

	)

589 
	#PCI_DEVICE_ID_MATROX_VIA
 0x4536

	)

591 
	#PCI_VENDOR_ID_CT
 0x102c

	)

592 
	#PCI_DEVICE_ID_CT_69000
 0x00c0

	)

593 
	#PCI_DEVICE_ID_CT_65545
 0x00d8

	)

594 
	#PCI_DEVICE_ID_CT_65548
 0x00dc

	)

595 
	#PCI_DEVICE_ID_CT_65550
 0x00e0

	)

596 
	#PCI_DEVICE_ID_CT_65554
 0x00e4

	)

597 
	#PCI_DEVICE_ID_CT_65555
 0x00e5

	)

599 
	#PCI_VENDOR_ID_MIRO
 0x1031

	)

600 
	#PCI_DEVICE_ID_MIRO_36050
 0x5601

	)

601 
	#PCI_DEVICE_ID_MIRO_DC10PLUS
 0x7e„

	)

602 
	#PCI_DEVICE_ID_MIRO_DC30PLUS
 0xd801

	)

604 
	#PCI_VENDOR_ID_NEC
 0x1033

	)

605 
	#PCI_DEVICE_ID_NEC_CBUS_1
 0x0001

	)

606 
	#PCI_DEVICE_ID_NEC_LOCAL
 0x0002

	)

607 
	#PCI_DEVICE_ID_NEC_ATM
 0x0003

	)

608 
	#PCI_DEVICE_ID_NEC_R4000
 0x0004

	)

609 
	#PCI_DEVICE_ID_NEC_486
 0x0005

	)

610 
	#PCI_DEVICE_ID_NEC_ACCEL_1
 0x0006

	)

611 
	#PCI_DEVICE_ID_NEC_UXBUS
 0x0007

	)

612 
	#PCI_DEVICE_ID_NEC_ACCEL_2
 0x0008

	)

613 
	#PCI_DEVICE_ID_NEC_GRAPH
 0x0009

	)

614 
	#PCI_DEVICE_ID_NEC_VL
 0x0016

	)

615 
	#PCI_DEVICE_ID_NEC_STARALPHA2
 0x002¯

	)

616 
	#PCI_DEVICE_ID_NEC_CBUS_2
 0x002d

	)

617 
	#PCI_DEVICE_ID_NEC_USB
 0x0035

	)

618 
	#PCI_DEVICE_ID_NEC_CBUS_3
 0x003b

	)

619 
	#PCI_DEVICE_ID_NEC_NAPCCARD
 0x003e

	)

620 
	#PCI_DEVICE_ID_NEC_PCX2
 0x0046

	)

621 
	#PCI_DEVICE_ID_NEC_NILE4
 0x005a

	)

622 
	#PCI_DEVICE_ID_NEC_VRC5476
 0x009b

	)

623 
	#PCI_DEVICE_ID_NEC_VRC4173
 0x00a5

	)

624 
	#PCI_DEVICE_ID_NEC_VRC5477_AC97
 0x00a6

	)

625 
	#PCI_DEVICE_ID_NEC_PC9821CS01
 0x800¯

	)

626 
	#PCI_DEVICE_ID_NEC_PC9821NRB06
 0x800d

	)

628 
	#PCI_VENDOR_ID_FD
 0x1036

	)

629 
	#PCI_DEVICE_ID_FD_36C70
 0x0000

	)

631 
	#PCI_VENDOR_ID_SI
 0x1039

	)

632 
	#PCI_DEVICE_ID_SI_5591_AGP
 0x0001

	)

633 
	#PCI_DEVICE_ID_SI_6202
 0x0002

	)

634 
	#PCI_DEVICE_ID_SI_503
 0x0008

	)

635 
	#PCI_DEVICE_ID_SI_ACPI
 0x0009

	)

636 
	#PCI_DEVICE_ID_SI_SMBUS
 0x0016

	)

637 
	#PCI_DEVICE_ID_SI_LPC
 0x0018

	)

638 
	#PCI_DEVICE_ID_SI_5597_VGA
 0x0200

	)

639 
	#PCI_DEVICE_ID_SI_6205
 0x0205

	)

640 
	#PCI_DEVICE_ID_SI_501
 0x0406

	)

641 
	#PCI_DEVICE_ID_SI_496
 0x0496

	)

642 
	#PCI_DEVICE_ID_SI_300
 0x0300

	)

643 
	#PCI_DEVICE_ID_SI_315H
 0x0310

	)

644 
	#PCI_DEVICE_ID_SI_315
 0x0315

	)

645 
	#PCI_DEVICE_ID_SI_315PRO
 0x0325

	)

646 
	#PCI_DEVICE_ID_SI_530
 0x0530

	)

647 
	#PCI_DEVICE_ID_SI_540
 0x0540

	)

648 
	#PCI_DEVICE_ID_SI_550
 0x0550

	)

649 
	#PCI_DEVICE_ID_SI_540_VGA
 0x5300

	)

650 
	#PCI_DEVICE_ID_SI_550_VGA
 0x5315

	)

651 
	#PCI_DEVICE_ID_SI_620
 0x0620

	)

652 
	#PCI_DEVICE_ID_SI_630
 0x0630

	)

653 
	#PCI_DEVICE_ID_SI_633
 0x0633

	)

654 
	#PCI_DEVICE_ID_SI_635
 0x0635

	)

655 
	#PCI_DEVICE_ID_SI_640
 0x0640

	)

656 
	#PCI_DEVICE_ID_SI_645
 0x0645

	)

657 
	#PCI_DEVICE_ID_SI_646
 0x0646

	)

658 
	#PCI_DEVICE_ID_SI_648
 0x0648

	)

659 
	#PCI_DEVICE_ID_SI_650
 0x0650

	)

660 
	#PCI_DEVICE_ID_SI_651
 0x0651

	)

661 
	#PCI_DEVICE_ID_SI_655
 0x0655

	)

662 
	#PCI_DEVICE_ID_SI_661
 0x0661

	)

663 
	#PCI_DEVICE_ID_SI_730
 0x0730

	)

664 
	#PCI_DEVICE_ID_SI_733
 0x0733

	)

665 
	#PCI_DEVICE_ID_SI_630_VGA
 0x6300

	)

666 
	#PCI_DEVICE_ID_SI_735
 0x0735

	)

667 
	#PCI_DEVICE_ID_SI_740
 0x0740

	)

668 
	#PCI_DEVICE_ID_SI_741
 0x0741

	)

669 
	#PCI_DEVICE_ID_SI_745
 0x0745

	)

670 
	#PCI_DEVICE_ID_SI_746
 0x0746

	)

671 
	#PCI_DEVICE_ID_SI_755
 0x0755

	)

672 
	#PCI_DEVICE_ID_SI_760
 0x0760

	)

673 
	#PCI_DEVICE_ID_SI_900
 0x0900

	)

674 
	#PCI_DEVICE_ID_SI_961
 0x0961

	)

675 
	#PCI_DEVICE_ID_SI_962
 0x0962

	)

676 
	#PCI_DEVICE_ID_SI_963
 0x0963

	)

677 
	#PCI_DEVICE_ID_SI_965
 0x0965

	)

678 
	#PCI_DEVICE_ID_SI_966
 0x0966

	)

679 
	#PCI_DEVICE_ID_SI_968
 0x0968

	)

680 
	#PCI_DEVICE_ID_SI_5511
 0x5511

	)

681 
	#PCI_DEVICE_ID_SI_5513
 0x5513

	)

682 
	#PCI_DEVICE_ID_SI_5517
 0x5517

	)

683 
	#PCI_DEVICE_ID_SI_5518
 0x5518

	)

684 
	#PCI_DEVICE_ID_SI_5571
 0x5571

	)

685 
	#PCI_DEVICE_ID_SI_5581
 0x5581

	)

686 
	#PCI_DEVICE_ID_SI_5582
 0x5582

	)

687 
	#PCI_DEVICE_ID_SI_5591
 0x5591

	)

688 
	#PCI_DEVICE_ID_SI_5596
 0x5596

	)

689 
	#PCI_DEVICE_ID_SI_5597
 0x5597

	)

690 
	#PCI_DEVICE_ID_SI_5598
 0x5598

	)

691 
	#PCI_DEVICE_ID_SI_5600
 0x5600

	)

692 
	#PCI_DEVICE_ID_SI_7012
 0x7012

	)

693 
	#PCI_DEVICE_ID_SI_7013
 0x7013

	)

694 
	#PCI_DEVICE_ID_SI_7016
 0x7016

	)

695 
	#PCI_DEVICE_ID_SI_7018
 0x7018

	)

697 
	#PCI_VENDOR_ID_ATTANSIC
 0x1969

	)

698 
	#PCI_DEVICE_ID_ATTANSIC_L1
 0x1048

	)

699 
	#PCI_DEVICE_ID_ATTANSIC_L2
 0x2048

	)

701 
	#PCI_VENDOR_ID_HP
 0x103c

	)

702 
	#PCI_DEVICE_ID_HP_VISUALIZE_EG
 0x1005

	)

703 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX6
 0x1006

	)

704 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX4
 0x1008

	)

705 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX2
 0x100a

	)

706 
	#PCI_DEVICE_ID_HP_TACHYON
 0x1028

	)

707 
	#PCI_DEVICE_ID_HP_TACHLITE
 0x1029

	)

708 
	#PCI_DEVICE_ID_HP_J2585A
 0x1030

	)

709 
	#PCI_DEVICE_ID_HP_J2585B
 0x1031

	)

710 
	#PCI_DEVICE_ID_HP_J2973A
 0x1040

	)

711 
	#PCI_DEVICE_ID_HP_J2970A
 0x1042

	)

712 
	#PCI_DEVICE_ID_HP_DIVA
 0x1048

	)

713 
	#PCI_DEVICE_ID_HP_DIVA_TOSCA1
 0x1049

	)

714 
	#PCI_DEVICE_ID_HP_DIVA_TOSCA2
 0x104A

	)

715 
	#PCI_DEVICE_ID_HP_DIVA_MAESTRO
 0x104B

	)

716 
	#PCI_DEVICE_ID_HP_REO_IOC
 0x10f1

	)

717 
	#PCI_DEVICE_ID_HP_VISUALIZE_FXE
 0x108b

	)

718 
	#PCI_DEVICE_ID_HP_DIVA_HALFDOME
 0x1223

	)

719 
	#PCI_DEVICE_ID_HP_DIVA_KEYSTONE
 0x1226

	)

720 
	#PCI_DEVICE_ID_HP_DIVA_POWERBAR
 0x1227

	)

721 
	#PCI_DEVICE_ID_HP_ZX1_IOC
 0x122a

	)

722 
	#PCI_DEVICE_ID_HP_PCIX_LBA
 0x122e

	)

723 
	#PCI_DEVICE_ID_HP_SX1000_IOC
 0x127c

	)

724 
	#PCI_DEVICE_ID_HP_DIVA_EVEREST
 0x1282

	)

725 
	#PCI_DEVICE_ID_HP_DIVA_AUX
 0x1290

	)

726 
	#PCI_DEVICE_ID_HP_DIVA_RMP3
 0x1301

	)

727 
	#PCI_DEVICE_ID_HP_DIVA_HURRICANE
 0x132a

	)

728 
	#PCI_DEVICE_ID_HP_CISSA
 0x3220

	)

729 
	#PCI_DEVICE_ID_HP_CISSC
 0x3230

	)

730 
	#PCI_DEVICE_ID_HP_CISSD
 0x3238

	)

731 
	#PCI_DEVICE_ID_HP_CISSE
 0x323A

	)

732 
	#PCI_DEVICE_ID_HP_CISSF
 0x323B

	)

733 
	#PCI_DEVICE_ID_HP_ZX2_IOC
 0x4031

	)

735 
	#PCI_VENDOR_ID_PCTECH
 0x1042

	)

736 
	#PCI_DEVICE_ID_PCTECH_RZ1000
 0x1000

	)

737 
	#PCI_DEVICE_ID_PCTECH_RZ1001
 0x1001

	)

738 
	#PCI_DEVICE_ID_PCTECH_SAMURAI_IDE
 0x3020

	)

740 
	#PCI_VENDOR_ID_ASUSTEK
 0x1043

	)

741 
	#PCI_DEVICE_ID_ASUSTEK_0675
 0x0675

	)

743 
	#PCI_VENDOR_ID_DPT
 0x1044

	)

744 
	#PCI_DEVICE_ID_DPT
 0xa400

	)

746 
	#PCI_VENDOR_ID_OPTI
 0x1045

	)

747 
	#PCI_DEVICE_ID_OPTI_82C558
 0xc558

	)

748 
	#PCI_DEVICE_ID_OPTI_82C621
 0xc621

	)

749 
	#PCI_DEVICE_ID_OPTI_82C700
 0xc700

	)

750 
	#PCI_DEVICE_ID_OPTI_82C825
 0xd568

	)

752 
	#PCI_VENDOR_ID_ELSA
 0x1048

	)

753 
	#PCI_DEVICE_ID_ELSA_MICROLINK
 0x1000

	)

754 
	#PCI_DEVICE_ID_ELSA_QS3000
 0x3000

	)

757 
	#PCI_VENDOR_ID_BUSLOGIC
 0x104B

	)

758 
	#PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC
 0x0140

	)

759 
	#PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER
 0x1040

	)

760 
	#PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT
 0x8130

	)

762 
	#PCI_VENDOR_ID_TI
 0x104c

	)

763 
	#PCI_DEVICE_ID_TI_TVP4020
 0x3d07

	)

764 
	#PCI_DEVICE_ID_TI_4450
 0x8011

	)

765 
	#PCI_DEVICE_ID_TI_TSB43AB22
 0x8023

	)

766 
	#PCI_DEVICE_ID_TI_XX21_XX11
 0x8031

	)

767 
	#PCI_DEVICE_ID_TI_XX21_XX11_SD
 0x8034

	)

768 
	#PCI_DEVICE_ID_TI_X515
 0x8036

	)

769 
	#PCI_DEVICE_ID_TI_XX12
 0x8039

	)

770 
	#PCI_DEVICE_ID_TI_1130
 0xac12

	)

771 
	#PCI_DEVICE_ID_TI_1031
 0xac13

	)

772 
	#PCI_DEVICE_ID_TI_1131
 0xac15

	)

773 
	#PCI_DEVICE_ID_TI_1250
 0xac16

	)

774 
	#PCI_DEVICE_ID_TI_1220
 0xac17

	)

775 
	#PCI_DEVICE_ID_TI_1221
 0xac19

	)

776 
	#PCI_DEVICE_ID_TI_1210
 0xac1a

	)

777 
	#PCI_DEVICE_ID_TI_1450
 0xac1b

	)

778 
	#PCI_DEVICE_ID_TI_1225
 0xac1c

	)

779 
	#PCI_DEVICE_ID_TI_1251A
 0xac1d

	)

780 
	#PCI_DEVICE_ID_TI_1211
 0xac1e

	)

781 
	#PCI_DEVICE_ID_TI_1251B
 0xac1f

	)

782 
	#PCI_DEVICE_ID_TI_4410
 0xac41

	)

783 
	#PCI_DEVICE_ID_TI_4451
 0xac42

	)

784 
	#PCI_DEVICE_ID_TI_4510
 0xac44

	)

785 
	#PCI_DEVICE_ID_TI_4520
 0xac46

	)

786 
	#PCI_DEVICE_ID_TI_7510
 0xac47

	)

787 
	#PCI_DEVICE_ID_TI_7610
 0xac48

	)

788 
	#PCI_DEVICE_ID_TI_7410
 0xac49

	)

789 
	#PCI_DEVICE_ID_TI_1410
 0xac50

	)

790 
	#PCI_DEVICE_ID_TI_1420
 0xac51

	)

791 
	#PCI_DEVICE_ID_TI_1451A
 0xac52

	)

792 
	#PCI_DEVICE_ID_TI_1620
 0xac54

	)

793 
	#PCI_DEVICE_ID_TI_1520
 0xac55

	)

794 
	#PCI_DEVICE_ID_TI_1510
 0xac56

	)

795 
	#PCI_DEVICE_ID_TI_X620
 0xac8d

	)

796 
	#PCI_DEVICE_ID_TI_X420
 0xac8e

	)

798 
	#PCI_VENDOR_ID_SONY
 0x104d

	)

802 
	#PCI_VENDOR_ID_WINBOND2
 0x1050

	)

803 
	#PCI_DEVICE_ID_WINBOND2_89C940F
 0x5a5a

	)

804 
	#PCI_DEVICE_ID_WINBOND2_6692
 0x6692

	)

806 
	#PCI_VENDOR_ID_ANIGMA
 0x1051

	)

807 
	#PCI_DEVICE_ID_ANIGMA_MC145575
 0x0100

	)

809 
	#PCI_VENDOR_ID_EFAR
 0x1055

	)

810 
	#PCI_DEVICE_ID_EFAR_SLC90E66_1
 0x9130

	)

811 
	#PCI_DEVICE_ID_EFAR_SLC90E66_3
 0x9463

	)

813 
	#PCI_VENDOR_ID_MOTOROLA
 0x1057

	)

814 
	#PCI_DEVICE_ID_MOTOROLA_MPC105
 0x0001

	)

815 
	#PCI_DEVICE_ID_MOTOROLA_MPC106
 0x0002

	)

816 
	#PCI_DEVICE_ID_MOTOROLA_MPC107
 0x0004

	)

817 
	#PCI_DEVICE_ID_MOTOROLA_RAVEN
 0x4801

	)

818 
	#PCI_DEVICE_ID_MOTOROLA_FALCON
 0x4802

	)

819 
	#PCI_DEVICE_ID_MOTOROLA_HAWK
 0x4803

	)

820 
	#PCI_DEVICE_ID_MOTOROLA_HARRIER
 0x480b

	)

821 
	#PCI_DEVICE_ID_MOTOROLA_MPC5200
 0x5803

	)

822 
	#PCI_DEVICE_ID_MOTOROLA_MPC5200B
 0x5809

	)

824 
	#PCI_VENDOR_ID_PROMISE
 0x105a

	)

825 
	#PCI_DEVICE_ID_PROMISE_20265
 0x0d30

	)

826 
	#PCI_DEVICE_ID_PROMISE_20267
 0x4d30

	)

827 
	#PCI_DEVICE_ID_PROMISE_20246
 0x4d33

	)

828 
	#PCI_DEVICE_ID_PROMISE_20262
 0x4d38

	)

829 
	#PCI_DEVICE_ID_PROMISE_20263
 0x0D38

	)

830 
	#PCI_DEVICE_ID_PROMISE_20268
 0x4d68

	)

831 
	#PCI_DEVICE_ID_PROMISE_20269
 0x4d69

	)

832 
	#PCI_DEVICE_ID_PROMISE_20270
 0x6268

	)

833 
	#PCI_DEVICE_ID_PROMISE_20271
 0x6269

	)

834 
	#PCI_DEVICE_ID_PROMISE_20275
 0x1275

	)

835 
	#PCI_DEVICE_ID_PROMISE_20276
 0x5275

	)

836 
	#PCI_DEVICE_ID_PROMISE_20277
 0x7275

	)

838 
	#PCI_VENDOR_ID_FOXCONN
 0x105b

	)

840 
	#PCI_VENDOR_ID_UMC
 0x1060

	)

841 
	#PCI_DEVICE_ID_UMC_UM8673F
 0x0101

	)

842 
	#PCI_DEVICE_ID_UMC_UM8886BF
 0x673a

	)

843 
	#PCI_DEVICE_ID_UMC_UM8886A
 0x886a

	)

846 
	#PCI_VENDOR_ID_MYLEX
 0x1069

	)

847 
	#PCI_DEVICE_ID_MYLEX_DAC960_P
 0x0001

	)

848 
	#PCI_DEVICE_ID_MYLEX_DAC960_PD
 0x0002

	)

849 
	#PCI_DEVICE_ID_MYLEX_DAC960_PG
 0x0010

	)

850 
	#PCI_DEVICE_ID_MYLEX_DAC960_LA
 0x0020

	)

851 
	#PCI_DEVICE_ID_MYLEX_DAC960_LP
 0x0050

	)

852 
	#PCI_DEVICE_ID_MYLEX_DAC960_BA
 0xBA56

	)

853 
	#PCI_DEVICE_ID_MYLEX_DAC960_GEM
 0xB166

	)

856 
	#PCI_VENDOR_ID_APPLE
 0x106b

	)

857 
	#PCI_DEVICE_ID_APPLE_BANDIT
 0x0001

	)

858 
	#PCI_DEVICE_ID_APPLE_HYDRA
 0x000e

	)

859 
	#PCI_DEVICE_ID_APPLE_UNI_N_FW
 0x0018

	)

860 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP
 0x0020

	)

861 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMAC
 0x0021

	)

862 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMACP
 0x0024

	)

863 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP_P
 0x0027

	)

864 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP15
 0x002d

	)

865 
	#PCI_DEVICE_ID_APPLE_UNI_N_PCI15
 0x002e

	)

866 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMAC2
 0x0032

	)

867 
	#PCI_DEVICE_ID_APPLE_UNI_N_ATA
 0x0033

	)

868 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP2
 0x0034

	)

869 
	#PCI_DEVICE_ID_APPLE_IPID_ATA100
 0x003b

	)

870 
	#PCI_DEVICE_ID_APPLE_K2_ATA100
 0x0043

	)

871 
	#PCI_DEVICE_ID_APPLE_U3_AGP
 0x004b

	)

872 
	#PCI_DEVICE_ID_APPLE_K2_GMAC
 0x004c

	)

873 
	#PCI_DEVICE_ID_APPLE_SH_ATA
 0x0050

	)

874 
	#PCI_DEVICE_ID_APPLE_SH_SUNGEM
 0x0051

	)

875 
	#PCI_DEVICE_ID_APPLE_U3L_AGP
 0x0058

	)

876 
	#PCI_DEVICE_ID_APPLE_U3H_AGP
 0x0059

	)

877 
	#PCI_DEVICE_ID_APPLE_IPID2_AGP
 0x0066

	)

878 
	#PCI_DEVICE_ID_APPLE_IPID2_ATA
 0x0069

	)

879 
	#PCI_DEVICE_ID_APPLE_IPID2_FW
 0x006a

	)

880 
	#PCI_DEVICE_ID_APPLE_IPID2_GMAC
 0x006b

	)

881 
	#PCI_DEVICE_ID_APPLE_TIGON3
 0x1645

	)

883 
	#PCI_VENDOR_ID_YAMAHA
 0x1073

	)

884 
	#PCI_DEVICE_ID_YAMAHA_724
 0x0004

	)

885 
	#PCI_DEVICE_ID_YAMAHA_724F
 0x000d

	)

886 
	#PCI_DEVICE_ID_YAMAHA_740
 0x000a

	)

887 
	#PCI_DEVICE_ID_YAMAHA_740C
 0x000c

	)

888 
	#PCI_DEVICE_ID_YAMAHA_744
 0x0010

	)

889 
	#PCI_DEVICE_ID_YAMAHA_754
 0x0012

	)

892 
	#PCI_VENDOR_ID_QLOGIC
 0x1077

	)

893 
	#PCI_DEVICE_ID_QLOGIC_ISP10160
 0x1016

	)

894 
	#PCI_DEVICE_ID_QLOGIC_ISP1020
 0x1020

	)

895 
	#PCI_DEVICE_ID_QLOGIC_ISP1080
 0x1080

	)

896 
	#PCI_DEVICE_ID_QLOGIC_ISP12160
 0x1216

	)

897 
	#PCI_DEVICE_ID_QLOGIC_ISP1240
 0x1240

	)

898 
	#PCI_DEVICE_ID_QLOGIC_ISP1280
 0x1280

	)

899 
	#PCI_DEVICE_ID_QLOGIC_ISP2100
 0x2100

	)

900 
	#PCI_DEVICE_ID_QLOGIC_ISP2200
 0x2200

	)

901 
	#PCI_DEVICE_ID_QLOGIC_ISP2300
 0x2300

	)

902 
	#PCI_DEVICE_ID_QLOGIC_ISP2312
 0x2312

	)

903 
	#PCI_DEVICE_ID_QLOGIC_ISP2322
 0x2322

	)

904 
	#PCI_DEVICE_ID_QLOGIC_ISP6312
 0x6312

	)

905 
	#PCI_DEVICE_ID_QLOGIC_ISP6322
 0x6322

	)

906 
	#PCI_DEVICE_ID_QLOGIC_ISP2422
 0x2422

	)

907 
	#PCI_DEVICE_ID_QLOGIC_ISP2432
 0x2432

	)

908 
	#PCI_DEVICE_ID_QLOGIC_ISP2512
 0x2512

	)

909 
	#PCI_DEVICE_ID_QLOGIC_ISP2522
 0x2522

	)

910 
	#PCI_DEVICE_ID_QLOGIC_ISP5422
 0x5422

	)

911 
	#PCI_DEVICE_ID_QLOGIC_ISP5432
 0x5432

	)

913 
	#PCI_VENDOR_ID_CYRIX
 0x1078

	)

914 
	#PCI_DEVICE_ID_CYRIX_5510
 0x0000

	)

915 
	#PCI_DEVICE_ID_CYRIX_PCI_MASTER
 0x0001

	)

916 
	#PCI_DEVICE_ID_CYRIX_5520
 0x0002

	)

917 
	#PCI_DEVICE_ID_CYRIX_5530_LEGACY
 0x0100

	)

918 
	#PCI_DEVICE_ID_CYRIX_5530_IDE
 0x0102

	)

919 
	#PCI_DEVICE_ID_CYRIX_5530_AUDIO
 0x0103

	)

920 
	#PCI_DEVICE_ID_CYRIX_5530_VIDEO
 0x0104

	)

924 
	#PCI_VENDOR_ID_CONTAQ
 0x1080

	)

925 
	#PCI_DEVICE_ID_CONTAQ_82C693
 0xc693

	)

928 
	#PCI_VENDOR_ID_OLICOM
 0x108d

	)

929 
	#PCI_DEVICE_ID_OLICOM_OC2325
 0x0012

	)

930 
	#PCI_DEVICE_ID_OLICOM_OC2183
 0x0013

	)

931 
	#PCI_DEVICE_ID_OLICOM_OC2326
 0x0014

	)

933 
	#PCI_VENDOR_ID_SUN
 0x108e

	)

934 
	#PCI_DEVICE_ID_SUN_EBUS
 0x1000

	)

935 
	#PCI_DEVICE_ID_SUN_HAPPYMEAL
 0x1001

	)

936 
	#PCI_DEVICE_ID_SUN_RIO_EBUS
 0x1100

	)

937 
	#PCI_DEVICE_ID_SUN_RIO_GEM
 0x1101

	)

938 
	#PCI_DEVICE_ID_SUN_RIO_1394
 0x1102

	)

939 
	#PCI_DEVICE_ID_SUN_RIO_USB
 0x1103

	)

940 
	#PCI_DEVICE_ID_SUN_GEM
 0x2bad

	)

941 
	#PCI_DEVICE_ID_SUN_SIMBA
 0x5000

	)

942 
	#PCI_DEVICE_ID_SUN_PBM
 0x8000

	)

943 
	#PCI_DEVICE_ID_SUN_SCHIZO
 0x8001

	)

944 
	#PCI_DEVICE_ID_SUN_SABRE
 0xa000

	)

945 
	#PCI_DEVICE_ID_SUN_HUMMINGBIRD
 0xa001

	)

946 
	#PCI_DEVICE_ID_SUN_TOMATILLO
 0xa801

	)

947 
	#PCI_DEVICE_ID_SUN_CASSINI
 0xabba

	)

949 
	#PCI_VENDOR_ID_CMD
 0x1095

	)

950 
	#PCI_DEVICE_ID_CMD_643
 0x0643

	)

951 
	#PCI_DEVICE_ID_CMD_646
 0x0646

	)

952 
	#PCI_DEVICE_ID_CMD_648
 0x0648

	)

953 
	#PCI_DEVICE_ID_CMD_649
 0x0649

	)

955 
	#PCI_DEVICE_ID_SII_680
 0x0680

	)

956 
	#PCI_DEVICE_ID_SII_3112
 0x3112

	)

957 
	#PCI_DEVICE_ID_SII_1210SA
 0x0240

	)

960 
	#PCI_VENDOR_ID_BROOKTREE
 0x109e

	)

961 
	#PCI_DEVICE_ID_BROOKTREE_878
 0x0878

	)

962 
	#PCI_DEVICE_ID_BROOKTREE_879
 0x0879

	)

965 
	#PCI_VENDOR_ID_SGI
 0x10a9

	)

966 
	#PCI_DEVICE_ID_SGI_IOC3
 0x0003

	)

967 
	#PCI_DEVICE_ID_SGI_IOC4
 0x100a

	)

968 
	#PCI_VENDOR_ID_SGI_LITHIUM
 0x1002

	)

971 
	#PCI_VENDOR_ID_WINBOND
 0x10ad

	)

972 
	#PCI_DEVICE_ID_WINBOND_82C105
 0x0105

	)

973 
	#PCI_DEVICE_ID_WINBOND_83C553
 0x0565

	)

976 
	#PCI_VENDOR_ID_PLX
 0x10b5

	)

977 
	#PCI_DEVICE_ID_PLX_R685
 0x1030

	)

978 
	#PCI_DEVICE_ID_PLX_ROMULUS
 0x106a

	)

979 
	#PCI_DEVICE_ID_PLX_SPCOM800
 0x1076

	)

980 
	#PCI_DEVICE_ID_PLX_1077
 0x1077

	)

981 
	#PCI_DEVICE_ID_PLX_SPCOM200
 0x1103

	)

982 
	#PCI_DEVICE_ID_PLX_DJINN_ITOO
 0x1151

	)

983 
	#PCI_DEVICE_ID_PLX_R753
 0x1152

	)

984 
	#PCI_DEVICE_ID_PLX_OLITEC
 0x1187

	)

985 
	#PCI_DEVICE_ID_PLX_PCI200SYN
 0x3196

	)

986 
	#PCI_DEVICE_ID_PLX_9050
 0x9050

	)

987 
	#PCI_DEVICE_ID_PLX_9080
 0x9080

	)

988 
	#PCI_DEVICE_ID_PLX_GTEK_SERIAL2
 0xa001

	)

990 
	#PCI_VENDOR_ID_MADGE
 0x10b6

	)

991 
	#PCI_DEVICE_ID_MADGE_MK2
 0x0002

	)

993 
	#PCI_VENDOR_ID_3COM
 0x10b7

	)

994 
	#PCI_DEVICE_ID_3COM_3C985
 0x0001

	)

995 
	#PCI_DEVICE_ID_3COM_3C940
 0x1700

	)

996 
	#PCI_DEVICE_ID_3COM_3C339
 0x3390

	)

997 
	#PCI_DEVICE_ID_3COM_3C359
 0x3590

	)

998 
	#PCI_DEVICE_ID_3COM_3C940B
 0x80eb

	)

999 
	#PCI_DEVICE_ID_3COM_3CR990
 0x9900

	)

1000 
	#PCI_DEVICE_ID_3COM_3CR990_TX_95
 0x9902

	)

1001 
	#PCI_DEVICE_ID_3COM_3CR990_TX_97
 0x9903

	)

1002 
	#PCI_DEVICE_ID_3COM_3CR990B
 0x9904

	)

1003 
	#PCI_DEVICE_ID_3COM_3CR990_FX
 0x9905

	)

1004 
	#PCI_DEVICE_ID_3COM_3CR990SVR95
 0x9908

	)

1005 
	#PCI_DEVICE_ID_3COM_3CR990SVR97
 0x9909

	)

1006 
	#PCI_DEVICE_ID_3COM_3CR990SVR
 0x990a

	)

1009 
	#PCI_VENDOR_ID_AL
 0x10b9

	)

1010 
	#PCI_DEVICE_ID_AL_M1533
 0x1533

	)

1011 
	#PCI_DEVICE_ID_AL_M1535
 0x1535

	)

1012 
	#PCI_DEVICE_ID_AL_M1541
 0x1541

	)

1013 
	#PCI_DEVICE_ID_AL_M1563
 0x1563

	)

1014 
	#PCI_DEVICE_ID_AL_M1621
 0x1621

	)

1015 
	#PCI_DEVICE_ID_AL_M1631
 0x1631

	)

1016 
	#PCI_DEVICE_ID_AL_M1632
 0x1632

	)

1017 
	#PCI_DEVICE_ID_AL_M1641
 0x1641

	)

1018 
	#PCI_DEVICE_ID_AL_M1644
 0x1644

	)

1019 
	#PCI_DEVICE_ID_AL_M1647
 0x1647

	)

1020 
	#PCI_DEVICE_ID_AL_M1651
 0x1651

	)

1021 
	#PCI_DEVICE_ID_AL_M1671
 0x1671

	)

1022 
	#PCI_DEVICE_ID_AL_M1681
 0x1681

	)

1023 
	#PCI_DEVICE_ID_AL_M1683
 0x1683

	)

1024 
	#PCI_DEVICE_ID_AL_M1689
 0x1689

	)

1025 
	#PCI_DEVICE_ID_AL_M5219
 0x5219

	)

1026 
	#PCI_DEVICE_ID_AL_M5228
 0x5228

	)

1027 
	#PCI_DEVICE_ID_AL_M5229
 0x5229

	)

1028 
	#PCI_DEVICE_ID_AL_M5451
 0x5451

	)

1029 
	#PCI_DEVICE_ID_AL_M7101
 0x7101

	)

1033 
	#PCI_VENDOR_ID_NEOMAGIC
 0x10c8

	)

1034 
	#PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO
 0x8005

	)

1035 
	#PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO
 0x8006

	)

1036 
	#PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO
 0x8016

	)

1039 
	#PCI_VENDOR_ID_TCONRAD
 0x10da

	)

1040 
	#PCI_DEVICE_ID_TCONRAD_TOKENRING
 0x0508

	)

1043 
	#PCI_VENDOR_ID_NVIDIA
 0x10de

	)

1044 
	#PCI_DEVICE_ID_NVIDIA_TNT
 0x0020

	)

1045 
	#PCI_DEVICE_ID_NVIDIA_TNT2
 0x0028

	)

1046 
	#PCI_DEVICE_ID_NVIDIA_UTNT2
 0x0029

	)

1047 
	#PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN
 0x002a

	)

1048 
	#PCI_DEVICE_ID_NVIDIA_VTNT2
 0x002C

	)

1049 
	#PCI_DEVICE_ID_NVIDIA_UVTNT2
 0x002D

	)

1050 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS
 0x0034

	)

1051 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE
 0x0035

	)

1052 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA
 0x0036

	)

1053 
	#PCI_DEVICE_ID_NVIDIA_NVENET_10
 0x0037

	)

1054 
	#PCI_DEVICE_ID_NVIDIA_NVENET_11
 0x0038

	)

1055 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2
 0x003e

	)

1056 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA
 0x0040

	)

1057 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800
 0x0041

	)

1058 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE
 0x0042

	)

1059 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT
 0x0045

	)

1060 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000
 0x004E

	)

1061 
	#PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS
 0x0052

	)

1062 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE
 0x0053

	)

1063 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA
 0x0054

	)

1064 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2
 0x0055

	)

1065 
	#PCI_DEVICE_ID_NVIDIA_NVENET_8
 0x0056

	)

1066 
	#PCI_DEVICE_ID_NVIDIA_NVENET_9
 0x0057

	)

1067 
	#PCI_DEVICE_ID_NVIDIA_CK804_AUDIO
 0x0059

	)

1068 
	#PCI_DEVICE_ID_NVIDIA_CK804_PCIE
 0x005d

	)

1069 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS
 0x0064

	)

1070 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE
 0x0065

	)

1071 
	#PCI_DEVICE_ID_NVIDIA_NVENET_2
 0x0066

	)

1072 
	#PCI_DEVICE_ID_NVIDIA_MCP2_MODEM
 0x0069

	)

1073 
	#PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO
 0x006a

	)

1074 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS
 0x0084

	)

1075 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE
 0x0085

	)

1076 
	#PCI_DEVICE_ID_NVIDIA_NVENET_4
 0x0086

	)

1077 
	#PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM
 0x0089

	)

1078 
	#PCI_DEVICE_ID_NVIDIA_CK8_AUDIO
 0x008a

	)

1079 
	#PCI_DEVICE_ID_NVIDIA_NVENET_5
 0x008c

	)

1080 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA
 0x008e

	)

1081 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT
 0x0090

	)

1082 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX
 0x0091

	)

1083 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800
 0x0098

	)

1084 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX
 0x0099

	)

1085 
	#PCI_DEVICE_ID_NVIDIA_ITNT2
 0x00A0

	)

1086 
	#PCI_DEVICE_ID_GEFORCE_6800A
 0x00c1

	)

1087 
	#PCI_DEVICE_ID_GEFORCE_6800A_LE
 0x00c2

	)

1088 
	#PCI_DEVICE_ID_GEFORCE_GO_6800
 0x00c8

	)

1089 
	#PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA
 0x00c9

	)

1090 
	#PCI_DEVICE_ID_QUADRO_FX_GO1400
 0x00cc

	)

1091 
	#PCI_DEVICE_ID_QUADRO_FX_1400
 0x00˚

	)

1092 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3
 0x00d1

	)

1093 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS
 0x00d4

	)

1094 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE
 0x00d5

	)

1095 
	#PCI_DEVICE_ID_NVIDIA_NVENET_3
 0x00d6

	)

1096 
	#PCI_DEVICE_ID_NVIDIA_MCP3_MODEM
 0x00d9

	)

1097 
	#PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO
 0x00da

	)

1098 
	#PCI_DEVICE_ID_NVIDIA_NVENET_7
 0x00df

	)

1099 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S
 0x00e1

	)

1100 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA
 0x00e3

	)

1101 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS
 0x00e4

	)

1102 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE
 0x00e5

	)

1103 
	#PCI_DEVICE_ID_NVIDIA_NVENET_6
 0x00e6

	)

1104 
	#PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO
 0x00ó

	)

1105 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2
 0x00ì

	)

1106 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1
 0x00f0

	)

1107 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1
 0x00f1

	)

1108 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2
 0x00f2

	)

1109 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1
 0x00f3

	)

1110 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT
 0x00f9

	)

1111 
	#PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280
 0x00fd

	)

1112 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR
 0x0100

	)

1113 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR
 0x0101

	)

1114 
	#PCI_DEVICE_ID_NVIDIA_QUADRO
 0x0103

	)

1115 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX
 0x0110

	)

1116 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2
 0x0111

	)

1117 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO
 0x0112

	)

1118 
	#PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR
 0x0113

	)

1119 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT
 0x0140

	)

1120 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6600
 0x0141

	)

1121 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL
 0x0145

	)

1122 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540
 0x014E

	)

1123 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6200
 0x014F

	)

1124 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS
 0x0150

	)

1125 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2
 0x0151

	)

1126 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA
 0x0152

	)

1127 
	#PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO
 0x0153

	)

1128 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE
 0x0161

	)

1129 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200
 0x0164

	)

1130 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250
 0x0166

	)

1131 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1
 0x0167

	)

1132 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1
 0x0168

	)

1133 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460
 0x0170

	)

1134 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440
 0x0171

	)

1135 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420
 0x0172

	)

1136 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE
 0x0173

	)

1137 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO
 0x0174

	)

1138 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO
 0x0175

	)

1139 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32
 0x0176

	)

1140 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO
 0x0177

	)

1141 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL
 0x0178

	)

1142 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64
 0x0179

	)

1143 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_200
 0x017A

	)

1144 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL
 0x017B

	)

1145 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL
 0x017C

	)

1146 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16
 0x017D

	)

1147 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X
 0x0181

	)

1148 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X
 0x0182

	)

1149 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X
 0x0183

	)

1150 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000
 0x0185

	)

1151 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO
 0x0186

	)

1152 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO
 0x0187

	)

1153 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL
 0x0188

	)

1154 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC
 0x0189

	)

1155 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS
 0x018A

	)

1156 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL
 0x018B

	)

1157 
	#PCI_DEVICE_ID_NVIDIA_IGEFORCE2
 0x01a0

	)

1158 
	#PCI_DEVICE_ID_NVIDIA_NFORCE
 0x01a4

	)

1159 
	#PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO
 0x01b1

	)

1160 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS
 0x01b4

	)

1161 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_IDE
 0x01bc

	)

1162 
	#PCI_DEVICE_ID_NVIDIA_MCP1_MODEM
 0x01c1

	)

1163 
	#PCI_DEVICE_ID_NVIDIA_NVENET_1
 0x01c3

	)

1164 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2
 0x01e0

	)

1165 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3
 0x0200

	)

1166 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3_1
 0x0201

	)

1167 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3_2
 0x0202

	)

1168 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_DDC
 0x0203

	)

1169 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B
 0x0211

	)

1170 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE
 0x0212

	)

1171 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT
 0x0215

	)

1172 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600
 0x0250

	)

1173 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400
 0x0251

	)

1174 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200
 0x0253

	)

1175 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL
 0x0258

	)

1176 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL
 0x0259

	)

1177 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL
 0x025B

	)

1178 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS
 0x0264

	)

1179 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE
 0x0265

	)

1180 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA
 0x0266

	)

1181 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2
 0x0267

	)

1182 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS
 0x0368

	)

1183 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE
 0x036E

	)

1184 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA
 0x037E

	)

1185 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2
 0x037F

	)

1186 
	#PCI_DEVICE_ID_NVIDIA_NVENET_12
 0x0268

	)

1187 
	#PCI_DEVICE_ID_NVIDIA_NVENET_13
 0x0269

	)

1188 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800
 0x0280

	)

1189 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X
 0x0281

	)

1190 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE
 0x0282

	)

1191 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO
 0x0286

	)

1192 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL
 0x0288

	)

1193 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL
 0x0289

	)

1194 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL
 0x028C

	)

1195 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA
 0x0301

	)

1196 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800
 0x0302

	)

1197 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000
 0x0308

	)

1198 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000
 0x0309

	)

1199 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA
 0x0311

	)

1200 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600
 0x0312

	)

1201 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE
 0x0314

	)

1202 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600
 0x031A

	)

1203 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650
 0x031B

	)

1204 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700
 0x031C

	)

1205 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200
 0x0320

	)

1206 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA
 0x0321

	)

1207 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1
 0x0322

	)

1208 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE
 0x0323

	)

1209 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200
 0x0324

	)

1210 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250
 0x0325

	)

1211 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500
 0x0326

	)

1212 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100
 0x0327

	)

1213 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32
 0x0328

	)

1214 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200
 0x0329

	)

1215 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI
 0x032A

	)

1216 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500
 0x032B

	)

1217 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300
 0x032C

	)

1218 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100
 0x032D

	)

1219 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA
 0x0330

	)

1220 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900
 0x0331

	)

1221 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT
 0x0332

	)

1222 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA
 0x0333

	)

1223 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT
 0x0334

	)

1224 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000
 0x0338

	)

1225 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700
 0x033F

	)

1226 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA
 0x0341

	)

1227 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700
 0x0342

	)

1228 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE
 0x0343

	)

1229 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE
 0x0344

	)

1230 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1
 0x0347

	)

1231 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2
 0x0348

	)

1232 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000
 0x034C

	)

1233 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100
 0x034E

	)

1234 
	#PCI_DEVICE_ID_NVIDIA_NVENET_14
 0x0372

	)

1235 
	#PCI_DEVICE_ID_NVIDIA_NVENET_15
 0x0373

	)

1236 
	#PCI_DEVICE_ID_NVIDIA_NVENET_16
 0x03E5

	)

1237 
	#PCI_DEVICE_ID_NVIDIA_NVENET_17
 0x03E6

	)

1238 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA
 0x03E7

	)

1239 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE
 0x03EC

	)

1240 
	#PCI_DEVICE_ID_NVIDIA_NVENET_18
 0x03EE

	)

1241 
	#PCI_DEVICE_ID_NVIDIA_NVENET_19
 0x03EF

	)

1242 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2
 0x03F6

	)

1243 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3
 0x03F7

	)

1244 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE
 0x0448

	)

1245 
	#PCI_DEVICE_ID_NVIDIA_NVENET_20
 0x0450

	)

1246 
	#PCI_DEVICE_ID_NVIDIA_NVENET_21
 0x0451

	)

1247 
	#PCI_DEVICE_ID_NVIDIA_NVENET_22
 0x0452

	)

1248 
	#PCI_DEVICE_ID_NVIDIA_NVENET_23
 0x0453

	)

1249 
	#PCI_DEVICE_ID_NVIDIA_NVENET_24
 0x054C

	)

1250 
	#PCI_DEVICE_ID_NVIDIA_NVENET_25
 0x054D

	)

1251 
	#PCI_DEVICE_ID_NVIDIA_NVENET_26
 0x054E

	)

1252 
	#PCI_DEVICE_ID_NVIDIA_NVENET_27
 0x054F

	)

1253 
	#PCI_DEVICE_ID_NVIDIA_NVENET_28
 0x07DC

	)

1254 
	#PCI_DEVICE_ID_NVIDIA_NVENET_29
 0x07DD

	)

1255 
	#PCI_DEVICE_ID_NVIDIA_NVENET_30
 0x07DE

	)

1256 
	#PCI_DEVICE_ID_NVIDIA_NVENET_31
 0x07DF

	)

1257 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_IDE
 0x0560

	)

1258 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_IDE
 0x056C

	)

1259 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP77_IDE
 0x0759

	)

1260 
	#PCI_DEVICE_ID_NVIDIA_NVENET_32
 0x0760

	)

1261 
	#PCI_DEVICE_ID_NVIDIA_NVENET_33
 0x0761

	)

1262 
	#PCI_DEVICE_ID_NVIDIA_NVENET_34
 0x0762

	)

1263 
	#PCI_DEVICE_ID_NVIDIA_NVENET_35
 0x0763

	)

1264 
	#PCI_DEVICE_ID_NVIDIA_NVENET_36
 0x0AB0

	)

1265 
	#PCI_DEVICE_ID_NVIDIA_NVENET_37
 0x0AB1

	)

1266 
	#PCI_DEVICE_ID_NVIDIA_NVENET_38
 0x0AB2

	)

1267 
	#PCI_DEVICE_ID_NVIDIA_NVENET_39
 0x0AB3

	)

1269 
	#PCI_VENDOR_ID_IMS
 0x10e0

	)

1270 
	#PCI_DEVICE_ID_IMS_TT128
 0x9128

	)

1271 
	#PCI_DEVICE_ID_IMS_TT3D
 0x9135

	)

1276 
	#PCI_VENDOR_ID_INTERG
 0x10ó

	)

1277 
	#PCI_DEVICE_ID_INTERG_1682
 0x1682

	)

1278 
	#PCI_DEVICE_ID_INTERG_2000
 0x2000

	)

1279 
	#PCI_DEVICE_ID_INTERG_2010
 0x2010

	)

1280 
	#PCI_DEVICE_ID_INTERG_5000
 0x5000

	)

1281 
	#PCI_DEVICE_ID_INTERG_5050
 0x5050

	)

1283 
	#PCI_VENDOR_ID_REALTEK
 0x10ec

	)

1284 
	#PCI_DEVICE_ID_REALTEK_8139
 0x8139

	)

1286 
	#PCI_VENDOR_ID_XILINX
 0x10ì

	)

1287 
	#PCI_DEVICE_ID_RME_DIGI96
 0x3fc0

	)

1288 
	#PCI_DEVICE_ID_RME_DIGI96_8
 0x3fc1

	)

1289 
	#PCI_DEVICE_ID_RME_DIGI96_8_PRO
 0x3fc2

	)

1290 
	#PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST
 0x3fc3

	)

1291 
	#PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP
 0x3fc5

	)

1292 
	#PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI
 0x3fc6

	)

1295 
	#PCI_VENDOR_ID_INIT
 0x1101

	)

1297 
	#PCI_VENDOR_ID_CREATIVE
 0x1102

	)

1298 
	#PCI_DEVICE_ID_CREATIVE_EMU10K1
 0x0002

	)

1299 
	#PCI_DEVICE_ID_CREATIVE_20K1
 0x0005

	)

1300 
	#PCI_DEVICE_ID_CREATIVE_20K2
 0x000b

	)

1301 
	#PCI_SUBDEVICE_ID_CREATIVE_SB0760
 0x0024

	)

1302 
	#PCI_SUBDEVICE_ID_CREATIVE_SB08801
 0x0041

	)

1303 
	#PCI_SUBDEVICE_ID_CREATIVE_SB08802
 0x0042

	)

1304 
	#PCI_SUBDEVICE_ID_CREATIVE_SB08803
 0x0043

	)

1305 
	#PCI_SUBDEVICE_ID_CREATIVE_HENDRIX
 0x6000

	)

1307 
	#PCI_VENDOR_ID_ECTIVA
 0x1102

	)

1308 
	#PCI_DEVICE_ID_ECTIVA_EV1938
 0x8938

	)

1310 
	#PCI_VENDOR_ID_TTI
 0x1103

	)

1311 
	#PCI_DEVICE_ID_TTI_HPT343
 0x0003

	)

1312 
	#PCI_DEVICE_ID_TTI_HPT366
 0x0004

	)

1313 
	#PCI_DEVICE_ID_TTI_HPT372
 0x0005

	)

1314 
	#PCI_DEVICE_ID_TTI_HPT302
 0x0006

	)

1315 
	#PCI_DEVICE_ID_TTI_HPT371
 0x0007

	)

1316 
	#PCI_DEVICE_ID_TTI_HPT374
 0x0008

	)

1317 
	#PCI_DEVICE_ID_TTI_HPT372N
 0x0009

	)

1319 
	#PCI_VENDOR_ID_VIA
 0x1106

	)

1320 
	#PCI_DEVICE_ID_VIA_8763_0
 0x0198

	)

1321 
	#PCI_DEVICE_ID_VIA_8380_0
 0x0204

	)

1322 
	#PCI_DEVICE_ID_VIA_3238_0
 0x0238

	)

1323 
	#PCI_DEVICE_ID_VIA_PT880
 0x0258

	)

1324 
	#PCI_DEVICE_ID_VIA_PT880ULTRA
 0x0308

	)

1325 
	#PCI_DEVICE_ID_VIA_PX8X0_0
 0x0259

	)

1326 
	#PCI_DEVICE_ID_VIA_3269_0
 0x0269

	)

1327 
	#PCI_DEVICE_ID_VIA_K8T800PRO_0
 0x0282

	)

1328 
	#PCI_DEVICE_ID_VIA_3296_0
 0x0296

	)

1329 
	#PCI_DEVICE_ID_VIA_8363_0
 0x0305

	)

1330 
	#PCI_DEVICE_ID_VIA_P4M800CE
 0x0314

	)

1331 
	#PCI_DEVICE_ID_VIA_VT3351
 0x0351

	)

1332 
	#PCI_DEVICE_ID_VIA_VT3364
 0x0364

	)

1333 
	#PCI_DEVICE_ID_VIA_8371_0
 0x0391

	)

1334 
	#PCI_DEVICE_ID_VIA_8501_0
 0x0501

	)

1335 
	#PCI_DEVICE_ID_VIA_82C561
 0x0561

	)

1336 
	#PCI_DEVICE_ID_VIA_82C586_1
 0x0571

	)

1337 
	#PCI_DEVICE_ID_VIA_82C576
 0x0576

	)

1338 
	#PCI_DEVICE_ID_VIA_SATA_EIDE
 0x0581

	)

1339 
	#PCI_DEVICE_ID_VIA_82C586_0
 0x0586

	)

1340 
	#PCI_DEVICE_ID_VIA_82C596
 0x0596

	)

1341 
	#PCI_DEVICE_ID_VIA_82C597_0
 0x0597

	)

1342 
	#PCI_DEVICE_ID_VIA_82C598_0
 0x0598

	)

1343 
	#PCI_DEVICE_ID_VIA_8601_0
 0x0601

	)

1344 
	#PCI_DEVICE_ID_VIA_8605_0
 0x0605

	)

1345 
	#PCI_DEVICE_ID_VIA_82C686
 0x0686

	)

1346 
	#PCI_DEVICE_ID_VIA_82C691_0
 0x0691

	)

1347 
	#PCI_DEVICE_ID_VIA_82C576_1
 0x1571

	)

1348 
	#PCI_DEVICE_ID_VIA_82C586_2
 0x3038

	)

1349 
	#PCI_DEVICE_ID_VIA_82C586_3
 0x3040

	)

1350 
	#PCI_DEVICE_ID_VIA_82C596_3
 0x3050

	)

1351 
	#PCI_DEVICE_ID_VIA_82C596B_3
 0x3051

	)

1352 
	#PCI_DEVICE_ID_VIA_82C686_4
 0x3057

	)

1353 
	#PCI_DEVICE_ID_VIA_82C686_5
 0x3058

	)

1354 
	#PCI_DEVICE_ID_VIA_8233_5
 0x3059

	)

1355 
	#PCI_DEVICE_ID_VIA_8233_0
 0x3074

	)

1356 
	#PCI_DEVICE_ID_VIA_8633_0
 0x3091

	)

1357 
	#PCI_DEVICE_ID_VIA_8367_0
 0x3099

	)

1358 
	#PCI_DEVICE_ID_VIA_8653_0
 0x3101

	)

1359 
	#PCI_DEVICE_ID_VIA_8622
 0x3102

	)

1360 
	#PCI_DEVICE_ID_VIA_8235_USB_2
 0x3104

	)

1361 
	#PCI_DEVICE_ID_VIA_8233C_0
 0x3109

	)

1362 
	#PCI_DEVICE_ID_VIA_8361
 0x3112

	)

1363 
	#PCI_DEVICE_ID_VIA_XM266
 0x3116

	)

1364 
	#PCI_DEVICE_ID_VIA_612X
 0x3119

	)

1365 
	#PCI_DEVICE_ID_VIA_862X_0
 0x3123

	)

1366 
	#PCI_DEVICE_ID_VIA_8753_0
 0x3128

	)

1367 
	#PCI_DEVICE_ID_VIA_8233A
 0x3147

	)

1368 
	#PCI_DEVICE_ID_VIA_8703_51_0
 0x3148

	)

1369 
	#PCI_DEVICE_ID_VIA_8237_SATA
 0x3149

	)

1370 
	#PCI_DEVICE_ID_VIA_XN266
 0x3156

	)

1371 
	#PCI_DEVICE_ID_VIA_6410
 0x3164

	)

1372 
	#PCI_DEVICE_ID_VIA_8754C_0
 0x3168

	)

1373 
	#PCI_DEVICE_ID_VIA_8235
 0x3177

	)

1374 
	#PCI_DEVICE_ID_VIA_8385_0
 0x3188

	)

1375 
	#PCI_DEVICE_ID_VIA_8377_0
 0x3189

	)

1376 
	#PCI_DEVICE_ID_VIA_8378_0
 0x3205

	)

1377 
	#PCI_DEVICE_ID_VIA_8783_0
 0x3208

	)

1378 
	#PCI_DEVICE_ID_VIA_8237
 0x3227

	)

1379 
	#PCI_DEVICE_ID_VIA_8251
 0x3287

	)

1380 
	#PCI_DEVICE_ID_VIA_8237A
 0x3337

	)

1381 
	#PCI_DEVICE_ID_VIA_8237S
 0x3372

	)

1382 
	#PCI_DEVICE_ID_VIA_8231
 0x8231

	)

1383 
	#PCI_DEVICE_ID_VIA_8231_4
 0x8235

	)

1384 
	#PCI_DEVICE_ID_VIA_8365_1
 0x8305

	)

1385 
	#PCI_DEVICE_ID_VIA_5324
 0x5324

	)

1386 
	#PCI_DEVICE_ID_VIA_CX700
 0x8324

	)

1387 
	#PCI_DEVICE_ID_VIA_VX800
 0x8353

	)

1388 
	#PCI_DEVICE_ID_VIA_8371_1
 0x8391

	)

1389 
	#PCI_DEVICE_ID_VIA_82C598_1
 0x8598

	)

1390 
	#PCI_DEVICE_ID_VIA_838X_1
 0xB188

	)

1391 
	#PCI_DEVICE_ID_VIA_83_87XX_1
 0xB198

	)

1393 
	#PCI_VENDOR_ID_SIEMENS
 0x110A

	)

1394 
	#PCI_DEVICE_ID_SIEMENS_DSCC4
 0x2102

	)

1397 
	#PCI_VENDOR_ID_VORTEX
 0x1119

	)

1398 
	#PCI_DEVICE_ID_VORTEX_GDT60x0
 0x0000

	)

1399 
	#PCI_DEVICE_ID_VORTEX_GDT6000B
 0x0001

	)

1400 
	#PCI_DEVICE_ID_VORTEX_GDT6x10
 0x0002

	)

1401 
	#PCI_DEVICE_ID_VORTEX_GDT6x20
 0x0003

	)

1402 
	#PCI_DEVICE_ID_VORTEX_GDT6530
 0x0004

	)

1403 
	#PCI_DEVICE_ID_VORTEX_GDT6550
 0x0005

	)

1404 
	#PCI_DEVICE_ID_VORTEX_GDT6x17
 0x0006

	)

1405 
	#PCI_DEVICE_ID_VORTEX_GDT6x27
 0x0007

	)

1406 
	#PCI_DEVICE_ID_VORTEX_GDT6537
 0x0008

	)

1407 
	#PCI_DEVICE_ID_VORTEX_GDT6557
 0x0009

	)

1408 
	#PCI_DEVICE_ID_VORTEX_GDT6x15
 0x000a

	)

1409 
	#PCI_DEVICE_ID_VORTEX_GDT6x25
 0x000b

	)

1410 
	#PCI_DEVICE_ID_VORTEX_GDT6535
 0x000c

	)

1411 
	#PCI_DEVICE_ID_VORTEX_GDT6555
 0x000d

	)

1412 
	#PCI_DEVICE_ID_VORTEX_GDT6x17RP
 0x0100

	)

1413 
	#PCI_DEVICE_ID_VORTEX_GDT6x27RP
 0x0101

	)

1414 
	#PCI_DEVICE_ID_VORTEX_GDT6537RP
 0x0102

	)

1415 
	#PCI_DEVICE_ID_VORTEX_GDT6557RP
 0x0103

	)

1416 
	#PCI_DEVICE_ID_VORTEX_GDT6x11RP
 0x0104

	)

1417 
	#PCI_DEVICE_ID_VORTEX_GDT6x21RP
 0x0105

	)

1419 
	#PCI_VENDOR_ID_EF
 0x111a

	)

1420 
	#PCI_DEVICE_ID_EF_ATM_FPGA
 0x0000

	)

1421 
	#PCI_DEVICE_ID_EF_ATM_ASIC
 0x0002

	)

1422 
	#PCI_VENDOR_ID_EF_ATM_LANAI2
 0x0003

	)

1423 
	#PCI_VENDOR_ID_EF_ATM_LANAIHB
 0x0005

	)

1425 
	#PCI_VENDOR_ID_IDT
 0x111d

	)

1426 
	#PCI_DEVICE_ID_IDT_IDT77201
 0x0001

	)

1428 
	#PCI_VENDOR_ID_FORE
 0x1127

	)

1429 
	#PCI_DEVICE_ID_FORE_PCA200E
 0x0300

	)

1432 
	#PCI_VENDOR_ID_PHILIPS
 0x1131

	)

1433 
	#PCI_DEVICE_ID_PHILIPS_SAA7146
 0x7146

	)

1434 
	#PCI_DEVICE_ID_PHILIPS_SAA9730
 0x9730

	)

1436 
	#PCI_VENDOR_ID_EICON
 0x1133

	)

1437 
	#PCI_DEVICE_ID_EICON_DIVA20
 0xe002

	)

1438 
	#PCI_DEVICE_ID_EICON_DIVA20_U
 0xe004

	)

1439 
	#PCI_DEVICE_ID_EICON_DIVA201
 0xe005

	)

1440 
	#PCI_DEVICE_ID_EICON_DIVA202
 0xe00b

	)

1441 
	#PCI_DEVICE_ID_EICON_MAESTRA
 0xe010

	)

1442 
	#PCI_DEVICE_ID_EICON_MAESTRAQ
 0xe012

	)

1443 
	#PCI_DEVICE_ID_EICON_MAESTRAQ_U
 0xe013

	)

1444 
	#PCI_DEVICE_ID_EICON_MAESTRAP
 0xe014

	)

1446 
	#PCI_VENDOR_ID_CISCO
 0x1137

	)

1448 
	#PCI_VENDOR_ID_ZIATECH
 0x1138

	)

1449 
	#PCI_DEVICE_ID_ZIATECH_5550_HC
 0x5550

	)

1453 
	#PCI_VENDOR_ID_SYSKONNECT
 0x1148

	)

1454 
	#PCI_DEVICE_ID_SYSKONNECT_TR
 0x4200

	)

1455 
	#PCI_DEVICE_ID_SYSKONNECT_GE
 0x4300

	)

1456 
	#PCI_DEVICE_ID_SYSKONNECT_YU
 0x4320

	)

1457 
	#PCI_DEVICE_ID_SYSKONNECT_9DXX
 0x4400

	)

1458 
	#PCI_DEVICE_ID_SYSKONNECT_9MXX
 0x4500

	)

1461 
	#PCI_VENDOR_ID_DIGI
 0x114f

	)

1462 
	#PCI_DEVICE_ID_DIGI_DF_M_IOM2_E
 0x0070

	)

1463 
	#PCI_DEVICE_ID_DIGI_DF_M_E
 0x0071

	)

1464 
	#PCI_DEVICE_ID_DIGI_DF_M_IOM2_A
 0x0072

	)

1465 
	#PCI_DEVICE_ID_DIGI_DF_M_A
 0x0073

	)

1466 
	#PCI_DEVICE_ID_NEO_2DB9
 0x00C8

	)

1467 
	#PCI_DEVICE_ID_NEO_2DB9PRI
 0x00C9

	)

1468 
	#PCI_DEVICE_ID_NEO_2RJ45
 0x00CA

	)

1469 
	#PCI_DEVICE_ID_NEO_2RJ45PRI
 0x00CB

	)

1470 
	#PCIE_DEVICE_ID_NEO_4_IBM
 0x00F4

	)

1471 
	#PCIE_DEVICE_ID_NEO_2_OX_IBM
 0x00F6

	)

1473 
	#PCI_VENDOR_ID_XIRCOM
 0x115d

	)

1474 
	#PCI_DEVICE_ID_XIRCOM_RBM56G
 0x0101

	)

1475 
	#PCI_DEVICE_ID_XIRCOM_X3201_MDM
 0x0103

	)

1478 
	#PCI_VENDOR_ID_SERVERWORKS
 0x1166

	)

1479 
	#PCI_DEVICE_ID_SERVERWORKS_HE
 0x0008

	)

1480 
	#PCI_DEVICE_ID_SERVERWORKS_LE
 0x0009

	)

1481 
	#PCI_DEVICE_ID_SERVERWORKS_GCNB_LE
 0x0017

	)

1482 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB
 0x0036

	)

1483 
	#PCI_DEVICE_ID_SERVERWORKS_EPB
 0x0103

	)

1484 
	#PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE
 0x0132

	)

1485 
	#PCI_DEVICE_ID_SERVERWORKS_OSB4
 0x0200

	)

1486 
	#PCI_DEVICE_ID_SERVERWORKS_CSB5
 0x0201

	)

1487 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6
 0x0203

	)

1488 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000SB
 0x0205

	)

1489 
	#PCI_DEVICE_ID_SERVERWORKS_OSB4IDE
 0x0211

	)

1490 
	#PCI_DEVICE_ID_SERVERWORKS_CSB5IDE
 0x0212

	)

1491 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6IDE
 0x0213

	)

1492 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000IDE
 0x0214

	)

1493 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2
 0x0217

	)

1494 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6LPC
 0x0227

	)

1495 
	#PCI_DEVICE_ID_SERVERWORKS_HT1100LD
 0x0408

	)

1497 
	#PCI_VENDOR_ID_SBE
 0x1176

	)

1498 
	#PCI_DEVICE_ID_SBE_WANXL100
 0x0301

	)

1499 
	#PCI_DEVICE_ID_SBE_WANXL200
 0x0302

	)

1500 
	#PCI_DEVICE_ID_SBE_WANXL400
 0x0104

	)

1502 
	#PCI_VENDOR_ID_TOSHIBA
 0x1179

	)

1503 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO
 0x0102

	)

1504 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO_1
 0x0103

	)

1505 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO_2
 0x0105

	)

1506 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC95
 0x060a

	)

1507 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC97
 0x060f

	)

1508 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC100
 0x0617

	)

1510 
	#PCI_VENDOR_ID_TOSHIBA_2
 0x102f

	)

1511 
	#PCI_DEVICE_ID_TOSHIBA_TC35815CF
 0x0030

	)

1512 
	#PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC
 0x0108

	)

1513 
	#PCI_DEVICE_ID_TOSHIBA_SPIDER_NET
 0x01b3

	)

1515 
	#PCI_VENDOR_ID_ATTO
 0x117c

	)

1516 
	#PCI_VENDOR_ID_RICOH
 0x1180

	)

1517 
	#PCI_DEVICE_ID_RICOH_RL5C465
 0x0465

	)

1518 
	#PCI_DEVICE_ID_RICOH_RL5C466
 0x0466

	)

1519 
	#PCI_DEVICE_ID_RICOH_RL5C475
 0x0475

	)

1520 
	#PCI_DEVICE_ID_RICOH_RL5C476
 0x0476

	)

1521 
	#PCI_DEVICE_ID_RICOH_RL5C478
 0x0478

	)

1522 
	#PCI_DEVICE_ID_RICOH_R5C822
 0x0822

	)

1524 
	#PCI_VENDOR_ID_DLINK
 0x1186

	)

1525 
	#PCI_DEVICE_ID_DLINK_DGE510T
 0x4c00

	)

1527 
	#PCI_VENDOR_ID_ARTOP
 0x1191

	)

1528 
	#PCI_DEVICE_ID_ARTOP_ATP850UF
 0x0005

	)

1529 
	#PCI_DEVICE_ID_ARTOP_ATP860
 0x0006

	)

1530 
	#PCI_DEVICE_ID_ARTOP_ATP860R
 0x0007

	)

1531 
	#PCI_DEVICE_ID_ARTOP_ATP865
 0x0008

	)

1532 
	#PCI_DEVICE_ID_ARTOP_ATP865R
 0x0009

	)

1533 
	#PCI_DEVICE_ID_ARTOP_AEC7610
 0x8002

	)

1534 
	#PCI_DEVICE_ID_ARTOP_AEC7612UW
 0x8010

	)

1535 
	#PCI_DEVICE_ID_ARTOP_AEC7612U
 0x8020

	)

1536 
	#PCI_DEVICE_ID_ARTOP_AEC7612S
 0x8030

	)

1537 
	#PCI_DEVICE_ID_ARTOP_AEC7612D
 0x8040

	)

1538 
	#PCI_DEVICE_ID_ARTOP_AEC7612SUW
 0x8050

	)

1539 
	#PCI_DEVICE_ID_ARTOP_8060
 0x8060

	)

1541 
	#PCI_VENDOR_ID_ZEITNET
 0x1193

	)

1542 
	#PCI_DEVICE_ID_ZEITNET_1221
 0x0001

	)

1543 
	#PCI_DEVICE_ID_ZEITNET_1225
 0x0002

	)

1546 
	#PCI_VENDOR_ID_FUJITSU_ME
 0x119e

	)

1547 
	#PCI_DEVICE_ID_FUJITSU_FS155
 0x0001

	)

1548 
	#PCI_DEVICE_ID_FUJITSU_FS50
 0x0003

	)

1550 
	#PCI_SUBVENDOR_ID_KEYSPAN
 0x11a9

	)

1551 
	#PCI_SUBDEVICE_ID_KEYSPAN_SX2
 0x5334

	)

1553 
	#PCI_VENDOR_ID_MARVELL
 0x11ab

	)

1554 
	#PCI_DEVICE_ID_MARVELL_GT64111
 0x4146

	)

1555 
	#PCI_DEVICE_ID_MARVELL_GT64260
 0x6430

	)

1556 
	#PCI_DEVICE_ID_MARVELL_MV64360
 0x6460

	)

1557 
	#PCI_DEVICE_ID_MARVELL_MV64460
 0x6480

	)

1558 
	#PCI_DEVICE_ID_MARVELL_GT96100
 0x9652

	)

1559 
	#PCI_DEVICE_ID_MARVELL_GT96100A
 0x9653

	)

1562 
	#PCI_VENDOR_ID_V3
 0x11b0

	)

1563 
	#PCI_DEVICE_ID_V3_V960
 0x0001

	)

1564 
	#PCI_DEVICE_ID_V3_V351
 0x0002

	)

1567 
	#PCI_VENDOR_ID_ATT
 0x11c1

	)

1568 
	#PCI_DEVICE_ID_ATT_VENUS_MODEM
 0x480

	)

1571 
	#PCI_VENDOR_ID_SPECIALIX
 0x11cb

	)

1572 
	#PCI_DEVICE_ID_SPECIALIX_IO8
 0x2000

	)

1573 
	#PCI_DEVICE_ID_SPECIALIX_RIO
 0x8000

	)

1574 
	#PCI_SUBDEVICE_ID_SPECIALIX_SPEED4
 0xa004

	)

1577 
	#PCI_VENDOR_ID_ANALOG_DEVICES
 0x11d4

	)

1578 
	#PCI_DEVICE_ID_AD1889JS
 0x1889

	)

1581 
	#PCI_DEVICE_ID_SEGA_BBA
 0x1234

	)

1583 
	#PCI_VENDOR_ID_ZORAN
 0x11de

	)

1584 
	#PCI_DEVICE_ID_ZORAN_36057
 0x6057

	)

1585 
	#PCI_DEVICE_ID_ZORAN_36120
 0x6120

	)

1588 
	#PCI_VENDOR_ID_COMPEX
 0x11f6

	)

1589 
	#PCI_DEVICE_ID_COMPEX_ENET100VG4
 0x0112

	)

1591 
	#PCI_VENDOR_ID_RP
 0x11„

	)

1592 
	#PCI_DEVICE_ID_RP32INTF
 0x0001

	)

1593 
	#PCI_DEVICE_ID_RP8INTF
 0x0002

	)

1594 
	#PCI_DEVICE_ID_RP16INTF
 0x0003

	)

1595 
	#PCI_DEVICE_ID_RP4QUAD
 0x0004

	)

1596 
	#PCI_DEVICE_ID_RP8OCTA
 0x0005

	)

1597 
	#PCI_DEVICE_ID_RP8J
 0x0006

	)

1598 
	#PCI_DEVICE_ID_RP4J
 0x0007

	)

1599 
	#PCI_DEVICE_ID_RP8SNI
 0x0008

	)

1600 
	#PCI_DEVICE_ID_RP16SNI
 0x0009

	)

1601 
	#PCI_DEVICE_ID_RPP4
 0x000A

	)

1602 
	#PCI_DEVICE_ID_RPP8
 0x000B

	)

1603 
	#PCI_DEVICE_ID_RP4M
 0x000D

	)

1604 
	#PCI_DEVICE_ID_RP2_232
 0x000E

	)

1605 
	#PCI_DEVICE_ID_RP2_422
 0x000F

	)

1606 
	#PCI_DEVICE_ID_URP32INTF
 0x0801

	)

1607 
	#PCI_DEVICE_ID_URP8INTF
 0x0802

	)

1608 
	#PCI_DEVICE_ID_URP16INTF
 0x0803

	)

1609 
	#PCI_DEVICE_ID_URP8OCTA
 0x0805

	)

1610 
	#PCI_DEVICE_ID_UPCI_RM3_8PORT
 0x080C

	)

1611 
	#PCI_DEVICE_ID_UPCI_RM3_4PORT
 0x080D

	)

1612 
	#PCI_DEVICE_ID_CRP16INTF
 0x0903

	)

1614 
	#PCI_VENDOR_ID_CYCLADES
 0x120e

	)

1615 
	#PCI_DEVICE_ID_CYCLOM_Y_Lo
 0x0100

	)

1616 
	#PCI_DEVICE_ID_CYCLOM_Y_Hi
 0x0101

	)

1617 
	#PCI_DEVICE_ID_CYCLOM_4Y_Lo
 0x0102

	)

1618 
	#PCI_DEVICE_ID_CYCLOM_4Y_Hi
 0x0103

	)

1619 
	#PCI_DEVICE_ID_CYCLOM_8Y_Lo
 0x0104

	)

1620 
	#PCI_DEVICE_ID_CYCLOM_8Y_Hi
 0x0105

	)

1621 
	#PCI_DEVICE_ID_CYCLOM_Z_Lo
 0x0200

	)

1622 
	#PCI_DEVICE_ID_CYCLOM_Z_Hi
 0x0201

	)

1623 
	#PCI_DEVICE_ID_PC300_RX_2
 0x0300

	)

1624 
	#PCI_DEVICE_ID_PC300_RX_1
 0x0301

	)

1625 
	#PCI_DEVICE_ID_PC300_TE_2
 0x0310

	)

1626 
	#PCI_DEVICE_ID_PC300_TE_1
 0x0311

	)

1627 
	#PCI_DEVICE_ID_PC300_TE_M_2
 0x0320

	)

1628 
	#PCI_DEVICE_ID_PC300_TE_M_1
 0x0321

	)

1630 
	#PCI_VENDOR_ID_ESSENTIAL
 0x120f

	)

1631 
	#PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER
 0x0001

	)

1633 
	#PCI_VENDOR_ID_O2
 0x1217

	)

1634 
	#PCI_DEVICE_ID_O2_6729
 0x6729

	)

1635 
	#PCI_DEVICE_ID_O2_6730
 0x673a

	)

1636 
	#PCI_DEVICE_ID_O2_6832
 0x6832

	)

1637 
	#PCI_DEVICE_ID_O2_6836
 0x6836

	)

1638 
	#PCI_DEVICE_ID_O2_8120
 0x8120

	)

1639 
	#PCI_DEVICE_ID_O2_8220
 0x8220

	)

1640 
	#PCI_DEVICE_ID_O2_8221
 0x8221

	)

1641 
	#PCI_DEVICE_ID_O2_8320
 0x8320

	)

1642 
	#PCI_DEVICE_ID_O2_8321
 0x8321

	)

1644 
	#PCI_VENDOR_ID_3DFX
 0x121a

	)

1645 
	#PCI_DEVICE_ID_3DFX_VOODOO
 0x0001

	)

1646 
	#PCI_DEVICE_ID_3DFX_VOODOO2
 0x0002

	)

1647 
	#PCI_DEVICE_ID_3DFX_BANSHEE
 0x0003

	)

1648 
	#PCI_DEVICE_ID_3DFX_VOODOO3
 0x0005

	)

1649 
	#PCI_DEVICE_ID_3DFX_VOODOO5
 0x0009

	)

1653 
	#PCI_VENDOR_ID_AVM
 0x1244

	)

1654 
	#PCI_DEVICE_ID_AVM_B1
 0x0700

	)

1655 
	#PCI_DEVICE_ID_AVM_C4
 0x0800

	)

1656 
	#PCI_DEVICE_ID_AVM_A1
 0x0a00

	)

1657 
	#PCI_DEVICE_ID_AVM_A1_V2
 0x0e00

	)

1658 
	#PCI_DEVICE_ID_AVM_C2
 0x1100

	)

1659 
	#PCI_DEVICE_ID_AVM_T1
 0x1200

	)

1662 
	#PCI_VENDOR_ID_STALLION
 0x124d

	)

1665 
	#PCI_VENDOR_ID_AT
 0x1259

	)

1666 
	#PCI_SUBDEVICE_ID_AT_2700FX
 0x2701

	)

1667 
	#PCI_SUBDEVICE_ID_AT_2701FX
 0x2703

	)

1669 
	#PCI_VENDOR_ID_ESS
 0x125d

	)

1670 
	#PCI_DEVICE_ID_ESS_ESS1968
 0x1968

	)

1671 
	#PCI_DEVICE_ID_ESS_ESS1978
 0x1978

	)

1672 
	#PCI_DEVICE_ID_ESS_ALLEGRO_1
 0x1988

	)

1673 
	#PCI_DEVICE_ID_ESS_ALLEGRO
 0x1989

	)

1674 
	#PCI_DEVICE_ID_ESS_CANYON3D_2LE
 0x1990

	)

1675 
	#PCI_DEVICE_ID_ESS_CANYON3D_2
 0x1992

	)

1676 
	#PCI_DEVICE_ID_ESS_MAESTRO3
 0x1998

	)

1677 
	#PCI_DEVICE_ID_ESS_MAESTRO3_1
 0x1999

	)

1678 
	#PCI_DEVICE_ID_ESS_MAESTRO3_HW
 0x199a

	)

1679 
	#PCI_DEVICE_ID_ESS_MAESTRO3_2
 0x199b

	)

1681 
	#PCI_VENDOR_ID_SATSAGEM
 0x1267

	)

1682 
	#PCI_DEVICE_ID_SATSAGEM_NICCY
 0x1016

	)

1685 
	#PCI_VENDOR_ID_ENSONIQ
 0x1274

	)

1686 
	#PCI_DEVICE_ID_ENSONIQ_CT5880
 0x5880

	)

1687 
	#PCI_DEVICE_ID_ENSONIQ_ES1370
 0x5000

	)

1688 
	#PCI_DEVICE_ID_ENSONIQ_ES1371
 0x1371

	)

1690 
	#PCI_VENDOR_ID_TRANSMETA
 0x1279

	)

1691 
	#PCI_DEVICE_ID_EFFICEON
 0x0060

	)

1693 
	#PCI_VENDOR_ID_ROCKWELL
 0x127A

	)

1695 
	#PCI_VENDOR_ID_ITE
 0x1283

	)

1696 
	#PCI_DEVICE_ID_ITE_IT8172G
 0x8172

	)

1697 
	#PCI_DEVICE_ID_ITE_IT8172G_AUDIO
 0x0801

	)

1698 
	#PCI_DEVICE_ID_ITE_8211
 0x8211

	)

1699 
	#PCI_DEVICE_ID_ITE_8212
 0x8212

	)

1700 
	#PCI_DEVICE_ID_ITE_8213
 0x8213

	)

1701 
	#PCI_DEVICE_ID_ITE_8872
 0x8872

	)

1702 
	#PCI_DEVICE_ID_ITE_IT8330G_0
 0xe886

	)

1705 
	#PCI_DEVICE_ID_ESS_ESS0100
 0x0100

	)

1707 
	#PCI_VENDOR_ID_ALTEON
 0x12´

	)

1710 
	#PCI_SUBVENDOR_ID_CONNECT_TECH
 0x12c4

	)

1711 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232
 0x0001

	)

1712 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232
 0x0002

	)

1713 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232
 0x0003

	)

1714 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485
 0x0004

	)

1715 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4
 0x0005

	)

1716 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485
 0x0006

	)

1717 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2
 0x0007

	)

1718 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485
 0x0008

	)

1719 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6
 0x0009

	)

1720 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1
 0x000A

	)

1721 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1
 0x000B

	)

1722 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ
 0x000C

	)

1723 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM
 0x000D

	)

1724 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI
 0x0100

	)

1725 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2
 0x0201

	)

1726 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4
 0x0202

	)

1727 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232
 0x0300

	)

1728 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232
 0x0301

	)

1729 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232
 0x0302

	)

1730 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1
 0x0310

	)

1731 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2
 0x0311

	)

1732 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4
 0x0312

	)

1733 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2
 0x0320

	)

1734 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4
 0x0321

	)

1735 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8
 0x0322

	)

1736 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485
 0x0330

	)

1737 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485
 0x0331

	)

1738 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485
 0x0332

	)

1741 
	#PCI_VENDOR_ID_NVIDIA_SGS
 0x12d2

	)

1742 
	#PCI_DEVICE_ID_NVIDIA_SGS_RIVA128
 0x0018

	)

1744 
	#PCI_SUBVENDOR_ID_CHASE_PCIFAST
 0x12E0

	)

1745 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST4
 0x0031

	)

1746 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST8
 0x0021

	)

1747 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST16
 0x0011

	)

1748 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC
 0x0041

	)

1749 
	#PCI_SUBVENDOR_ID_CHASE_PCIRAS
 0x124D

	)

1750 
	#PCI_SUBDEVICE_ID_CHASE_PCIRAS4
 0xF001

	)

1751 
	#PCI_SUBDEVICE_ID_CHASE_PCIRAS8
 0xF010

	)

1753 
	#PCI_VENDOR_ID_AUREAL
 0x12eb

	)

1754 
	#PCI_DEVICE_ID_AUREAL_VORTEX_1
 0x0001

	)

1755 
	#PCI_DEVICE_ID_AUREAL_VORTEX_2
 0x0002

	)

1756 
	#PCI_DEVICE_ID_AUREAL_ADVANTAGE
 0x0003

	)

1758 
	#PCI_VENDOR_ID_ELECTRONICDESIGNGMBH
 0x12f8

	)

1759 
	#PCI_DEVICE_ID_LML_33R10
 0x8a02

	)

1762 
	#PCI_VENDOR_ID_SIIG
 0x131f

	)

1763 
	#PCI_SUBVENDOR_ID_SIIG
 0x131f

	)

1764 
	#PCI_DEVICE_ID_SIIG_1S_10x_550
 0x1000

	)

1765 
	#PCI_DEVICE_ID_SIIG_1S_10x_650
 0x1001

	)

1766 
	#PCI_DEVICE_ID_SIIG_1S_10x_850
 0x1002

	)

1767 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_550
 0x1010

	)

1768 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_650
 0x1011

	)

1769 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_850
 0x1012

	)

1770 
	#PCI_DEVICE_ID_SIIG_1P_10x
 0x1020

	)

1771 
	#PCI_DEVICE_ID_SIIG_2P_10x
 0x1021

	)

1772 
	#PCI_DEVICE_ID_SIIG_2S_10x_550
 0x1030

	)

1773 
	#PCI_DEVICE_ID_SIIG_2S_10x_650
 0x1031

	)

1774 
	#PCI_DEVICE_ID_SIIG_2S_10x_850
 0x1032

	)

1775 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_550
 0x1034

	)

1776 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_650
 0x1035

	)

1777 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_850
 0x1036

	)

1778 
	#PCI_DEVICE_ID_SIIG_4S_10x_550
 0x1050

	)

1779 
	#PCI_DEVICE_ID_SIIG_4S_10x_650
 0x1051

	)

1780 
	#PCI_DEVICE_ID_SIIG_4S_10x_850
 0x1052

	)

1781 
	#PCI_DEVICE_ID_SIIG_1S_20x_550
 0x2000

	)

1782 
	#PCI_DEVICE_ID_SIIG_1S_20x_650
 0x2001

	)

1783 
	#PCI_DEVICE_ID_SIIG_1S_20x_850
 0x2002

	)

1784 
	#PCI_DEVICE_ID_SIIG_1P_20x
 0x2020

	)

1785 
	#PCI_DEVICE_ID_SIIG_2P_20x
 0x2021

	)

1786 
	#PCI_DEVICE_ID_SIIG_2S_20x_550
 0x2030

	)

1787 
	#PCI_DEVICE_ID_SIIG_2S_20x_650
 0x2031

	)

1788 
	#PCI_DEVICE_ID_SIIG_2S_20x_850
 0x2032

	)

1789 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_550
 0x2040

	)

1790 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_650
 0x2041

	)

1791 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_850
 0x2042

	)

1792 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_550
 0x2010

	)

1793 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_650
 0x2011

	)

1794 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_850
 0x2012

	)

1795 
	#PCI_DEVICE_ID_SIIG_4S_20x_550
 0x2050

	)

1796 
	#PCI_DEVICE_ID_SIIG_4S_20x_650
 0x2051

	)

1797 
	#PCI_DEVICE_ID_SIIG_4S_20x_850
 0x2052

	)

1798 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_550
 0x2060

	)

1799 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_650
 0x2061

	)

1800 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_850
 0x2062

	)

1801 
	#PCI_DEVICE_ID_SIIG_8S_20x_550
 0x2080

	)

1802 
	#PCI_DEVICE_ID_SIIG_8S_20x_650
 0x2081

	)

1803 
	#PCI_DEVICE_ID_SIIG_8S_20x_850
 0x2082

	)

1804 
	#PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL
 0x2050

	)

1806 
	#PCI_VENDOR_ID_RADISYS
 0x1331

	)

1808 
	#PCI_VENDOR_ID_DOMEX
 0x134a

	)

1809 
	#PCI_DEVICE_ID_DOMEX_DMX3191D
 0x0001

	)

1811 
	#PCI_VENDOR_ID_INTASHIELD
 0x135a

	)

1812 
	#PCI_DEVICE_ID_INTASHIELD_IS200
 0x0d80

	)

1814 
	#PCI_VENDOR_ID_QUATECH
 0x135C

	)

1815 
	#PCI_DEVICE_ID_QUATECH_QSC100
 0x0010

	)

1816 
	#PCI_DEVICE_ID_QUATECH_DSC100
 0x0020

	)

1817 
	#PCI_DEVICE_ID_QUATECH_ESC100D
 0x0050

	)

1818 
	#PCI_DEVICE_ID_QUATECH_ESC100M
 0x0060

	)

1820 
	#PCI_VENDOR_ID_SEALEVEL
 0x135e

	)

1821 
	#PCI_DEVICE_ID_SEALEVEL_U530
 0x7101

	)

1822 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM2
 0x7201

	)

1823 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM422
 0x7402

	)

1824 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM232
 0x7202

	)

1825 
	#PCI_DEVICE_ID_SEALEVEL_COMM4
 0x7401

	)

1826 
	#PCI_DEVICE_ID_SEALEVEL_COMM8
 0x7801

	)

1827 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM8
 0x7804

	)

1829 
	#PCI_VENDOR_ID_HYPERCOPE
 0x1365

	)

1830 
	#PCI_DEVICE_ID_HYPERCOPE_PLX
 0x9050

	)

1831 
	#PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO
 0x0104

	)

1832 
	#PCI_SUBDEVICE_ID_HYPERCOPE_ERGO
 0x0106

	)

1833 
	#PCI_SUBDEVICE_ID_HYPERCOPE_METRO
 0x0107

	)

1834 
	#PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2
 0x0108

	)

1836 
	#PCI_VENDOR_ID_KAWASAKI
 0x136b

	)

1837 
	#PCI_DEVICE_ID_MCHIP_KL5A72002
 0xff01

	)

1839 
	#PCI_VENDOR_ID_CNET
 0x1371

	)

1840 
	#PCI_DEVICE_ID_CNET_GIGACARD
 0x434e

	)

1842 
	#PCI_VENDOR_ID_LMC
 0x1376

	)

1843 
	#PCI_DEVICE_ID_LMC_HSSI
 0x0003

	)

1844 
	#PCI_DEVICE_ID_LMC_DS3
 0x0004

	)

1845 
	#PCI_DEVICE_ID_LMC_SSI
 0x0005

	)

1846 
	#PCI_DEVICE_ID_LMC_T1
 0x0006

	)

1849 
	#PCI_VENDOR_ID_NETGEAR
 0x1385

	)

1850 
	#PCI_DEVICE_ID_NETGEAR_GA620
 0x620a

	)

1852 
	#PCI_VENDOR_ID_APPLICOM
 0x1389

	)

1853 
	#PCI_DEVICE_ID_APPLICOM_PCIGENERIC
 0x0001

	)

1854 
	#PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN
 0x0002

	)

1855 
	#PCI_DEVICE_ID_APPLICOM_PCI2000PFB
 0x0003

	)

1857 
	#PCI_VENDOR_ID_MOXA
 0x1393

	)

1858 
	#PCI_DEVICE_ID_MOXA_RC7000
 0x0001

	)

1859 
	#PCI_DEVICE_ID_MOXA_CP102
 0x1020

	)

1860 
	#PCI_DEVICE_ID_MOXA_CP102UL
 0x1021

	)

1861 
	#PCI_DEVICE_ID_MOXA_CP102U
 0x1022

	)

1862 
	#PCI_DEVICE_ID_MOXA_C104
 0x1040

	)

1863 
	#PCI_DEVICE_ID_MOXA_CP104U
 0x1041

	)

1864 
	#PCI_DEVICE_ID_MOXA_CP104JU
 0x1042

	)

1865 
	#PCI_DEVICE_ID_MOXA_CT114
 0x1140

	)

1866 
	#PCI_DEVICE_ID_MOXA_CP114
 0x1141

	)

1867 
	#PCI_DEVICE_ID_MOXA_CP118U
 0x1180

	)

1868 
	#PCI_DEVICE_ID_MOXA_CP132
 0x1320

	)

1869 
	#PCI_DEVICE_ID_MOXA_CP132U
 0x1321

	)

1870 
	#PCI_DEVICE_ID_MOXA_CP134U
 0x1340

	)

1871 
	#PCI_DEVICE_ID_MOXA_C168
 0x1680

	)

1872 
	#PCI_DEVICE_ID_MOXA_CP168U
 0x1681

	)

1874 
	#PCI_VENDOR_ID_CCD
 0x1397

	)

1875 
	#PCI_DEVICE_ID_CCD_2BD0
 0x2bd0

	)

1876 
	#PCI_DEVICE_ID_CCD_B000
 0xb000

	)

1877 
	#PCI_DEVICE_ID_CCD_B006
 0xb006

	)

1878 
	#PCI_DEVICE_ID_CCD_B007
 0xb007

	)

1879 
	#PCI_DEVICE_ID_CCD_B008
 0xb008

	)

1880 
	#PCI_DEVICE_ID_CCD_B009
 0xb009

	)

1881 
	#PCI_DEVICE_ID_CCD_B00A
 0xb00a

	)

1882 
	#PCI_DEVICE_ID_CCD_B00B
 0xb00b

	)

1883 
	#PCI_DEVICE_ID_CCD_B00C
 0xb00c

	)

1884 
	#PCI_DEVICE_ID_CCD_B100
 0xb100

	)

1885 
	#PCI_DEVICE_ID_CCD_B700
 0xb700

	)

1886 
	#PCI_DEVICE_ID_CCD_B701
 0xb701

	)

1888 
	#PCI_VENDOR_ID_EXAR
 0x13a8

	)

1889 
	#PCI_DEVICE_ID_EXAR_XR17C152
 0x0152

	)

1890 
	#PCI_DEVICE_ID_EXAR_XR17C154
 0x0154

	)

1891 
	#PCI_DEVICE_ID_EXAR_XR17C158
 0x0158

	)

1893 
	#PCI_VENDOR_ID_MICROGATE
 0x13c0

	)

1894 
	#PCI_DEVICE_ID_MICROGATE_USC
 0x0010

	)

1895 
	#PCI_DEVICE_ID_MICROGATE_SCA
 0x0030

	)

1897 
	#PCI_VENDOR_ID_3WARE
 0x13C1

	)

1898 
	#PCI_DEVICE_ID_3WARE_1000
 0x1000

	)

1899 
	#PCI_DEVICE_ID_3WARE_7000
 0x1001

	)

1900 
	#PCI_DEVICE_ID_3WARE_9000
 0x1002

	)

1902 
	#PCI_VENDOR_ID_IOMEGA
 0x13ˇ

	)

1903 
	#PCI_DEVICE_ID_IOMEGA_BUZ
 0x4231

	)

1905 
	#PCI_VENDOR_ID_ABOCOM
 0x13D1

	)

1906 
	#PCI_DEVICE_ID_ABOCOM_2BD1
 0x2BD1

	)

1908 
	#PCI_VENDOR_ID_CMEDIA
 0x13f6

	)

1909 
	#PCI_DEVICE_ID_CMEDIA_CM8338A
 0x0100

	)

1910 
	#PCI_DEVICE_ID_CMEDIA_CM8338B
 0x0101

	)

1911 
	#PCI_DEVICE_ID_CMEDIA_CM8738
 0x0111

	)

1912 
	#PCI_DEVICE_ID_CMEDIA_CM8738B
 0x0112

	)

1914 
	#PCI_VENDOR_ID_LAVA
 0x1407

	)

1915 
	#PCI_DEVICE_ID_LAVA_DSERIAL
 0x0100

	)

1916 
	#PCI_DEVICE_ID_LAVA_QUATRO_A
 0x0101

	)

1917 
	#PCI_DEVICE_ID_LAVA_QUATRO_B
 0x0102

	)

1918 
	#PCI_DEVICE_ID_LAVA_OCTO_A
 0x0180

	)

1919 
	#PCI_DEVICE_ID_LAVA_OCTO_B
 0x0181

	)

1920 
	#PCI_DEVICE_ID_LAVA_PORT_PLUS
 0x0200

	)

1921 
	#PCI_DEVICE_ID_LAVA_QUAD_A
 0x0201

	)

1922 
	#PCI_DEVICE_ID_LAVA_QUAD_B
 0x0202

	)

1923 
	#PCI_DEVICE_ID_LAVA_SSERIAL
 0x0500

	)

1924 
	#PCI_DEVICE_ID_LAVA_PORT_650
 0x0600

	)

1925 
	#PCI_DEVICE_ID_LAVA_PARALLEL
 0x8000

	)

1926 
	#PCI_DEVICE_ID_LAVA_DUAL_PAR_A
 0x8002

	)

1927 
	#PCI_DEVICE_ID_LAVA_DUAL_PAR_B
 0x8003

	)

1928 
	#PCI_DEVICE_ID_LAVA_BOCA_IOPPAR
 0x8800

	)

1930 
	#PCI_VENDOR_ID_TIMEDIA
 0x1409

	)

1931 
	#PCI_DEVICE_ID_TIMEDIA_1889
 0x7168

	)

1933 
	#PCI_VENDOR_ID_ICE
 0x1412

	)

1934 
	#PCI_DEVICE_ID_ICE_1712
 0x1712

	)

1935 
	#PCI_DEVICE_ID_VT1724
 0x1724

	)

1937 
	#PCI_VENDOR_ID_OXSEMI
 0x1415

	)

1938 
	#PCI_DEVICE_ID_OXSEMI_12PCI840
 0x8403

	)

1939 
	#PCI_DEVICE_ID_OXSEMI_PCIe840
 0xC000

	)

1940 
	#PCI_DEVICE_ID_OXSEMI_PCIe840_G
 0xC004

	)

1941 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_0
 0xC100

	)

1942 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_0_G
 0xC104

	)

1943 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1
 0xC110

	)

1944 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1_G
 0xC114

	)

1945 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1_U
 0xC118

	)

1946 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1_GU
 0xC11C

	)

1947 
	#PCI_DEVICE_ID_OXSEMI_16PCI954
 0x9501

	)

1948 
	#PCI_DEVICE_ID_OXSEMI_16PCI95N
 0x9511

	)

1949 
	#PCI_DEVICE_ID_OXSEMI_16PCI954PP
 0x9513

	)

1950 
	#PCI_DEVICE_ID_OXSEMI_16PCI952
 0x9521

	)

1952 
	#PCI_VENDOR_ID_SAMSUNG
 0x144d

	)

1954 
	#PCI_VENDOR_ID_GIGABYTE
 0x1458

	)

1956 
	#PCI_VENDOR_ID_AMBIT
 0x1468

	)

1958 
	#PCI_VENDOR_ID_MYRICOM
 0x14c1

	)

1960 
	#PCI_VENDOR_ID_TITAN
 0x14D2

	)

1961 
	#PCI_DEVICE_ID_TITAN_010L
 0x8001

	)

1962 
	#PCI_DEVICE_ID_TITAN_100L
 0x8010

	)

1963 
	#PCI_DEVICE_ID_TITAN_110L
 0x8011

	)

1964 
	#PCI_DEVICE_ID_TITAN_200L
 0x8020

	)

1965 
	#PCI_DEVICE_ID_TITAN_210L
 0x8021

	)

1966 
	#PCI_DEVICE_ID_TITAN_400L
 0x8040

	)

1967 
	#PCI_DEVICE_ID_TITAN_800L
 0x8080

	)

1968 
	#PCI_DEVICE_ID_TITAN_100
 0xA001

	)

1969 
	#PCI_DEVICE_ID_TITAN_200
 0xA005

	)

1970 
	#PCI_DEVICE_ID_TITAN_400
 0xA003

	)

1971 
	#PCI_DEVICE_ID_TITAN_800B
 0xA004

	)

1973 
	#PCI_VENDOR_ID_PANACOM
 0x14d4

	)

1974 
	#PCI_DEVICE_ID_PANACOM_QUADMODEM
 0x0400

	)

1975 
	#PCI_DEVICE_ID_PANACOM_DUALMODEM
 0x0402

	)

1978 
	#PCI_VENDOR_ID_AFAVLAB
 0x14db

	)

1979 
	#PCI_DEVICE_ID_AFAVLAB_P028
 0x2180

	)

1980 
	#PCI_DEVICE_ID_AFAVLAB_P030
 0x2182

	)

1981 
	#PCI_SUBDEVICE_ID_AFAVLAB_P061
 0x2150

	)

1983 
	#PCI_VENDOR_ID_BROADCOM
 0x14e4

	)

1984 
	#PCI_DEVICE_ID_TIGON3_5752
 0x1600

	)

1985 
	#PCI_DEVICE_ID_TIGON3_5752M
 0x1601

	)

1986 
	#PCI_DEVICE_ID_NX2_5709
 0x1639

	)

1987 
	#PCI_DEVICE_ID_NX2_5709S
 0x163a

	)

1988 
	#PCI_DEVICE_ID_TIGON3_5700
 0x1644

	)

1989 
	#PCI_DEVICE_ID_TIGON3_5701
 0x1645

	)

1990 
	#PCI_DEVICE_ID_TIGON3_5702
 0x1646

	)

1991 
	#PCI_DEVICE_ID_TIGON3_5703
 0x1647

	)

1992 
	#PCI_DEVICE_ID_TIGON3_5704
 0x1648

	)

1993 
	#PCI_DEVICE_ID_TIGON3_5704S_2
 0x1649

	)

1994 
	#PCI_DEVICE_ID_NX2_5706
 0x164a

	)

1995 
	#PCI_DEVICE_ID_NX2_5708
 0x164c

	)

1996 
	#PCI_DEVICE_ID_TIGON3_5702FE
 0x164d

	)

1997 
	#PCI_DEVICE_ID_NX2_57710
 0x164e

	)

1998 
	#PCI_DEVICE_ID_NX2_57711
 0x164f

	)

1999 
	#PCI_DEVICE_ID_NX2_57711E
 0x1650

	)

2000 
	#PCI_DEVICE_ID_TIGON3_5705
 0x1653

	)

2001 
	#PCI_DEVICE_ID_TIGON3_5705_2
 0x1654

	)

2002 
	#PCI_DEVICE_ID_TIGON3_5721
 0x1659

	)

2003 
	#PCI_DEVICE_ID_TIGON3_5722
 0x165a

	)

2004 
	#PCI_DEVICE_ID_TIGON3_5723
 0x165b

	)

2005 
	#PCI_DEVICE_ID_TIGON3_5705M
 0x165d

	)

2006 
	#PCI_DEVICE_ID_TIGON3_5705M_2
 0x165e

	)

2007 
	#PCI_DEVICE_ID_NX2_57712
 0x1662

	)

2008 
	#PCI_DEVICE_ID_NX2_57712E
 0x1663

	)

2009 
	#PCI_DEVICE_ID_TIGON3_5714
 0x1668

	)

2010 
	#PCI_DEVICE_ID_TIGON3_5714S
 0x1669

	)

2011 
	#PCI_DEVICE_ID_TIGON3_5780
 0x166a

	)

2012 
	#PCI_DEVICE_ID_TIGON3_5780S
 0x166b

	)

2013 
	#PCI_DEVICE_ID_TIGON3_5705F
 0x166e

	)

2014 
	#PCI_DEVICE_ID_TIGON3_5754M
 0x1672

	)

2015 
	#PCI_DEVICE_ID_TIGON3_5755M
 0x1673

	)

2016 
	#PCI_DEVICE_ID_TIGON3_5756
 0x1674

	)

2017 
	#PCI_DEVICE_ID_TIGON3_5751
 0x1677

	)

2018 
	#PCI_DEVICE_ID_TIGON3_5715
 0x1678

	)

2019 
	#PCI_DEVICE_ID_TIGON3_5715S
 0x1679

	)

2020 
	#PCI_DEVICE_ID_TIGON3_5754
 0x167a

	)

2021 
	#PCI_DEVICE_ID_TIGON3_5755
 0x167b

	)

2022 
	#PCI_DEVICE_ID_TIGON3_5751M
 0x167d

	)

2023 
	#PCI_DEVICE_ID_TIGON3_5751F
 0x167e

	)

2024 
	#PCI_DEVICE_ID_TIGON3_5787F
 0x167f

	)

2025 
	#PCI_DEVICE_ID_TIGON3_5761E
 0x1680

	)

2026 
	#PCI_DEVICE_ID_TIGON3_5761
 0x1681

	)

2027 
	#PCI_DEVICE_ID_TIGON3_5764
 0x1684

	)

2028 
	#PCI_DEVICE_ID_NX2_57800
 0x168a

	)

2029 
	#PCI_DEVICE_ID_NX2_57840
 0x168d

	)

2030 
	#PCI_DEVICE_ID_NX2_57810
 0x168e

	)

2031 
	#PCI_DEVICE_ID_TIGON3_5787M
 0x1693

	)

2032 
	#PCI_DEVICE_ID_TIGON3_5782
 0x1696

	)

2033 
	#PCI_DEVICE_ID_TIGON3_5784
 0x1698

	)

2034 
	#PCI_DEVICE_ID_TIGON3_5786
 0x169a

	)

2035 
	#PCI_DEVICE_ID_TIGON3_5787
 0x169b

	)

2036 
	#PCI_DEVICE_ID_TIGON3_5788
 0x169c

	)

2037 
	#PCI_DEVICE_ID_TIGON3_5789
 0x169d

	)

2038 
	#PCI_DEVICE_ID_NX2_57800_MF
 0x16a5

	)

2039 
	#PCI_DEVICE_ID_TIGON3_5702X
 0x16a6

	)

2040 
	#PCI_DEVICE_ID_TIGON3_5703X
 0x16a7

	)

2041 
	#PCI_DEVICE_ID_TIGON3_5704S
 0x16a8

	)

2042 
	#PCI_DEVICE_ID_NX2_57800_VF
 0x16a9

	)

2043 
	#PCI_DEVICE_ID_NX2_5706S
 0x16Ø

	)

2044 
	#PCI_DEVICE_ID_NX2_57840_MF
 0x16ab

	)

2045 
	#PCI_DEVICE_ID_NX2_5708S
 0x16ac

	)

2046 
	#PCI_DEVICE_ID_NX2_57840_VF
 0x16ad

	)

2047 
	#PCI_DEVICE_ID_NX2_57810_MF
 0x16´

	)

2048 
	#PCI_DEVICE_ID_NX2_57810_VF
 0x16af

	)

2049 
	#PCI_DEVICE_ID_TIGON3_5702A3
 0x16c6

	)

2050 
	#PCI_DEVICE_ID_TIGON3_5703A3
 0x16c7

	)

2051 
	#PCI_DEVICE_ID_TIGON3_5781
 0x16dd

	)

2052 
	#PCI_DEVICE_ID_TIGON3_5753
 0x16f7

	)

2053 
	#PCI_DEVICE_ID_TIGON3_5753M
 0x16fd

	)

2054 
	#PCI_DEVICE_ID_TIGON3_5753F
 0x16„

	)

2055 
	#PCI_DEVICE_ID_TIGON3_5901
 0x170d

	)

2056 
	#PCI_DEVICE_ID_BCM4401B1
 0x170c

	)

2057 
	#PCI_DEVICE_ID_TIGON3_5901_2
 0x170e

	)

2058 
	#PCI_DEVICE_ID_TIGON3_5906
 0x1712

	)

2059 
	#PCI_DEVICE_ID_TIGON3_5906M
 0x1713

	)

2060 
	#PCI_DEVICE_ID_BCM4401
 0x4401

	)

2061 
	#PCI_DEVICE_ID_BCM4401B0
 0x4402

	)

2063 
	#PCI_VENDOR_ID_TOPIC
 0x151f

	)

2064 
	#PCI_DEVICE_ID_TOPIC_TP560
 0x0000

	)

2066 
	#PCI_VENDOR_ID_ENE
 0x1524

	)

2067 
	#PCI_DEVICE_ID_ENE_1211
 0x1211

	)

2068 
	#PCI_DEVICE_ID_ENE_1225
 0x1225

	)

2069 
	#PCI_DEVICE_ID_ENE_1410
 0x1410

	)

2070 
	#PCI_DEVICE_ID_ENE_710
 0x1411

	)

2071 
	#PCI_DEVICE_ID_ENE_712
 0x1412

	)

2072 
	#PCI_DEVICE_ID_ENE_1420
 0x1420

	)

2073 
	#PCI_DEVICE_ID_ENE_720
 0x1421

	)

2074 
	#PCI_DEVICE_ID_ENE_722
 0x1422

	)

2076 
	#PCI_VENDOR_ID_CHELSIO
 0x1425

	)

2079 
	#PCI_VENDOR_ID_SYBA
 0x1592

	)

2080 
	#PCI_DEVICE_ID_SYBA_2P_EPP
 0x0782

	)

2081 
	#PCI_DEVICE_ID_SYBA_1P_ECP
 0x0783

	)

2083 
	#PCI_VENDOR_ID_MORETON
 0x15Ø

	)

2084 
	#PCI_DEVICE_ID_RASTEL_2PORT
 0x2000

	)

2086 
	#PCI_VENDOR_ID_ZOLTRIX
 0x15b0

	)

2087 
	#PCI_DEVICE_ID_ZOLTRIX_2BD0
 0x2bd0

	)

2089 
	#PCI_VENDOR_ID_MELLANOX
 0x15b3

	)

2090 
	#PCI_DEVICE_ID_MELLANOX_TAVOR
 0x5a44

	)

2091 
	#PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE
 0x5a46

	)

2092 
	#PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT
 0x6278

	)

2093 
	#PCI_DEVICE_ID_MELLANOX_ARBEL
 0x6282

	)

2094 
	#PCI_DEVICE_ID_MELLANOX_SINAI_OLD
 0x5e8c

	)

2095 
	#PCI_DEVICE_ID_MELLANOX_SINAI
 0x6274

	)

2097 
	#PCI_VENDOR_ID_DFI
 0x15bd

	)

2099 
	#PCI_VENDOR_ID_PDC
 0x15e9

	)

2102 
	#PCI_VENDOR_ID_FARSITE
 0x1619

	)

2103 
	#PCI_DEVICE_ID_FARSITE_T2P
 0x0400

	)

2104 
	#PCI_DEVICE_ID_FARSITE_T4P
 0x0440

	)

2105 
	#PCI_DEVICE_ID_FARSITE_T1U
 0x0610

	)

2106 
	#PCI_DEVICE_ID_FARSITE_T2U
 0x0620

	)

2107 
	#PCI_DEVICE_ID_FARSITE_T4U
 0x0640

	)

2108 
	#PCI_DEVICE_ID_FARSITE_TE1
 0x1610

	)

2109 
	#PCI_DEVICE_ID_FARSITE_TE1C
 0x1612

	)

2111 
	#PCI_VENDOR_ID_ARIMA
 0x161f

	)

2112 
	#PCI_VENDOR_ID_BROCADE
 0x1657

	)

2113 
	#PCI_DEVICE_ID_BROCADE_CT
 0x0014

	)

2114 
	#PCI_DEVICE_ID_BROCADE_FC_8G1P
 0x0017

	)

2115 
	#PCI_DEVICE_ID_BROCADE_CT_FC
 0x0021

	)

2117 
	#PCI_VENDOR_ID_SIBYTE
 0x166d

	)

2118 
	#PCI_DEVICE_ID_BCM1250_HT
 0x0002

	)

2120 
	#PCI_VENDOR_ID_ATHEROS
 0x168c

	)

2122 
	#PCI_VENDOR_ID_NETCELL
 0x169c

	)

2123 
	#PCI_DEVICE_ID_REVOLUTION
 0x0044

	)

2125 
	#PCI_VENDOR_ID_CENATEK
 0x16CA

	)

2126 
	#PCI_DEVICE_ID_CENATEK_IDE
 0x0001

	)

2128 
	#PCI_VENDOR_ID_VITESSE
 0x1725

	)

2129 
	#PCI_DEVICE_ID_VITESSE_VSC7174
 0x7174

	)

2131 
	#PCI_VENDOR_ID_LINKSYS
 0x1737

	)

2132 
	#PCI_DEVICE_ID_LINKSYS_EG1064
 0x1064

	)

2134 
	#PCI_VENDOR_ID_ALTIMA
 0x173b

	)

2135 
	#PCI_DEVICE_ID_ALTIMA_AC1000
 0x03e8

	)

2136 
	#PCI_DEVICE_ID_ALTIMA_AC1001
 0x03e9

	)

2137 
	#PCI_DEVICE_ID_ALTIMA_AC9100
 0x03ó

	)

2138 
	#PCI_DEVICE_ID_ALTIMA_AC1003
 0x03eb

	)

2140 
	#PCI_VENDOR_ID_BELKIN
 0x1799

	)

2142 
	#PCI_VENDOR_ID_ARECA
 0x17d3

	)

2143 
	#PCI_DEVICE_ID_ARECA_1110
 0x1110

	)

2144 
	#PCI_DEVICE_ID_ARECA_1120
 0x1120

	)

2145 
	#PCI_DEVICE_ID_ARECA_1130
 0x1130

	)

2146 
	#PCI_DEVICE_ID_ARECA_1160
 0x1160

	)

2147 
	#PCI_DEVICE_ID_ARECA_1170
 0x1170

	)

2148 
	#PCI_DEVICE_ID_ARECA_1200
 0x1200

	)

2149 
	#PCI_DEVICE_ID_ARECA_1201
 0x1201

	)

2150 
	#PCI_DEVICE_ID_ARECA_1202
 0x1202

	)

2151 
	#PCI_DEVICE_ID_ARECA_1210
 0x1210

	)

2152 
	#PCI_DEVICE_ID_ARECA_1220
 0x1220

	)

2153 
	#PCI_DEVICE_ID_ARECA_1230
 0x1230

	)

2154 
	#PCI_DEVICE_ID_ARECA_1260
 0x1260

	)

2155 
	#PCI_DEVICE_ID_ARECA_1270
 0x1270

	)

2156 
	#PCI_DEVICE_ID_ARECA_1280
 0x1280

	)

2157 
	#PCI_DEVICE_ID_ARECA_1380
 0x1380

	)

2158 
	#PCI_DEVICE_ID_ARECA_1381
 0x1381

	)

2159 
	#PCI_DEVICE_ID_ARECA_1680
 0x1680

	)

2160 
	#PCI_DEVICE_ID_ARECA_1681
 0x1681

	)

2162 
	#PCI_VENDOR_ID_S2IO
 0x17d5

	)

2163 
	#PCI_DEVICE_ID_S2IO_WIN
 0x5731

	)

2164 
	#PCI_DEVICE_ID_S2IO_UNI
 0x5831

	)

2165 
	#PCI_DEVICE_ID_HERC_WIN
 0x5732

	)

2166 
	#PCI_DEVICE_ID_HERC_UNI
 0x5832

	)

2169 
	#PCI_VENDOR_ID_SITECOM
 0x182d

	)

2170 
	#PCI_DEVICE_ID_SITECOM_DC105V2
 0x3069

	)

2172 
	#PCI_VENDOR_ID_TOPSPIN
 0x1867

	)

2174 
	#PCI_VENDOR_ID_TDI
 0x192E

	)

2175 
	#PCI_DEVICE_ID_TDI_EHCI
 0x0101

	)

2177 
	#PCI_VENDOR_ID_JMICRON
 0x197B

	)

2178 
	#PCI_DEVICE_ID_JMICRON_JMB360
 0x2360

	)

2179 
	#PCI_DEVICE_ID_JMICRON_JMB361
 0x2361

	)

2180 
	#PCI_DEVICE_ID_JMICRON_JMB363
 0x2363

	)

2181 
	#PCI_DEVICE_ID_JMICRON_JMB365
 0x2365

	)

2182 
	#PCI_DEVICE_ID_JMICRON_JMB366
 0x2366

	)

2183 
	#PCI_DEVICE_ID_JMICRON_JMB368
 0x2368

	)

2185 
	#PCI_VENDOR_ID_QMI
 0x1a32

	)

2187 
	#PCI_VENDOR_ID_AZWAVE
 0x1a3b

	)

2189 
	#PCI_VENDOR_ID_TEKRAM
 0x1de1

	)

2190 
	#PCI_DEVICE_ID_TEKRAM_DC290
 0xdc29

	)

2192 
	#PCI_VENDOR_ID_HINT
 0x3388

	)

2193 
	#PCI_DEVICE_ID_HINT_VXPROII_IDE
 0x8013

	)

2195 
	#PCI_VENDOR_ID_3DLABS
 0x3d3d

	)

2196 
	#PCI_DEVICE_ID_3DLABS_PERMEDIA2
 0x0007

	)

2197 
	#PCI_DEVICE_ID_3DLABS_PERMEDIA2V
 0x0009

	)

2200 
	#PCI_VENDOR_ID_AKS
 0x416c

	)

2201 
	#PCI_DEVICE_ID_AKS_ALADDINCARD
 0x0100

	)

2205 
	#PCI_VENDOR_ID_S3
 0x5333

	)

2206 
	#PCI_DEVICE_ID_S3_TRIO
 0x8811

	)

2207 
	#PCI_DEVICE_ID_S3_868
 0x8880

	)

2208 
	#PCI_DEVICE_ID_S3_968
 0x88f0

	)

2209 
	#PCI_DEVICE_ID_S3_SAVAGE4
 0x8a25

	)

2210 
	#PCI_DEVICE_ID_S3_PROSAVAGE8
 0x8d04

	)

2211 
	#PCI_DEVICE_ID_S3_SONICVIBES
 0xˇ00

	)

2213 
	#PCI_VENDOR_ID_DUNORD
 0x5544

	)

2214 
	#PCI_DEVICE_ID_DUNORD_I3000
 0x0001

	)

2217 
	#PCI_VENDOR_ID_DCI
 0x6666

	)

2218 
	#PCI_DEVICE_ID_DCI_PCCOM4
 0x0001

	)

2219 
	#PCI_DEVICE_ID_DCI_PCCOM8
 0x0002

	)

2220 
	#PCI_DEVICE_ID_DCI_PCCOM2
 0x0004

	)

2222 
	#PCI_VENDOR_ID_INTEL
 0x8086

	)

2223 
	#PCI_DEVICE_ID_INTEL_EESSC
 0x0008

	)

2224 
	#PCI_DEVICE_ID_INTEL_PXHD_0
 0x0320

	)

2225 
	#PCI_DEVICE_ID_INTEL_PXHD_1
 0x0321

	)

2226 
	#PCI_DEVICE_ID_INTEL_PXH_0
 0x0329

	)

2227 
	#PCI_DEVICE_ID_INTEL_PXH_1
 0x032A

	)

2228 
	#PCI_DEVICE_ID_INTEL_PXHV
 0x032C

	)

2229 
	#PCI_DEVICE_ID_INTEL_82375
 0x0482

	)

2230 
	#PCI_DEVICE_ID_INTEL_82424
 0x0483

	)

2231 
	#PCI_DEVICE_ID_INTEL_82378
 0x0484

	)

2232 
	#PCI_DEVICE_ID_INTEL_I960
 0x0960

	)

2233 
	#PCI_DEVICE_ID_INTEL_I960RM
 0x0962

	)

2234 
	#PCI_DEVICE_ID_INTEL_8257X_SOL
 0x1062

	)

2235 
	#PCI_DEVICE_ID_INTEL_82573E_SOL
 0x1085

	)

2236 
	#PCI_DEVICE_ID_INTEL_82573L_SOL
 0x108F

	)

2237 
	#PCI_DEVICE_ID_INTEL_82815_MC
 0x1130

	)

2238 
	#PCI_DEVICE_ID_INTEL_82815_CGC
 0x1132

	)

2239 
	#PCI_DEVICE_ID_INTEL_82092AA_0
 0x1221

	)

2240 
	#PCI_DEVICE_ID_INTEL_7505_0
 0x2550

	)

2241 
	#PCI_DEVICE_ID_INTEL_7205_0
 0x255d

	)

2242 
	#PCI_DEVICE_ID_INTEL_82437
 0x122d

	)

2243 
	#PCI_DEVICE_ID_INTEL_82371FB_0
 0x122e

	)

2244 
	#PCI_DEVICE_ID_INTEL_82371FB_1
 0x1230

	)

2245 
	#PCI_DEVICE_ID_INTEL_82371MX
 0x1234

	)

2246 
	#PCI_DEVICE_ID_INTEL_82441
 0x1237

	)

2247 
	#PCI_DEVICE_ID_INTEL_82380FB
 0x124b

	)

2248 
	#PCI_DEVICE_ID_INTEL_82439
 0x1250

	)

2249 
	#PCI_DEVICE_ID_INTEL_80960_RP
 0x1960

	)

2250 
	#PCI_DEVICE_ID_INTEL_82840_HB
 0x1a21

	)

2251 
	#PCI_DEVICE_ID_INTEL_82845_HB
 0x1a30

	)

2252 
	#PCI_DEVICE_ID_INTEL_IOAT
 0x1a38

	)

2253 
	#PCI_DEVICE_ID_INTEL_CPT_SMBUS
 0x1c22

	)

2254 
	#PCI_DEVICE_ID_INTEL_CPT_LPC_MIN
 0x1c41

	)

2255 
	#PCI_DEVICE_ID_INTEL_CPT_LPC_MAX
 0x1c5f

	)

2256 
	#PCI_DEVICE_ID_INTEL_PANTHERPOINT_SMBUS
 0x1e22

	)

2257 
	#PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MIN
 0x1e40

	)

2258 
	#PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MAX
 0x1e5f

	)

2259 
	#PCI_DEVICE_ID_INTEL_PATSBURG_SMBUS
 0x1d22

	)

2260 
	#PCI_DEVICE_ID_INTEL_PATSBURG_LPC_0
 0x1d40

	)

2261 
	#PCI_DEVICE_ID_INTEL_PATSBURG_LPC_1
 0x1d41

	)

2262 
	#PCI_DEVICE_ID_INTEL_82801AA_0
 0x2410

	)

2263 
	#PCI_DEVICE_ID_INTEL_82801AA_1
 0x2411

	)

2264 
	#PCI_DEVICE_ID_INTEL_82801AA_3
 0x2413

	)

2265 
	#PCI_DEVICE_ID_INTEL_82801AA_5
 0x2415

	)

2266 
	#PCI_DEVICE_ID_INTEL_82801AA_6
 0x2416

	)

2267 
	#PCI_DEVICE_ID_INTEL_82801AA_8
 0x2418

	)

2268 
	#PCI_DEVICE_ID_INTEL_82801AB_0
 0x2420

	)

2269 
	#PCI_DEVICE_ID_INTEL_82801AB_1
 0x2421

	)

2270 
	#PCI_DEVICE_ID_INTEL_82801AB_3
 0x2423

	)

2271 
	#PCI_DEVICE_ID_INTEL_82801AB_5
 0x2425

	)

2272 
	#PCI_DEVICE_ID_INTEL_82801AB_6
 0x2426

	)

2273 
	#PCI_DEVICE_ID_INTEL_82801AB_8
 0x2428

	)

2274 
	#PCI_DEVICE_ID_INTEL_82801BA_0
 0x2440

	)

2275 
	#PCI_DEVICE_ID_INTEL_82801BA_2
 0x2443

	)

2276 
	#PCI_DEVICE_ID_INTEL_82801BA_4
 0x2445

	)

2277 
	#PCI_DEVICE_ID_INTEL_82801BA_6
 0x2448

	)

2278 
	#PCI_DEVICE_ID_INTEL_82801BA_8
 0x244a

	)

2279 
	#PCI_DEVICE_ID_INTEL_82801BA_9
 0x244b

	)

2280 
	#PCI_DEVICE_ID_INTEL_82801BA_10
 0x244c

	)

2281 
	#PCI_DEVICE_ID_INTEL_82801BA_11
 0x244e

	)

2282 
	#PCI_DEVICE_ID_INTEL_82801E_0
 0x2450

	)

2283 
	#PCI_DEVICE_ID_INTEL_82801E_11
 0x245b

	)

2284 
	#PCI_DEVICE_ID_INTEL_82801CA_0
 0x2480

	)

2285 
	#PCI_DEVICE_ID_INTEL_82801CA_3
 0x2483

	)

2286 
	#PCI_DEVICE_ID_INTEL_82801CA_5
 0x2485

	)

2287 
	#PCI_DEVICE_ID_INTEL_82801CA_6
 0x2486

	)

2288 
	#PCI_DEVICE_ID_INTEL_82801CA_10
 0x248a

	)

2289 
	#PCI_DEVICE_ID_INTEL_82801CA_11
 0x248b

	)

2290 
	#PCI_DEVICE_ID_INTEL_82801CA_12
 0x248c

	)

2291 
	#PCI_DEVICE_ID_INTEL_82801DB_0
 0x24c0

	)

2292 
	#PCI_DEVICE_ID_INTEL_82801DB_1
 0x24c1

	)

2293 
	#PCI_DEVICE_ID_INTEL_82801DB_3
 0x24c3

	)

2294 
	#PCI_DEVICE_ID_INTEL_82801DB_5
 0x24c5

	)

2295 
	#PCI_DEVICE_ID_INTEL_82801DB_6
 0x24c6

	)

2296 
	#PCI_DEVICE_ID_INTEL_82801DB_9
 0x24c9

	)

2297 
	#PCI_DEVICE_ID_INTEL_82801DB_10
 0x24ˇ

	)

2298 
	#PCI_DEVICE_ID_INTEL_82801DB_11
 0x24cb

	)

2299 
	#PCI_DEVICE_ID_INTEL_82801DB_12
 0x24cc

	)

2300 
	#PCI_DEVICE_ID_INTEL_82801EB_0
 0x24d0

	)

2301 
	#PCI_DEVICE_ID_INTEL_82801EB_1
 0x24d1

	)

2302 
	#PCI_DEVICE_ID_INTEL_82801EB_3
 0x24d3

	)

2303 
	#PCI_DEVICE_ID_INTEL_82801EB_5
 0x24d5

	)

2304 
	#PCI_DEVICE_ID_INTEL_82801EB_6
 0x24d6

	)

2305 
	#PCI_DEVICE_ID_INTEL_82801EB_11
 0x24db

	)

2306 
	#PCI_DEVICE_ID_INTEL_82801EB_13
 0x24dd

	)

2307 
	#PCI_DEVICE_ID_INTEL_ESB_1
 0x25a1

	)

2308 
	#PCI_DEVICE_ID_INTEL_ESB_2
 0x25a2

	)

2309 
	#PCI_DEVICE_ID_INTEL_ESB_4
 0x25a4

	)

2310 
	#PCI_DEVICE_ID_INTEL_ESB_5
 0x25a6

	)

2311 
	#PCI_DEVICE_ID_INTEL_ESB_9
 0x25ab

	)

2312 
	#PCI_DEVICE_ID_INTEL_82820_HB
 0x2500

	)

2313 
	#PCI_DEVICE_ID_INTEL_82820_UP_HB
 0x2501

	)

2314 
	#PCI_DEVICE_ID_INTEL_82850_HB
 0x2530

	)

2315 
	#PCI_DEVICE_ID_INTEL_82860_HB
 0x2531

	)

2316 
	#PCI_DEVICE_ID_INTEL_E7501_MCH
 0x254c

	)

2317 
	#PCI_DEVICE_ID_INTEL_82845G_HB
 0x2560

	)

2318 
	#PCI_DEVICE_ID_INTEL_82845G_IG
 0x2562

	)

2319 
	#PCI_DEVICE_ID_INTEL_82865_HB
 0x2570

	)

2320 
	#PCI_DEVICE_ID_INTEL_82865_IG
 0x2572

	)

2321 
	#PCI_DEVICE_ID_INTEL_82875_HB
 0x2578

	)

2322 
	#PCI_DEVICE_ID_INTEL_82915G_HB
 0x2580

	)

2323 
	#PCI_DEVICE_ID_INTEL_82915G_IG
 0x2582

	)

2324 
	#PCI_DEVICE_ID_INTEL_82915GM_HB
 0x2590

	)

2325 
	#PCI_DEVICE_ID_INTEL_82915GM_IG
 0x2592

	)

2326 
	#PCI_DEVICE_ID_INTEL_5000_ERR
 0x25F0

	)

2327 
	#PCI_DEVICE_ID_INTEL_5000_FBD0
 0x25F5

	)

2328 
	#PCI_DEVICE_ID_INTEL_5000_FBD1
 0x25F6

	)

2329 
	#PCI_DEVICE_ID_INTEL_82945G_HB
 0x2770

	)

2330 
	#PCI_DEVICE_ID_INTEL_82945G_IG
 0x2772

	)

2331 
	#PCI_DEVICE_ID_INTEL_3000_HB
 0x2778

	)

2332 
	#PCI_DEVICE_ID_INTEL_82945GM_HB
 0x27A0

	)

2333 
	#PCI_DEVICE_ID_INTEL_82945GM_IG
 0x27A2

	)

2334 
	#PCI_DEVICE_ID_INTEL_82945GME_IG
 0x27AE

	)

2335 
	#PCI_DEVICE_ID_INTEL_ICH6_0
 0x2640

	)

2336 
	#PCI_DEVICE_ID_INTEL_ICH6_1
 0x2641

	)

2337 
	#PCI_DEVICE_ID_INTEL_ICH6_2
 0x2642

	)

2338 
	#PCI_DEVICE_ID_INTEL_ICH6_16
 0x266a

	)

2339 
	#PCI_DEVICE_ID_INTEL_ICH6_17
 0x266d

	)

2340 
	#PCI_DEVICE_ID_INTEL_ICH6_18
 0x266e

	)

2341 
	#PCI_DEVICE_ID_INTEL_ICH6_19
 0x266f

	)

2342 
	#PCI_DEVICE_ID_INTEL_ESB2_0
 0x2670

	)

2343 
	#PCI_DEVICE_ID_INTEL_ESB2_14
 0x2698

	)

2344 
	#PCI_DEVICE_ID_INTEL_ESB2_17
 0x269b

	)

2345 
	#PCI_DEVICE_ID_INTEL_ESB2_18
 0x269e

	)

2346 
	#PCI_DEVICE_ID_INTEL_ICH7_0
 0x27b8

	)

2347 
	#PCI_DEVICE_ID_INTEL_ICH7_1
 0x27b9

	)

2348 
	#PCI_DEVICE_ID_INTEL_ICH7_30
 0x27b0

	)

2349 
	#PCI_DEVICE_ID_INTEL_ICH7_31
 0x27bd

	)

2350 
	#PCI_DEVICE_ID_INTEL_ICH7_17
 0x27da

	)

2351 
	#PCI_DEVICE_ID_INTEL_ICH7_19
 0x27dd

	)

2352 
	#PCI_DEVICE_ID_INTEL_ICH7_20
 0x27de

	)

2353 
	#PCI_DEVICE_ID_INTEL_ICH7_21
 0x27df

	)

2354 
	#PCI_DEVICE_ID_INTEL_ICH8_0
 0x2810

	)

2355 
	#PCI_DEVICE_ID_INTEL_ICH8_1
 0x2811

	)

2356 
	#PCI_DEVICE_ID_INTEL_ICH8_2
 0x2812

	)

2357 
	#PCI_DEVICE_ID_INTEL_ICH8_3
 0x2814

	)

2358 
	#PCI_DEVICE_ID_INTEL_ICH8_4
 0x2815

	)

2359 
	#PCI_DEVICE_ID_INTEL_ICH8_5
 0x283e

	)

2360 
	#PCI_DEVICE_ID_INTEL_ICH8_6
 0x2850

	)

2361 
	#PCI_DEVICE_ID_INTEL_ICH9_0
 0x2910

	)

2362 
	#PCI_DEVICE_ID_INTEL_ICH9_1
 0x2911

	)

2363 
	#PCI_DEVICE_ID_INTEL_ICH9_2
 0x2912

	)

2364 
	#PCI_DEVICE_ID_INTEL_ICH9_3
 0x2913

	)

2365 
	#PCI_DEVICE_ID_INTEL_ICH9_4
 0x2914

	)

2366 
	#PCI_DEVICE_ID_INTEL_ICH9_5
 0x2915

	)

2367 
	#PCI_DEVICE_ID_INTEL_ICH9_6
 0x2930

	)

2368 
	#PCI_DEVICE_ID_INTEL_I7_MCR
 0x2c18

	)

2369 
	#PCI_DEVICE_ID_INTEL_I7_MC_TAD
 0x2c19

	)

2370 
	#PCI_DEVICE_ID_INTEL_I7_MC_RAS
 0x2c1a

	)

2371 
	#PCI_DEVICE_ID_INTEL_I7_MC_TEST
 0x2c1c

	)

2372 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_CTRL
 0x2c20

	)

2373 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_ADDR
 0x2c21

	)

2374 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_RANK
 0x2c22

	)

2375 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_TC
 0x2c23

	)

2376 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_CTRL
 0x2c28

	)

2377 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_ADDR
 0x2c29

	)

2378 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_RANK
 0x2c2a

	)

2379 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_TC
 0x2c2b

	)

2380 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_CTRL
 0x2c30

	)

2381 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_ADDR
 0x2c31

	)

2382 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_RANK
 0x2c32

	)

2383 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_TC
 0x2c33

	)

2384 
	#PCI_DEVICE_ID_INTEL_I7_NONCORE
 0x2c41

	)

2385 
	#PCI_DEVICE_ID_INTEL_I7_NONCORE_ALT
 0x2c40

	)

2386 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE
 0x2c50

	)

2387 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_ALT
 0x2c51

	)

2388 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_REV2
 0x2c70

	)

2389 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_SAD
 0x2c81

	)

2390 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0
 0x2c90

	)

2391 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_PHY0
 0x2c91

	)

2392 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR
 0x2c98

	)

2393 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD
 0x2c99

	)

2394 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST
 0x2c9C

	)

2395 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL
 0x2ˇ0

	)

2396 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR
 0x2ˇ1

	)

2397 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK
 0x2ˇ2

	)

2398 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC
 0x2ˇ3

	)

2399 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL
 0x2ˇ8

	)

2400 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR
 0x2ˇ9

	)

2401 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK
 0x2ˇa

	)

2402 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC
 0x2ˇb

	)

2403 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR_REV2
 0x2d98

	)

2404 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD_REV2
 0x2d99

	)

2405 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_RAS_REV2
 0x2d9a

	)

2406 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST_REV2
 0x2d9c

	)

2407 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL_REV2
 0x2da0

	)

2408 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR_REV2
 0x2da1

	)

2409 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK_REV2
 0x2da2

	)

2410 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC_REV2
 0x2da3

	)

2411 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL_REV2
 0x2da8

	)

2412 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR_REV2
 0x2da9

	)

2413 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK_REV2
 0x2dØ

	)

2414 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC_REV2
 0x2dab

	)

2415 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_CTRL_REV2
 0x2db0

	)

2416 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_ADDR_REV2
 0x2db1

	)

2417 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_RANK_REV2
 0x2db2

	)

2418 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_TC_REV2
 0x2db3

	)

2419 
	#PCI_DEVICE_ID_INTEL_82855PM_HB
 0x3340

	)

2420 
	#PCI_DEVICE_ID_INTEL_IOAT_SNB
 0x402f

	)

2421 
	#PCI_DEVICE_ID_INTEL_IOAT_CNB
 0x360b

	)

2422 
	#PCI_DEVICE_ID_INTEL_IOAT_SCNB
 0x65ff

	)

2423 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG4
 0x3429

	)

2424 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG5
 0x342a

	)

2425 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG6
 0x342b

	)

2426 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG7
 0x342c

	)

2427 
	#PCI_DEVICE_ID_INTEL_X58_HUB_MGMT
 0x342e

	)

2428 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG0
 0x3430

	)

2429 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG1
 0x3431

	)

2430 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG2
 0x3432

	)

2431 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG3
 0x3433

	)

2432 
	#PCI_DEVICE_ID_INTEL_82830_HB
 0x3575

	)

2433 
	#PCI_DEVICE_ID_INTEL_82830_CGC
 0x3577

	)

2434 
	#PCI_DEVICE_ID_INTEL_82855GM_HB
 0x3580

	)

2435 
	#PCI_DEVICE_ID_INTEL_82855GM_IG
 0x3582

	)

2436 
	#PCI_DEVICE_ID_INTEL_E7520_MCH
 0x3590

	)

2437 
	#PCI_DEVICE_ID_INTEL_E7320_MCH
 0x3592

	)

2438 
	#PCI_DEVICE_ID_INTEL_MCH_PA
 0x3595

	)

2439 
	#PCI_DEVICE_ID_INTEL_MCH_PA1
 0x3596

	)

2440 
	#PCI_DEVICE_ID_INTEL_MCH_PB
 0x3597

	)

2441 
	#PCI_DEVICE_ID_INTEL_MCH_PB1
 0x3598

	)

2442 
	#PCI_DEVICE_ID_INTEL_MCH_PC
 0x3599

	)

2443 
	#PCI_DEVICE_ID_INTEL_MCH_PC1
 0x359a

	)

2444 
	#PCI_DEVICE_ID_INTEL_E7525_MCH
 0x359e

	)

2445 
	#PCI_DEVICE_ID_INTEL_I7300_MCH_ERR
 0x360c

	)

2446 
	#PCI_DEVICE_ID_INTEL_I7300_MCH_FB0
 0x360f

	)

2447 
	#PCI_DEVICE_ID_INTEL_I7300_MCH_FB1
 0x3610

	)

2448 
	#PCI_DEVICE_ID_INTEL_IOAT_CNB
 0x360b

	)

2449 
	#PCI_DEVICE_ID_INTEL_FBD_CNB
 0x360c

	)

2450 
	#PCI_DEVICE_ID_INTEL_IOAT_JSF0
 0x3710

	)

2451 
	#PCI_DEVICE_ID_INTEL_ICH10_0
 0x3a14

	)

2452 
	#PCI_DEVICE_ID_INTEL_ICH10_1
 0x3a16

	)

2453 
	#PCI_DEVICE_ID_INTEL_ICH10_2
 0x3a18

	)

2454 
	#PCI_DEVICE_ID_INTEL_ICH10_3
 0x3a1a

	)

2455 
	#PCI_DEVICE_ID_INTEL_ICH10_4
 0x3a30

	)

2456 
	#PCI_DEVICE_ID_INTEL_ICH10_5
 0x3a60

	)

2457 
	#PCI_DEVICE_ID_INTEL_PCH_LPC_MIN
 0x3b00

	)

2458 
	#PCI_DEVICE_ID_INTEL_PCH_LPC_MAX
 0x3b1f

	)

2459 
	#PCI_DEVICE_ID_INTEL_PCH_SMBUS
 0x3b30

	)

2460 
	#PCI_DEVICE_ID_INTEL_5400_ERR
 0x4030

	)

2461 
	#PCI_DEVICE_ID_INTEL_5400_FBD0
 0x4035

	)

2462 
	#PCI_DEVICE_ID_INTEL_5400_FBD1
 0x4036

	)

2463 
	#PCI_DEVICE_ID_INTEL_TOLAPAI_0
 0x5031

	)

2464 
	#PCI_DEVICE_ID_INTEL_TOLAPAI_1
 0x5032

	)

2465 
	#PCI_DEVICE_ID_INTEL_82371SB_0
 0x7000

	)

2466 
	#PCI_DEVICE_ID_INTEL_82371SB_1
 0x7010

	)

2467 
	#PCI_DEVICE_ID_INTEL_82371SB_2
 0x7020

	)

2468 
	#PCI_DEVICE_ID_INTEL_82437VX
 0x7030

	)

2469 
	#PCI_DEVICE_ID_INTEL_82439TX
 0x7100

	)

2470 
	#PCI_DEVICE_ID_INTEL_82371AB_0
 0x7110

	)

2471 
	#PCI_DEVICE_ID_INTEL_82371AB
 0x7111

	)

2472 
	#PCI_DEVICE_ID_INTEL_82371AB_2
 0x7112

	)

2473 
	#PCI_DEVICE_ID_INTEL_82371AB_3
 0x7113

	)

2474 
	#PCI_DEVICE_ID_INTEL_82810_MC1
 0x7120

	)

2475 
	#PCI_DEVICE_ID_INTEL_82810_IG1
 0x7121

	)

2476 
	#PCI_DEVICE_ID_INTEL_82810_MC3
 0x7122

	)

2477 
	#PCI_DEVICE_ID_INTEL_82810_IG3
 0x7123

	)

2478 
	#PCI_DEVICE_ID_INTEL_82810E_MC
 0x7124

	)

2479 
	#PCI_DEVICE_ID_INTEL_82810E_IG
 0x7125

	)

2480 
	#PCI_DEVICE_ID_INTEL_82443LX_0
 0x7180

	)

2481 
	#PCI_DEVICE_ID_INTEL_82443LX_1
 0x7181

	)

2482 
	#PCI_DEVICE_ID_INTEL_82443BX_0
 0x7190

	)

2483 
	#PCI_DEVICE_ID_INTEL_82443BX_1
 0x7191

	)

2484 
	#PCI_DEVICE_ID_INTEL_82443BX_2
 0x7192

	)

2485 
	#PCI_DEVICE_ID_INTEL_440MX
 0x7195

	)

2486 
	#PCI_DEVICE_ID_INTEL_440MX_6
 0x7196

	)

2487 
	#PCI_DEVICE_ID_INTEL_82443MX_0
 0x7198

	)

2488 
	#PCI_DEVICE_ID_INTEL_82443MX_1
 0x7199

	)

2489 
	#PCI_DEVICE_ID_INTEL_82443MX_3
 0x719b

	)

2490 
	#PCI_DEVICE_ID_INTEL_82443GX_0
 0x71a0

	)

2491 
	#PCI_DEVICE_ID_INTEL_82443GX_2
 0x71a2

	)

2492 
	#PCI_DEVICE_ID_INTEL_82372FB_1
 0x7601

	)

2493 
	#PCI_DEVICE_ID_INTEL_SCH_IDE
 0x811a

	)

2494 
	#PCI_DEVICE_ID_INTEL_82454GX
 0x84c4

	)

2495 
	#PCI_DEVICE_ID_INTEL_82450GX
 0x84c5

	)

2496 
	#PCI_DEVICE_ID_INTEL_82451NX
 0x84ˇ

	)

2497 
	#PCI_DEVICE_ID_INTEL_82454NX
 0x84cb

	)

2498 
	#PCI_DEVICE_ID_INTEL_84460GX
 0x84ó

	)

2499 
	#PCI_DEVICE_ID_INTEL_IXP4XX
 0x8500

	)

2500 
	#PCI_DEVICE_ID_INTEL_IXP2800
 0x9004

	)

2501 
	#PCI_DEVICE_ID_INTEL_S21152BB
 0xb152

	)

2503 
	#PCI_VENDOR_ID_SCALEMP
 0x8686

	)

2504 
	#PCI_DEVICE_ID_SCALEMP_VSMP_CTL
 0x1010

	)

2506 
	#PCI_VENDOR_ID_COMPUTONE
 0x8e0e

	)

2507 
	#PCI_DEVICE_ID_COMPUTONE_IP2EX
 0x0291

	)

2508 
	#PCI_DEVICE_ID_COMPUTONE_PG
 0x0302

	)

2509 
	#PCI_SUBVENDOR_ID_COMPUTONE
 0x8e0e

	)

2510 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG4
 0x0001

	)

2511 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG8
 0x0002

	)

2512 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG6
 0x0003

	)

2514 
	#PCI_VENDOR_ID_KTI
 0x8e2e

	)

2516 
	#PCI_VENDOR_ID_ADAPTEC
 0x9004

	)

2517 
	#PCI_DEVICE_ID_ADAPTEC_7810
 0x1078

	)

2518 
	#PCI_DEVICE_ID_ADAPTEC_7821
 0x2178

	)

2519 
	#PCI_DEVICE_ID_ADAPTEC_38602
 0x3860

	)

2520 
	#PCI_DEVICE_ID_ADAPTEC_7850
 0x5078

	)

2521 
	#PCI_DEVICE_ID_ADAPTEC_7855
 0x5578

	)

2522 
	#PCI_DEVICE_ID_ADAPTEC_3860
 0x6038

	)

2523 
	#PCI_DEVICE_ID_ADAPTEC_1480A
 0x6075

	)

2524 
	#PCI_DEVICE_ID_ADAPTEC_7860
 0x6078

	)

2525 
	#PCI_DEVICE_ID_ADAPTEC_7861
 0x6178

	)

2526 
	#PCI_DEVICE_ID_ADAPTEC_7870
 0x7078

	)

2527 
	#PCI_DEVICE_ID_ADAPTEC_7871
 0x7178

	)

2528 
	#PCI_DEVICE_ID_ADAPTEC_7872
 0x7278

	)

2529 
	#PCI_DEVICE_ID_ADAPTEC_7873
 0x7378

	)

2530 
	#PCI_DEVICE_ID_ADAPTEC_7874
 0x7478

	)

2531 
	#PCI_DEVICE_ID_ADAPTEC_7895
 0x7895

	)

2532 
	#PCI_DEVICE_ID_ADAPTEC_7880
 0x8078

	)

2533 
	#PCI_DEVICE_ID_ADAPTEC_7881
 0x8178

	)

2534 
	#PCI_DEVICE_ID_ADAPTEC_7882
 0x8278

	)

2535 
	#PCI_DEVICE_ID_ADAPTEC_7883
 0x8378

	)

2536 
	#PCI_DEVICE_ID_ADAPTEC_7884
 0x8478

	)

2537 
	#PCI_DEVICE_ID_ADAPTEC_7885
 0x8578

	)

2538 
	#PCI_DEVICE_ID_ADAPTEC_7886
 0x8678

	)

2539 
	#PCI_DEVICE_ID_ADAPTEC_7887
 0x8778

	)

2540 
	#PCI_DEVICE_ID_ADAPTEC_7888
 0x8878

	)

2542 
	#PCI_VENDOR_ID_ADAPTEC2
 0x9005

	)

2543 
	#PCI_DEVICE_ID_ADAPTEC2_2940U2
 0x0010

	)

2544 
	#PCI_DEVICE_ID_ADAPTEC2_2930U2
 0x0011

	)

2545 
	#PCI_DEVICE_ID_ADAPTEC2_7890B
 0x0013

	)

2546 
	#PCI_DEVICE_ID_ADAPTEC2_7890
 0x001f

	)

2547 
	#PCI_DEVICE_ID_ADAPTEC2_3940U2
 0x0050

	)

2548 
	#PCI_DEVICE_ID_ADAPTEC2_3950U2D
 0x0051

	)

2549 
	#PCI_DEVICE_ID_ADAPTEC2_7896
 0x005f

	)

2550 
	#PCI_DEVICE_ID_ADAPTEC2_7892A
 0x0080

	)

2551 
	#PCI_DEVICE_ID_ADAPTEC2_7892B
 0x0081

	)

2552 
	#PCI_DEVICE_ID_ADAPTEC2_7892D
 0x0083

	)

2553 
	#PCI_DEVICE_ID_ADAPTEC2_7892P
 0x008f

	)

2554 
	#PCI_DEVICE_ID_ADAPTEC2_7899A
 0x00c0

	)

2555 
	#PCI_DEVICE_ID_ADAPTEC2_7899B
 0x00c1

	)

2556 
	#PCI_DEVICE_ID_ADAPTEC2_7899D
 0x00c3

	)

2557 
	#PCI_DEVICE_ID_ADAPTEC2_7899P
 0x00cf

	)

2558 
	#PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN
 0x0500

	)

2559 
	#PCI_DEVICE_ID_ADAPTEC2_SCAMP
 0x0503

	)

2562 
	#PCI_VENDOR_ID_HOLTEK
 0x9412

	)

2563 
	#PCI_DEVICE_ID_HOLTEK_6565
 0x6565

	)

2565 
	#PCI_VENDOR_ID_NETMOS
 0x9710

	)

2566 
	#PCI_DEVICE_ID_NETMOS_9705
 0x9705

	)

2567 
	#PCI_DEVICE_ID_NETMOS_9715
 0x9715

	)

2568 
	#PCI_DEVICE_ID_NETMOS_9735
 0x9735

	)

2569 
	#PCI_DEVICE_ID_NETMOS_9745
 0x9745

	)

2570 
	#PCI_DEVICE_ID_NETMOS_9755
 0x9755

	)

2571 
	#PCI_DEVICE_ID_NETMOS_9805
 0x9805

	)

2572 
	#PCI_DEVICE_ID_NETMOS_9815
 0x9815

	)

2573 
	#PCI_DEVICE_ID_NETMOS_9835
 0x9835

	)

2574 
	#PCI_DEVICE_ID_NETMOS_9845
 0x9845

	)

2575 
	#PCI_DEVICE_ID_NETMOS_9855
 0x9855

	)

2577 
	#PCI_VENDOR_ID_3COM_2
 0xa727

	)

2579 
	#PCI_SUBVENDOR_ID_EXSYS
 0xd84d

	)

2580 
	#PCI_SUBDEVICE_ID_EXSYS_4014
 0x4014

	)

2581 
	#PCI_SUBDEVICE_ID_EXSYS_4055
 0x4055

	)

2583 
	#PCI_VENDOR_ID_TIGERJET
 0xe159

	)

2584 
	#PCI_DEVICE_ID_TIGERJET_300
 0x0001

	)

2585 
	#PCI_DEVICE_ID_TIGERJET_100
 0x0002

	)

2587 
	#PCI_VENDOR_ID_TTTECH
 0x0357

	)

2588 
	#PCI_DEVICE_ID_TTTECH_MC322
 0x000A

	)

2590 
	#PCI_VENDOR_ID_XILINX_RME
 0xó60

	)

2591 
	#PCI_DEVICE_ID_RME_DIGI32
 0x9896

	)

2592 
	#PCI_DEVICE_ID_RME_DIGI32_PRO
 0x9897

	)

2593 
	#PCI_DEVICE_ID_RME_DIGI32_8
 0x9898

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_CAP_LIST
 0x10

	)

46 
	#PCI_STATUS_66MHZ
 0x20

	)

47 
	#PCI_STATUS_UDF
 0x40

	)

48 
	#PCI_STATUS_FAST_BACK
 0x80

	)

49 
	#PCI_STATUS_PARITY
 0x100

	)

50 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

51 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

52 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

53 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

54 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

55 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

56 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

57 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

58 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

60 
	#PCI_CLASS_REVISION
 0x08

	)

61 
	#PCI_REVISION_ID
 0x08

	)

62 
	#PCI_CLASS_PROG
 0x09

	)

63 
	#PCI_CLASS_DEVICE
 0x0®

	)

65 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

66 
	#PCI_LATENCY_TIMER
 0x0d

	)

67 
	#PCI_HEADER_TYPE
 0x0ê

	)

68 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

69 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

70 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

72 
	#PCI_BIST
 0x0‡

	)

73 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

74 
	#PCI_BIST_START
 0x40

	)

75 
	#PCI_BIST_CAPABLE
 0x80

	)

83 
	#PCI_BASE_ADDRESS_0
 0x10

	)

84 
	#PCI_BASE_ADDRESS_1
 0x14

	)

85 
	#PCI_BASE_ADDRESS_2
 0x18

	)

86 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

87 
	#PCI_BASE_ADDRESS_4
 0x20

	)

88 
	#PCI_BASE_ADDRESS_5
 0x24

	)

89 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

90 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

92 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

96 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

97 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

98 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

102 
	#PCI_CARDBUS_CIS
 0x28

	)

103 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

104 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

105 
	#PCI_ROM_ADDRESS
 0x30

	)

106 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

107 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

109 
	#PCI_CAPABILITY_LIST
 0x34

	)

112 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

113 
	#PCI_INTERRUPT_PIN
 0x3d

	)

114 
	#PCI_MIN_GNT
 0x3ê

	)

115 
	#PCI_MAX_LAT
 0x3‡

	)

118 
	#PCI_PRIMARY_BUS
 0x18

	)

119 
	#PCI_SECONDARY_BUS
 0x19

	)

120 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

121 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

122 
	#PCI_IO_BASE
 0x1¯

	)

123 
	#PCI_IO_LIMIT
 0x1d

	)

124 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

125 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

126 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

127 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

128 
	#PCI_SEC_STATUS
 0x1ê

	)

129 
	#PCI_MEMORY_BASE
 0x20

	)

130 
	#PCI_MEMORY_LIMIT
 0x22

	)

131 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

132 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

133 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

134 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

135 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

136 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

137 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

138 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

139 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

140 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

141 
	#PCI_IO_BASE_UPPER16
 0x30

	)

142 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

145 
	#PCI_ROM_ADDRESS1
 0x38

	)

147 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

148 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

149 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

150 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

151 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

152 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

153 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

154 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

157 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

159 
	#PCI_CB_SEC_STATUS
 0x16

	)

160 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

161 
	#PCI_CB_CARD_BUS
 0x19

	)

162 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

163 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

164 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

165 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

166 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

167 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

168 
	#PCI_CB_IO_BASE_0
 0x2c

	)

169 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

170 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

171 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

172 
	#PCI_CB_IO_BASE_1
 0x34

	)

173 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

174 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

175 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

176 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

178 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

179 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

180 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

181 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

182 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

183 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

184 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

185 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

186 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

188 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

189 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

190 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

191 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

196 
	#PCI_CAP_LIST_ID
 0

	)

197 
	#PCI_CAP_ID_PM
 0x01

	)

198 
	#PCI_CAP_ID_AGP
 0x02

	)

199 
	#PCI_CAP_ID_VPD
 0x03

	)

200 
	#PCI_CAP_ID_SLOTID
 0x04

	)

201 
	#PCI_CAP_ID_MSI
 0x05

	)

202 
	#PCI_CAP_ID_CHSWP
 0x06

	)

203 
	#PCI_CAP_ID_PCIX
 0x07

	)

204 
	#PCI_CAP_ID_HT
 0x08

	)

205 
	#PCI_CAP_ID_VNDR
 0x09

	)

206 
	#PCI_CAP_ID_SHPC
 0x0C

	)

207 
	#PCI_CAP_ID_EXP
 0x10

	)

208 
	#PCI_CAP_ID_MSIX
 0x11

	)

209 
	#PCI_CAP_ID_AF
 0x13

	)

210 
	#PCI_CAP_LIST_NEXT
 1

	)

211 
	#PCI_CAP_FLAGS
 2

	)

212 
	#PCI_CAP_SIZEOF
 4

	)

216 
	#PCI_PM_PMC
 2

	)

217 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

218 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

219 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

220 
	#PCI_PM_CAP_DSI
 0x0020

	)

221 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

222 
	#PCI_PM_CAP_D1
 0x0200

	)

223 
	#PCI_PM_CAP_D2
 0x0400

	)

224 
	#PCI_PM_CAP_PME
 0x0800

	)

225 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

226 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

227 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

228 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

229 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

230 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

231 
	#PCI_PM_CTRL
 4

	)

232 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

233 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0004

	)

234 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

235 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

236 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

237 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

238 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

239 
	#PCI_PM_PPB_B2_B3
 0x40

	)

240 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

241 
	#PCI_PM_DATA_REGISTER
 7

	)

242 
	#PCI_PM_SIZEOF
 8

	)

246 
	#PCI_AGP_VERSION
 2

	)

247 
	#PCI_AGP_RFU
 3

	)

248 
	#PCI_AGP_STATUS
 4

	)

249 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

250 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

251 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

252 
	#PCI_AGP_STATUS_FW
 0x0010

	)

253 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

254 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

255 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

256 
	#PCI_AGP_COMMAND
 8

	)

257 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

258 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

259 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

260 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

261 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

262 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

263 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

264 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

265 
	#PCI_AGP_SIZEOF
 12

	)

269 
	#PCI_VPD_ADDR
 2

	)

270 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

271 
	#PCI_VPD_ADDR_F
 0x8000

	)

272 
	#PCI_VPD_DATA
 4

	)

276 
	#PCI_SID_ESR
 2

	)

277 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

278 
	#PCI_SID_ESR_FIC
 0x20

	)

279 
	#PCI_SID_CHASSIS_NR
 3

	)

283 
	#PCI_MSI_FLAGS
 2

	)

284 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

285 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

286 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

287 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

288 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

289 
	#PCI_MSI_RFU
 3

	)

290 
	#PCI_MSI_ADDRESS_LO
 4

	)

291 
	#PCI_MSI_ADDRESS_HI
 8

	)

292 
	#PCI_MSI_DATA_32
 8

	)

293 
	#PCI_MSI_DATA_64
 12

	)

294 
	#PCI_MSI_MASK_BIT
 16

	)

297 
	#PCI_MSIX_FLAGS
 2

	)

298 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

299 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

300 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

301 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

302 
	#PCI_MSIX_FLAGS_BITMASK
 (1 << 0)

	)

306 
	#PCI_CHSWP_CSR
 2

	)

307 
	#PCI_CHSWP_DHA
 0x01

	)

308 
	#PCI_CHSWP_EIM
 0x02

	)

309 
	#PCI_CHSWP_PIE
 0x04

	)

310 
	#PCI_CHSWP_LOO
 0x08

	)

311 
	#PCI_CHSWP_PI
 0x30

	)

312 
	#PCI_CHSWP_EXT
 0x40

	)

313 
	#PCI_CHSWP_INS
 0x80

	)

317 
	#PCI_AF_LENGTH
 2

	)

318 
	#PCI_AF_CAP
 3

	)

319 
	#PCI_AF_CAP_TP
 0x01

	)

320 
	#PCI_AF_CAP_FLR
 0x02

	)

321 
	#PCI_AF_CTRL
 4

	)

322 
	#PCI_AF_CTRL_FLR
 0x01

	)

323 
	#PCI_AF_STATUS
 5

	)

324 
	#PCI_AF_STATUS_TP
 0x01

	)

328 
	#PCI_X_CMD
 2

	)

329 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

330 
	#PCI_X_CMD_ERO
 0x0002

	)

331 
	#PCI_X_CMD_READ_2K
 0x0008

	)

332 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

333 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

334 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

335 
	#PCI_X_STATUS
 4

	)

336 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

337 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

338 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

339 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

340 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

341 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

342 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

343 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

344 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

345 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

346 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

347 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

348 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

352 
	#PCI_EXP_FLAGS
 2

	)

353 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

354 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

355 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

356 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

357 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

358 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

359 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

360 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

361 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

362 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

363 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

364 
	#PCI_EXP_DEVCAP
 4

	)

365 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

366 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

367 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

368 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

369 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

370 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

371 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

372 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

373 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

374 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

375 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

376 
	#PCI_EXP_DEVCTL
 8

	)

377 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

378 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

379 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

380 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

381 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

382 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

383 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

384 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

385 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

386 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

387 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

388 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

389 
	#PCI_EXP_DEVSTA
 10

	)

390 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

391 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

392 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

393 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

394 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

395 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

396 
	#PCI_EXP_LNKCAP
 12

	)

397 
	#PCI_EXP_LNKCTL
 16

	)

398 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

399 
	#PCI_EXP_LNKSTA
 18

	)

400 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

401 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x01

	)

402 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x02

	)

403 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

404 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

405 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

406 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

407 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

408 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

409 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

410 
	#PCI_EXP_SLTCAP
 20

	)

411 
	#PCI_EXP_SLTCTL
 24

	)

412 
	#PCI_EXP_SLTSTA
 26

	)

413 
	#PCI_EXP_RTCTL
 28

	)

414 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

415 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

416 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

417 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

418 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

419 
	#PCI_EXP_RTCAP
 30

	)

420 
	#PCI_EXP_RTSTA
 32

	)

421 
	#PCI_EXP_DEVCAP2
 36

	)

422 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

423 
	#PCI_EXP_DEVCAP2_LTR
 0x800

	)

424 
	#PCI_EXP_OBFF_MASK
 0xc0000

	)

425 
	#PCI_EXP_OBFF_MSG
 0x40000

	)

426 
	#PCI_EXP_OBFF_WAKE
 0x80000

	)

427 
	#PCI_EXP_DEVCTL2
 40

	)

428 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

429 
	#PCI_EXP_IDO_REQ_EN
 0x100

	)

430 
	#PCI_EXP_IDO_CMP_EN
 0x200

	)

431 
	#PCI_EXP_LTR_EN
 0x400

	)

432 
	#PCI_EXP_OBFF_MSGA_EN
 0x2000

	)

433 
	#PCI_EXP_OBFF_MSGB_EN
 0x4000

	)

434 
	#PCI_EXP_OBFF_WAKE_EN
 0x6000

	)

435 
	#PCI_EXP_LNKCTL2
 48

	)

436 
	#PCI_EXP_SLTCTL2
 56

	)

439 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

440 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

441 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

443 
	#PCI_EXT_CAP_ID_ERR
 1

	)

444 
	#PCI_EXT_CAP_ID_VC
 2

	)

445 
	#PCI_EXT_CAP_ID_DSN
 3

	)

446 
	#PCI_EXT_CAP_ID_PWR
 4

	)

447 
	#PCI_EXT_CAP_ID_ACS
 13

	)

448 
	#PCI_EXT_CAP_ID_ARI
 14

	)

449 
	#PCI_EXT_CAP_ID_ATS
 15

	)

450 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

451 
	#PCI_EXT_CAP_ID_LTR
 24

	)

454 
	#PCI_ERR_UNCOR_STATUS
 4

	)

455 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

456 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

457 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

458 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

459 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

460 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

461 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

462 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

463 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

464 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

465 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

466 
	#PCI_ERR_UNCOR_MASK
 8

	)

468 
	#PCI_ERR_UNCOR_SEVER
 12

	)

470 
	#PCI_ERR_COR_STATUS
 16

	)

471 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

472 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

473 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

474 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

475 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

476 
	#PCI_ERR_COR_MASK
 20

	)

478 
	#PCI_ERR_CAP
 24

	)

479 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

480 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

481 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

482 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

483 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

484 
	#PCI_ERR_HEADER_LOG
 28

	)

485 
	#PCI_ERR_ROOT_COMMAND
 44

	)

487 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

489 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

491 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

492 
	#PCI_ERR_ROOT_STATUS
 48

	)

493 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

495 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

497 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

499 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

500 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

501 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

502 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

503 
	#PCI_ERR_ROOT_COR_SRC
 52

	)

504 
	#PCI_ERR_ROOT_SRC
 54

	)

507 
	#PCI_VC_PORT_REG1
 4

	)

508 
	#PCI_VC_PORT_REG2
 8

	)

509 
	#PCI_VC_PORT_CTRL
 12

	)

510 
	#PCI_VC_PORT_STATUS
 14

	)

511 
	#PCI_VC_RES_CAP
 16

	)

512 
	#PCI_VC_RES_CTRL
 20

	)

513 
	#PCI_VC_RES_STATUS
 26

	)

516 
	#PCI_PWR_DSR
 4

	)

517 
	#PCI_PWR_DATA
 8

	)

518 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

519 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

520 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

521 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

522 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

523 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

524 
	#PCI_PWR_CAP
 12

	)

525 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

535 
	#HT_3BIT_CAP_MASK
 0xE0

	)

536 
	#HT_CAPTYPE_SLAVE
 0x00

	)

537 
	#HT_CAPTYPE_HOST
 0x20

	)

539 
	#HT_5BIT_CAP_MASK
 0xF8

	)

540 
	#HT_CAPTYPE_IRQ
 0x80

	)

541 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

542 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

543 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

544 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

545 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

546 
	#HT_MSI_FLAGS
 0x02

	)

547 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

548 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

549 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

550 
	#HT_MSI_ADDR_LO
 0x04

	)

551 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

552 
	#HT_MSI_ADDR_HI
 0x08

	)

553 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

554 
	#HT_CAPTYPE_VCSET
 0xB8

	)

555 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

556 
	#HT_CAPTYPE_GEN3
 0xD0

	)

557 
	#HT_CAPTYPE_PM
 0xE0

	)

560 
	#PCI_ARI_CAP
 0x04

	)

561 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

562 
	#PCI_ARI_CAP_ACS
 0x0002

	)

563 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

564 
	#PCI_ARI_CTRL
 0x06

	)

565 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

566 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

567 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

570 
	#PCI_ATS_CAP
 0x04

	)

571 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

572 
	#PCI_ATS_MAX_QDEP
 32

	)

573 
	#PCI_ATS_CTRL
 0x06

	)

574 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

575 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

576 
	#PCI_ATS_MIN_STU
 12

	)

579 
	#PCI_SRIOV_CAP
 0x04

	)

580 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

581 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

582 
	#PCI_SRIOV_CTRL
 0x08

	)

583 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

584 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

585 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

586 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

587 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

588 
	#PCI_SRIOV_STATUS
 0x0®

	)

589 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

590 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

591 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

592 
	#PCI_SRIOV_NUM_VF
 0x10

	)

593 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

594 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

595 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

596 
	#PCI_SRIOV_VF_DID
 0x1®

	)

597 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

598 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

599 
	#PCI_SRIOV_BAR
 0x24

	)

600 
	#PCI_SRIOV_NUM_BARS
 6

	)

601 
	#PCI_SRIOV_VFM
 0x3¯

	)

602 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

603 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

604 
	#PCI_SRIOV_VFM_UA
 0x0

	)

605 
	#PCI_SRIOV_VFM_MI
 0x1

	)

606 
	#PCI_SRIOV_VFM_MO
 0x2

	)

607 
	#PCI_SRIOV_VFM_AV
 0x3

	)

609 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

610 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

611 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

612 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

613 
	#PCI_LTR_SCALE_SHIFT
 10

	)

616 
	#PCI_ACS_CAP
 0x04

	)

617 
	#PCI_ACS_SV
 0x01

	)

618 
	#PCI_ACS_TB
 0x02

	)

619 
	#PCI_ACS_RR
 0x04

	)

620 
	#PCI_ACS_CR
 0x08

	)

621 
	#PCI_ACS_UF
 0x10

	)

622 
	#PCI_ACS_EC
 0x20

	)

623 
	#PCI_ACS_DT
 0x40

	)

624 
	#PCI_ACS_CTRL
 0x06

	)

625 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_MREMAP
 1

	)

73 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

74 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

75 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

77 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

79 
	#_G_OPEN64
 
__›í64


	)

80 
	#_G_LSEEK64
 
__l£ek64


	)

81 
	#_G_MMAP64
 
__mm≠64


	)

82 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

85 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

87 
	#_G_BUFSIZ
 8192

	)

90 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

91 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

92 
	#_G_USING_THUNKS
 1

	)

93 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

94 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

97 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


98 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

100 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
__GNUC_PREREQ
 (2,97)

140 
	#__Êex¨r
 []

	)

142 #ifde‡
__GNUC__


143 
	#__Êex¨r
 [0]

	)

145 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

146 
	#__Êex¨r
 []

	)

149 
	#__Êex¨r
 [1]

	)

165 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

167 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

168 #ifde‡
__˝lu•lus


169 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

170 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

175 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

176 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

189 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

190 
	#__©åibuã__
(
xyz
Ë

	)

196 #i‡
__GNUC_PREREQ
 (2,96)

197 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

199 
	#__©åibuã_mÆloc__


	)

205 #i‡
__GNUC_PREREQ
 (2,96)

206 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

208 
	#__©åibuã_puª__


	)

214 #i‡
__GNUC_PREREQ
 (3,1)

215 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

216 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

218 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

219 
	#__©åibuã_noölöe__


	)

223 #i‡
__GNUC_PREREQ
 (3,2)

224 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

226 
	#__©åibuã_dïªˇãd__


	)

235 #i‡
__GNUC_PREREQ
 (2,8)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

238 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

245 #i‡
__GNUC_PREREQ
 (2,97)

246 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

247 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

249 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

254 #i‡
__GNUC_PREREQ
 (3,3)

255 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

257 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡
__GNUC_PREREQ
 (3,4)

263 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

264 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

265 #i‡
__USE_FORTIFY_LEVEL
 > 0

266 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

269 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

271 #i‚de‡
__wur


272 
	#__wur


	)

276 #i‡
__GNUC_PREREQ
 (3,2)

277 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

279 
	#__Æways_ölöe
 
__ölöe


	)

286 #i‡!
__GNUC_PREREQ
 (2,8)

287 
	#__exãnsi⁄__


	)

291 #i‡!
__GNUC_PREREQ
 (2,92)

292 
	#__ª°ri˘


	)

298 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


299 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

301 #ifde‡
__GNUC__


302 
	#__ª°ri˘_¨r


	)

304 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

305 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

308 
	#__ª°ri˘_¨r


	)

313 
	~<bôs/w‹dsize.h
>

315 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


316 
	#__LDBL_COMPAT
 1

	)

317 #ifde‡
__REDIRECT


318 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

319 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

320 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

321 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

322 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

323 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

324 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

325 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

326 
	#__LDBL_REDIR_DECL
(
«me
) \

327 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

330 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


331 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

332 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

333 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

334 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

335 
	#__LDBL_REDIR_DECL
(
«me
)

	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_sigªtu∫


	)

28 
	#__°ub_s°k


	)

29 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


324 #i‚de‡
__˝lu•lus


328 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

329 
__ölöe
 
wöt_t


330 
	`__NTH
 (
	$btowc
 (
__c
))

331 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

332 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

334 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

335 
__ölöe
 

336 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

337 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

338 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

341 
__ölöe
 
size_t


342 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

343 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

344 {  (
__ps
 !
NULL


345 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

348 
__BEGIN_NAMESPACE_C99


351 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

352 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

353 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

357 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

358 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

359 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

360 
__END_NAMESPACE_C99


363 #ifdef 
__USE_GNU


366 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

367 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

368 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

373 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

374 
size_t
 
__nwc
, size_à
__Àn
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

380 #ifde‡
__USE_XOPEN


382 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

386 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

390 
__BEGIN_NAMESPACE_C99


393 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

394 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

396 #ifde‡
__USE_ISOC99


398 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

399 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

400 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

407 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

412 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

413 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

414 
__THROW
;

416 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

419 
__exãnsi⁄__


420 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

426 
__exãnsi⁄__


427 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

428 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

429 
__ba£
Ë
__THROW
;

431 
__END_NAMESPACE_C99


433 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


436 
__exãnsi⁄__


437 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

439 
__THROW
;

443 
__exãnsi⁄__


444 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

445 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

446 
__ba£
Ë
__THROW
;

449 #ifde‡
__USE_GNU


463 
	~<xloˇÀ.h
>

467 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

468 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

469 
__loˇÀ_t
 
__loc
Ë
__THROW
;

471 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

473 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

475 
__exãnsi⁄__


476 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

478 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

480 
__exãnsi⁄__


481 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
)

484 
__THROW
;

486 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

488 
__THROW
;

490 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

492 
__THROW
;

494 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

495 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

496 
__loˇÀ_t
 
__loc
Ë
__THROW
;

502 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

503 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

504 
__THROW
;

505 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

507 
__THROW
;

508 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

509 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

510 
__group
Ë
__THROW
;

512 #i‡!
deföed
 
__wc°ﬁ_öã∫Æ_deföed
 \

513 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

514 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

515 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

516 
__ba£
, 
__group
Ë
__THROW
;

517 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

519 #i‡!
deföed
 
__wc°oul_öã∫Æ_deföed
 \

520 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

521 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

522 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

523 
__ba£
, 
__group
Ë
__THROW
;

524 
	#__wc°oul_öã∫Æ_deföed
 1

	)

526 #i‡!
deföed
 
__wc°ﬁl_öã∫Æ_deföed
 \

527 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

528 
__exãnsi⁄__


529 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

530 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

531 
__ba£
, 
__group
Ë
__THROW
;

532 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

534 #i‡!
deföed
 
__wc°ouŒ_öã∫Æ_deföed
 \

535 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

536 
__exãnsi⁄__


537 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

538 
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **

540 
__ª°ri˘
 
__íd±r
,

541 
__ba£
,

542 
__group
Ë
__THROW
;

543 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

547 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

549 
__BEGIN_NAMESPACE_C99


551 
__ölöe
 

552 
	`__NTH
 (
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

554 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

555 
__ölöe
 

556 
__NTH
 (
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

558 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

559 
__ölöe
 

560 
__NTH
 (
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

562 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

563 
__END_NAMESPACE_C99


565 #ifde‡
__USE_GNU


566 
__ölöe
 

567 
__NTH
 (
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

568 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

569 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

570 #i‚de‡
__LDBL_COMPAT


571 
__ölöe
 

572 
__NTH
 (
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

573 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

574 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

576 
__exãnsi⁄__


577 
__ölöe
 

578 
__NTH
 (
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

579 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

580 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

581 
__exãnsi⁄__


582 
__ölöe
 

583 
__NTH
 (
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

584 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

585 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

590 #ifdef 
__USE_GNU


593 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

597 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

598 
__THROW
;

604 #ifdef 
__USE_GNU


607 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

610 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


611 
__BEGIN_NAMESPACE_C99


614 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

621 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

622 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

628 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

631 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

632 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

633 
__THROW
 ;

639 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

640 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

641 
__gnuc_va_li°
 
__¨g
)

647 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

648 
__gnuc_va_li°
 
__¨g
)

652 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

653 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

654 
__gnuc_va_li°
 
__¨g
)

655 
__THROW
 ;

662 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

663 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

669 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

672 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

673 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

674 
__THROW
 ;

676 
__END_NAMESPACE_C99


679 #ifde‡
__USE_ISOC99


680 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 
__END_NAMESPACE_C99


707 
__BEGIN_NAMESPACE_C99


712 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

719 
wöt_t
 
	`gëwch¨
 ();

726 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

727 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

733 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

741 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

742 
__FILE
 *
__ª°ri˘
 
__°ªam
);

748 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

749 
__FILE
 *
__ª°ri˘
 
__°ªam
);

756 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

757 
__END_NAMESPACE_C99


760 #ifde‡
__USE_GNU


768 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

777 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

785 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

794 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

795 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

804 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

805 
__FILE
 *
__ª°ri˘
 
__°ªam
);

813 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

814 
__FILE
 *
__ª°ri˘
 
__°ªam
);

818 
__BEGIN_NAMESPACE_C99


822 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

823 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

824 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

825 
__END_NAMESPACE_C99


827 #ifde‡
__USE_GNU


828 
	~<xloˇÀ.h
>

832 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

833 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

834 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

835 
__loˇÀ_t
 
__loc
Ë
__THROW
;

844 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


845 
	#__√ed_iswxxx


	)

846 
	~<w˘y≥.h
>

850 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


851 
	~<bôs/wch¨2.h
>

854 #ifde‡
__LDBL_COMPAT


855 
	~<bôs/wch¨-ldbl.h
>

858 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 
__LDBL_REDIR_DECL
 (
fwsˇnf
);

33 
__LDBL_REDIR_DECL
 (
wsˇnf
);

34 
__LDBL_REDIR_DECL
 (
swsˇnf
);

35 
	g__END_NAMESPACE_C99


38 #ifde‡
__USE_ISOC99


39 
__BEGIN_NAMESPACE_C99


40 
__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

41 
__LDBL_REDIR_DECL
 (
vfwsˇnf
);

42 
__LDBL_REDIR_DECL
 (
vwsˇnf
);

43 
__LDBL_REDIR_DECL
 (
vswsˇnf
);

44 
	g__END_NAMESPACE_C99


47 #ifde‡
__USE_GNU


48 
__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

51 
__LDBL_REDIR1_DECL
 (
__wc°ﬁd_öã∫Æ
, 
__wc°od_öã∫Æ
);

53 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


54 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

55 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

56 #i‡
__USE_FORTIFY_LEVEL
 > 1

57 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

58 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

59 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

60 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

33 
__Æways_ölöe
 
wch¨_t
 *

34 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

35 
size_t
 
__n
))

37 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

38  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

39  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

40 
	}
}

43 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

44 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

45 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

46 
__c⁄°
 
wch¨_t
 *
__s2
,

47 
size_t
 
__n
), 
wmemmove
);

49 
__Æways_ölöe
 
wch¨_t
 *

50 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

51 
size_t
 
__n
))

53 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

54  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

55  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

56 
	}
}

59 #ifde‡
__USE_GNU


60 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

61 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

62 
size_t
 
__ns1
Ë
__THROW
;

63 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

64 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

65 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

66 
size_t
 
__n
), 
wmemp˝y
);

68 
__Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

70 
size_t
 
__n
))

72 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

74  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

75 
	}
}

79 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

80 
size_t
 
__ns
Ë
__THROW
;

81 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

82 
size_t
 
__n
), 
wmem£t
);

84 
__Æways_ölöe
 
wch¨_t
 *

85 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

87 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

88  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

89  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

90 
	}
}

93 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

94 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

95 
size_t
 
__n
Ë
__THROW
;

96 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

97 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

100 
__Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

103 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

104  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

105  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

106 
	}
}

109 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

110 
size_t
 
__de°Àn
Ë
__THROW
;

111 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

112 
__c⁄°
 
wch¨_t
 *
__§c
),

113 
w˝˝y
);

115 
__Æways_ölöe
 
wch¨_t
 *

116 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

119  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

120  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

121 
	}
}

124 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

125 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

128 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

129 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

130 
size_t
 
__n
), 
wc¢˝y
);

132 
__Æways_ölöe
 
wch¨_t
 *

133 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| 
	`__bos
 (
__de°
) >= __n))

137  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

138 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

139  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

144 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

145 
size_t
 
__de°Àn
Ë
__THROW
;

146 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

147 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
), 
w˝n˝y
);

151 
__Æways_ölöe
 
wch¨_t
 *

152 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

155 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| 
	`__bos
 (
__de°
) >= __n))

156  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

157 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

158  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

159 
	}
}

162 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

163 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

166 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

167 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

169 
__Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

180 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢ˇt
);

186 
__Æways_ölöe
 
wch¨_t
 *

187 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

189 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

190  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

191 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

192  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

193 
	}
}

196 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

197 
__Êag
, 
size_t
 
__s_Àn
,

198 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

199 
__THROW
 ;

202 
	#sw¥ötf
(
s
, 
n
, ...) \

203 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

204 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (s), 
__VA_ARGS__
) \

205 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

208 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

209 
__Êag
, 
size_t
 
__s_Àn
,

210 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

211 
__gnuc_va_li°
 
__¨g
)

212 
__THROW
 ;

214 
	#vsw¥ötf
(
s
, 
n
, 
fmt
, 
≠
) \

215 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

216 ? 
	`__vsw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (s), 
fmt
, 
≠
) \

217 : 
	`vsw¥ötf
 (
s
, 
n
, 
fmt
, 
≠
))

	)

220 #i‡
__USE_FORTIFY_LEVEL
 > 1

222 
	`__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

223 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

224 
	`__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

226 
	`__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

227 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

228 
__gnuc_va_li°
 
__≠
);

229 
	`__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

230 
__gnuc_va_li°
 
__≠
);

232 
	#w¥ötf
(...) \

233 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

234 
	#fw¥ötf
(
°ªam
, ...) \

235 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

236 
	#vw¥ötf
(
f‹m©
, 
≠
) \

237 
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

238 
	#vfw¥ötf
(
°ªam
, 
f‹m©
, 
≠
) \

239 
	`__vfw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

243 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

244 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

245 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

246 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

247 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

249 
__Æways_ölöe
 
__wur
 
wch¨_t
 *

250 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

252 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

253 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

254  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 #ifde‡
__USE_GNU


259 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

260 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

261 
__wur
;

262 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

263 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

264 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

265 
__wur
;

267 
__Æways_ölöe
 
__wur
 
wch¨_t
 *

268 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

270 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

271 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

272  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

273  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

274 
	}
}

278 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

279 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

280 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

281 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

282 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

284 
__Æways_ölöe
 
__wur
 
size_t


285 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

290 
	#__WCHAR_MB_LEN_MAX
 16

	)

291 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


294 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

295  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

296  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

297 
	}
}

300 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

301 
__c⁄°
 **
__ª°ri˘
 
__§c
,

302 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

303 
size_t
 
__d°Àn
Ë
__THROW
;

304 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

305 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

306 
__c⁄°
 **
__ª°ri˘
 
__§c
,

307 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

308 
mb§towcs
);

310 
__Æways_ölöe
 
size_t


311 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

312 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

314 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

315 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

316 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

317  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

318 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

319  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

320 
	}
}

323 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

324 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

325 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

326 
size_t
 
__d°Àn
Ë
__THROW
;

327 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

328 (*
__ª°ri˘
 
__d°
,

329 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

330 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

331 
wc§tombs
);

333 
__Æways_ölöe
 
size_t


334 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

335 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

337 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

338 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

339  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

340  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

341 
	}
}

344 #ifde‡
__USE_GNU


345 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

346 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

347 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

348 
size_t
 
__d°Àn
Ë
__THROW
;

349 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

350 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

351 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

352 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

353 
mb¢πowcs
);

355 
__Æways_ölöe
 
size_t


356 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

357 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

359 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

360 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

361 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

362  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

363 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

364  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

365 
	}
}

368 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

369 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

370 
size_t
 
__nwc
, size_à
__Àn
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

372 
__THROW
;

373 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

374 (*
__ª°ri˘
 
__d°
,

375 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

376 
size_t
 
__nwc
, size_à
__Àn
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

379 
__Æways_ölöe
 
size_t


380 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

381 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

383 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

384 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

385  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

386  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

387 
	}
}

	@/usr/include/pthread.h

19 #i‚de‡
_PTHREAD_H


20 
	#_PTHREAD_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<ídün.h
>

24 
	~<sched.h
>

25 
	~<time.h
>

27 
	#__√ed_sig£t_t


	)

28 
	~<sig«l.h
>

29 
	~<bôs/±hªadty≥s.h
>

30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/w‹dsize.h
>

37 
	mPTHREAD_CREATE_JOINABLE
,

38 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

39 
	mPTHREAD_CREATE_DETACHED


40 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

47 
	mPTHREAD_MUTEX_TIMED_NP
,

48 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

49 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

50 
	mPTHREAD_MUTEX_ADAPTIVE_NP


51 #ifde‡
__USE_UNIX98


53 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

54 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

55 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

56 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


58 #ifde‡
__USE_GNU


60 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


65 #ifde‡
__USE_GNU


69 
	mPTHREAD_MUTEX_STALLED_NP
,

70 
	mPTHREAD_MUTEX_ROBUST_NP


75 #ifde‡
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


87 #i‡
__WORDSIZE
 == 64

88 
	#PTHREAD_MUTEX_INITIALIZER
 \

89 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

90 #ifde‡
__USE_GNU


91 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

93 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 0 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


123 
	#PTHREAD_RWLOCK_INITIALIZER
 \

124 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

125 #ifde‡
__USE_GNU


126 #i‡
__WORDSIZE
 == 64

127 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

129 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

131 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


132 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

133 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

134 0, 0, 0, 0 } }

	)

136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

138 0 } }

	)

148 
	mPTHREAD_INHERIT_SCHED
,

149 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

150 
	mPTHREAD_EXPLICIT_SCHED


151 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

158 
	mPTHREAD_SCOPE_SYSTEM
,

159 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

160 
	mPTHREAD_SCOPE_PROCESS


161 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

168 
	mPTHREAD_PROCESS_PRIVATE
,

169 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

170 
	mPTHREAD_PROCESS_SHARED


171 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

177 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

181 
	s_±hªad_˛ónup_buf„r


183 (*
	m__routöe
) (*);

184 *
	m__¨g
;

185 
	m__ˇn˚…y≥
;

186 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

192 
	mPTHREAD_CANCEL_ENABLE
,

193 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

194 
	mPTHREAD_CANCEL_DISABLE


195 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

199 
	mPTHREAD_CANCEL_DEFERRED
,

200 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

201 
	mPTHREAD_CANCEL_ASYNCHRONOUS


202 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

204 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

208 
	#PTHREAD_ONCE_INIT
 0

	)

211 #ifde‡
__USE_XOPEN2K


215 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

219 
__BEGIN_DECLS


224 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

225 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

226 *(*
__°¨t_routöe
) (*),

227 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

233 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

241 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

243 #ifde‡
__USE_GNU


246 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

254 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

255 
__c⁄°
 
time•ec
 *
__ab°ime
);

262 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

266 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

269 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

277 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

280 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

284 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

285 *
__dëach°©e
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

289 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

290 
__dëach°©e
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

296 
size_t
 *
__gu¨dsize
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

301 
size_t
 
__gu¨dsize
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


307 
__©å
,

308 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

313 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


314 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

317 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


318 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__öhîô
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

332 
__öhîô
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

338 *
__ª°ri˘
 
__sc›e
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

354 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

355 *
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

359 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


360 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

366 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

367 
size_t
 
__°acksize
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1));

370 #ifde‡
__USE_XOPEN2K


372 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

373 **
__ª°ri˘
 
__°ackaddr
,

374 
size_t
 *
__ª°ri˘
 
__°acksize
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

380 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

381 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

384 #ifde‡
__USE_GNU


387 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

388 
size_t
 
__˝u£tsize
,

389 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

394 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

395 
size_t
 
__˝u£tsize
,

396 
˝u_£t_t
 *
__˝u£t
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

404 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

413 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

414 
__THROW
 
	`__n⁄nuŒ
 ((3));

417 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

418 *
__ª°ri˘
 
__pﬁicy
,

419 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

420 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

423 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

424 
__THROW
;

427 #ifde‡
__USE_UNIX98


429 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

432 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

435 #ifde‡
__USE_GNU


440 
	$±hªad_yõld
 (Ë
__THROW
;

445 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

446 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3));

450 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

465 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

466 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

477 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

481 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

484 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

489 
	`±hªad_ã°ˇn˚l
 ();

498 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

499 
__mask_was_ßved
;

500 } 
__ˇn˚l_jmp_buf
[1];

501 *
__∑d
[4];

502 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

505 #i‚de‡
__˛ónup_f˘_©åibuã


506 
	#__˛ónup_f˘_©åibuã


	)

511 
	s__±hªad_˛ónup_‰ame


513 (*
__ˇn˚l_routöe
) (*);

514 *
__ˇn˚l_¨g
;

515 
__do_ô
;

516 
__ˇn˚l_ty≥
;

519 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


520 #ifde‡
__˝lu•lus


522 ˛as†
	c__±hªad_˛ónup_˛ass


524 (*
__ˇn˚l_routöe
) (*);

525 *
__ˇn˚l_¨g
;

526 
__do_ô
;

527 
__ˇn˚l_ty≥
;

529 
public
:

530 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

531 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	`__do_ô
 (1) { }

532 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

533 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

534 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

535 &
__ˇn˚l_ty≥
); 
	}
}

536 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

546 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

548 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

552 
	#±hªad_˛ónup_p›
(
execuã
) \

553 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

554 } 0)

	)

556 #ifde‡
__USE_GNU


560 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

562 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

563 
__˛‰ame
.
	`__de„r
 ()

	)

568 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

569 
__˛‰ame
.
	`__ª°‹e
 (); \

570 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

571 } 0)

	)

578 
__ölöe
 

579 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

581 i‡(
__‰ame
->
__do_ô
)

582 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

583 
	}
}

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

595 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

596 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

597 .
__do_ô
 = 1 };

	)

601 
	#±hªad_˛ónup_p›
(
execuã
) \

602 
__˛‰ame
.
__do_ô
 = (
execuã
); \

603 } 0)

	)

605 #ifde‡
__USE_GNU


609 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

611 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

612 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

613 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

614 .
__do_ô
 = 1 }; \

615 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

616 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

621 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

622 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

623 
__˛‰ame
.
__do_ô
 = (
execuã
); \

624 } 0)

	)

635 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

637 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

638 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

639 *
__ˇn˚l_¨g
 = (
¨g
); \

640 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

641 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

642 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

644 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

645 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

649 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

650 dÿ{

	)

651 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

652 
__˛ónup_f˘_©åibuã
;

656 
	#±hªad_˛ónup_p›
(
execuã
) \

658 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

659 i‡(
execuã
) \

660 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

661 } 0)

	)

662 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

663 
__˛ónup_f˘_©åibuã
;

665 #ifde‡
__USE_GNU


669 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

671 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

672 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

673 *
__ˇn˚l_¨g
 = (
¨g
); \

674 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

675 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

676 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

678 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

679 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

683 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

684 dÿ{

	)

685 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

686 
__˛ónup_f˘_©åibuã
;

691 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

693 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

694 i‡(
execuã
) \

695 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

696 
	}
} 0)

	)

697 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

698 
__˛ónup_f˘_©åibuã
;

702 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

704 #i‚de‡
SHARED


705 
	`__©åibuã__
 ((
__wók__
))

711 
__jmp_buf_èg
;

712 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

718 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

719 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1));

723 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1));

727 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

728 
__THROW
 
	`__n⁄nuŒ
 ((1));

731 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

732 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 #ifde‡
__USE_XOPEN2K


736 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

737 
__c⁄°
 
time•ec
 *
__ª°ri˘


738 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

742 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 #ifde‡
__USE_UNIX98


748 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

749 
__ª°ri˘
 
__muãx
,

750 *
__ª°ri˘
 
__¥io˚ûög
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

755 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

756 
__¥io˚ûög
,

757 *
__ª°ri˘
 
__ﬁd_˚ûög
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

762 #ifde‡
__USE_GNU


764 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

774 
__THROW
 
	`__n⁄nuŒ
 ((1));

777 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

781 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

782 
__ª°ri˘
 
__©å
,

783 *
__ª°ri˘
 
__psh¨ed
)

784 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

787 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

788 
__psh¨ed
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1));

791 #ifde‡
__USE_UNIX98


793 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


794 
__©å
, *
__ª°ri˘
 
__köd
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

800 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1));

804 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

805 
__ª°ri˘
 
__©å
,

806 *
__ª°ri˘
 
__¥Ÿocﬁ
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__¥Ÿocﬁ
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

816 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

817 
__ª°ri˘
 
__©å
,

818 *
__ª°ri˘
 
__¥io˚ûög
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

822 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

823 
__¥io˚ûög
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_GNU


829 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

830 *
__robu°√ss
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

835 
__robu°√ss
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1));

840 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


845 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

846 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


847 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1));

854 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

864 
__c⁄°
 
time•ec
 *
__ª°ri˘


865 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

869 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_XOPEN2K


878 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

879 
__c⁄°
 
time•ec
 *
__ª°ri˘


880 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

884 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

892 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1));

899 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

900 
__ª°ri˘
 
__©å
,

901 *
__ª°ri˘
 
__psh¨ed
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

905 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

906 
__psh¨ed
)

907 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

911 
__ª°ri˘
 
__©å
,

912 *
__ª°ri˘
 
__¥ef
)

913 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

916 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

917 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

926 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


927 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

930 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

946 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

947 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

948 
	`__n⁄nuŒ
 ((1, 2));

957 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

958 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

959 
__c⁄°
 
time•ec
 *
__ª°ri˘


960 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

965 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

974 
__ª°ri˘
 
__©å
,

975 *
__ª°ri˘
 
__psh¨ed
)

976 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

979 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

980 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

982 #ifde‡
__USE_XOPEN2K


984 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

985 
__ª°ri˘
 
__©å
,

986 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

987 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

990 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

991 
__˛ockid_t
 
__˛ock_id
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 #ifde‡
__USE_XOPEN2K


1001 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1002 
__THROW
 
	`__n⁄nuŒ
 ((1));

1005 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1018 
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1026 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1027 
__©å
, 
__cou¡
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1));

1031 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1032 
__THROW
 
	`__n⁄nuŒ
 ((1));

1035 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1049 
__ª°ri˘
 
__©å
,

1050 *
__ª°ri˘
 
__psh¨ed
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1054 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1055 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1068 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1069 (*
__de°r_fun˘i⁄
) (*))

1070 
__THROW
 
	`__n⁄nuŒ
 ((1));

1073 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1076 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1079 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1080 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1083 #ifde‡
__USE_XOPEN2K


1085 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1086 
__˛ockid_t
 *
__˛ock_id
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((2));

1102 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1103 (*
__∑ª¡
) (),

1104 (*
__chûd
Ë()Ë
__THROW
;

1107 #ifde‡
__USE_EXTERN_INLINES


1109 
__ölöe
 

1110 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1112  
__thªad1
 =
__thªad2
;

1113 
	}
}

1116 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

51 #i‚de‡
WEOF


52 
	#WEOF
 (0xffffffffu)

	)

55 #unde‡
__√ed_iswxxx


60 #i‚de‡
__iswxxx_deföed


61 
	#__iswxxx_deföed
 1

	)

63 
__BEGIN_NAMESPACE_C99


66 
	tw˘y≥_t
;

67 
__END_NAMESPACE_C99


69 #i‚de‡
_ISwbô


74 
	~<ídün.h
>

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

78 
	#_ISwbô
(
bô
) \

79 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

80 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

81 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

82 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

87 
__ISwuµî
 = 0,

88 
__ISwlowî
 = 1,

89 
__ISwÆpha
 = 2,

90 
__ISwdigô
 = 3,

91 
__ISwxdigô
 = 4,

92 
__ISw•a˚
 = 5,

93 
__ISw¥öt
 = 6,

94 
__ISwgøph
 = 7,

95 
__ISwbœnk
 = 8,

96 
__ISw˙ål
 = 9,

97 
__ISwpun˘
 = 10,

98 
__ISwÆnum
 = 11,

100 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

101 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

102 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

103 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

104 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

105 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

106 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

107 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

108 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

109 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

110 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

111 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

116 
__BEGIN_DECLS


118 
__BEGIN_NAMESPACE_C99


125 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

131 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

138 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

150 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

155 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

160 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

165 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

170 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

175 #ifde‡
__USE_ISOC99


176 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

185 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

189 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

190 
__END_NAMESPACE_C99


197 
__BEGIN_NAMESPACE_C99


200 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

201 
__END_NAMESPACE_C99


202 #ifde‡
__USE_GNU


203 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

206 
__BEGIN_NAMESPACE_C99


208 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

211 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
__END_NAMESPACE_C99


214 
__END_DECLS


221 #ifde‡
_WCTYPE_H


227 
__BEGIN_DECLS


229 
__BEGIN_NAMESPACE_C99


232 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

235 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

236 
__END_NAMESPACE_C99


238 #ifde‡
__USE_GNU


240 
	~<xloˇÀ.h
>

244 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

250 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

257 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

269 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

274 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

279 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

289 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

294 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

298 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

299 
__THROW
;

303 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

304 
__THROW
;

312 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

319 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

320 
__THROW
;

323 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

324 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

77 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

81 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

36 #ifde‡
__USE_MISC


38 
	#CSIGNAL
 0x000000f‡

	)

39 
	#CLONE_VM
 0x00000100

	)

40 
	#CLONE_FS
 0x00000200

	)

41 
	#CLONE_FILES
 0x00000400

	)

42 
	#CLONE_SIGHAND
 0x00000800

	)

43 
	#CLONE_PTRACE
 0x00002000

	)

44 
	#CLONE_VFORK
 0x00004000

	)

46 
	#CLONE_PARENT
 0x00008000

	)

48 
	#CLONE_THREAD
 0x00010000

	)

49 
	#CLONE_NEWNS
 0x00020000

	)

50 
	#CLONE_SYSVSEM
 0x00040000

	)

51 
	#CLONE_SETTLS
 0x00080000

	)

52 
	#CLONE_PARENT_SETTID
 0x00100000

	)

54 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

56 
	#CLONE_DETACHED
 0x00400000

	)

57 
	#CLONE_UNTRACED
 0x00800000

	)

59 
	#CLONE_CHILD_SETTID
 0x01000000

	)

61 
	#CLONE_STOPPED
 0x02000000

	)

65 
	ssched_∑øm


67 
	m__sched_¥i‹ôy
;

70 
	g__BEGIN_DECLS


72 #ifde‡
__USE_MISC


74 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

75 
__Êags
, *
__¨g
, ...Ë
__THROW
;

78 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

81 
__END_DECLS


85 #i‡!
deföed
 
__deföed_sched∑øm
 \

86 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

87 
	#__deföed_sched∑øm
 1

	)

89 
	s__sched_∑øm


91 
__sched_¥i‹ôy
;

93 #unde‡
__√ed_sched∑øm


97 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


98 
	#__˝u_£t_t_deföed


	)

100 
	#__CPU_SETSIZE
 1024

	)

101 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

104 
	t__˝u_mask
;

107 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

108 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

113 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

114 } 
	t˝u_£t_t
;

117 
	#__CPU_ZERO
(
˝u£ç
) \

119 
__i
; \

120 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

121 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

122 
__¨r
->
__bôs
[
__i
] = 0; \

123 
	}
} 0)

	)

124 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

125 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

126 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

127 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

128 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

129 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@
1
.
1
/usr/include
57
1394
ca0106.h
ca0106.test.c
ca0106_main.c
ca0106_mixer.c
ca0106_proc.c
ca_midi.c
ca_midi.h
modif_annots.h
../../common/mpci-bus.h
/usr/include/stdio.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/pci_ids.h
/usr/include/linux/pci_regs.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/bits/libc-lock.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/xlocale.h
/usr/include/bits/endian.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/time.h
/usr/include/bits/sched.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/time.h
/usr/include/sys/ucontext.h
