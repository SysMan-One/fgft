cscope 15 /scratch/sym/ipc_drivers/psmousebase               0000225577
	@alps.c

17 
	~<löux/öput.h
>

18 
	~<löux/£rio.h
>

19 
	~<löux/libps2.h
>

21 
	~"psmou£.h
"

22 
	~"Æps.h
"

24 #unde‡
DEBUG


25 #ifde‡
DEBUG


26 
	#dbg
(
f‹m©
, 
¨g
...Ë
	`¥ötk
(
KERN_INFO
 "Æps.c: " f‹m© "\n", ##árg)

	)

28 
	#dbg
(
f‹m©
, 
¨g
...Ëdÿ{} 0)

	)

31 
	#ALPS_DUALPOINT
 0x01

	)

32 
	#ALPS_WHEEL
 0x02

	)

33 
	#ALPS_FW_BK_1
 0x04

	)

34 
	#ALPS_4BTN
 0x08

	)

35 
	#ALPS_OLDPROTO
 0x10

	)

36 
	#ALPS_PASS
 0x20

	)

37 
	#ALPS_FW_BK_2
 0x40

	)

39 c⁄° 
Æps_modñ_öfo
 
	gÆps_modñ_d©a
[] = {

40 { { 0x33, 0x02, 0x0®}, 0x88, 0xf8, 
ALPS_OLDPROTO
 },

46 { { 0x63, 0x02, 0x28 }, 0xf8, 0xf8, 
ALPS_FW_BK_2
 },

47 { { 0x63, 0x02, 0x3¯}, 0x8f, 0x8f, 
ALPS_WHEEL
 },

48 { { 0x63, 0x02, 0x50 }, 0xef, 0xef, 
ALPS_FW_BK_1
 },

50 { { 0x63, 0x03, 0xc8 }, 0xf8, 0xf8, 
ALPS_PASS
 },

51 { { 0x73, 0x00, 0x0®}, 0xf8, 0xf8, 
ALPS_DUALPOINT
 },

53 { { 0x73, 0x02, 0x14 }, 0xf8, 0xf8, 
ALPS_FW_BK_2
 },

54 { { 0x20, 0x02, 0x0ê}, 0xf8, 0xf8, 
ALPS_PASS
 | 
ALPS_DUALPOINT
 },

55 { { 0x22, 0x02, 0x0®}, 0xf8, 0xf8, 
ALPS_PASS
 | 
ALPS_DUALPOINT
 },

56 { { 0x22, 0x02, 0x14 }, 0xff, 0xff, 
ALPS_PASS
 | 
ALPS_DUALPOINT
 },

57 { { 0x62, 0x02, 0x14 }, 0xcf, 0xcf, 
ALPS_PASS
 | 
ALPS_DUALPOINT
 },

58 { { 0x73, 0x02, 0x50 }, 0xcf, 0xcf, 
ALPS_FW_BK_1
 }

82 
	$Æps_¥o˚ss_∑ckë
(
psmou£
 *psmouse)

84 
Æps_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

85 *
∑ckë
 = 
psmou£
->packet;

86 
öput_dev
 *
dev
 = 
psmou£
->dev;

87 
öput_dev
 *
dev2
 = 
¥iv
->dev2;

88 
x
, 
y
, 
z
, 
ges
, 
fö
, 
À·
, 
right
, 
middÀ
;

89 
back
 = 0, 
f‹w¨d
 = 0;

91 i‡((
∑ckë
[0] & 0xc8) == 0x08) {

92 
	`öput_ªp‹t_key
(
dev2
, 
BTN_LEFT
, 
∑ckë
[0] & 1);

93 
	`öput_ªp‹t_key
(
dev2
, 
BTN_RIGHT
, 
∑ckë
[0] & 2);

94 
	`öput_ªp‹t_key
(
dev2
, 
BTN_MIDDLE
, 
∑ckë
[0] & 4);

95 
	`öput_ªp‹t_ªl
(
dev2
, 
REL_X
,

96 
∑ckë
[1] ?Öacket[1] - ((packet[0] << 4) & 0x100) : 0);

97 
	`öput_ªp‹t_ªl
(
dev2
, 
REL_Y
,

98 
∑ckë
[2] ? ((packet[0] << 3) & 0x100) -Öacket[2] : 0);

99 
	`öput_sync
(
dev2
);

103 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_OLDPROTO
) {

104 
À·
 = 
∑ckë
[2] & 0x10;

105 
right
 = 
∑ckë
[2] & 0x08;

106 
middÀ
 = 0;

107 
x
 = 
∑ckë
[1] | ((packet[0] & 0x07) << 7);

108 
y
 = 
∑ckë
[4] | ((packet[3] & 0x07) << 7);

109 
z
 = 
∑ckë
[5];

111 
À·
 = 
∑ckë
[3] & 1;

112 
right
 = 
∑ckë
[3] & 2;

113 
middÀ
 = 
∑ckë
[3] & 4;

114 
x
 = 
∑ckë
[1] | ((packet[2] & 0x78) << (7 - 3));

115 
y
 = 
∑ckë
[4] | ((packet[3] & 0x70) << (7 - 4));

116 
z
 = 
∑ckë
[5];

119 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_FW_BK_1
) {

120 
back
 = 
∑ckë
[0] & 0x10;

121 
f‹w¨d
 = 
∑ckë
[2] & 4;

124 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_FW_BK_2
) {

125 
back
 = 
∑ckë
[3] & 4;

126 
f‹w¨d
 = 
∑ckë
[2] & 4;

127 i‡((
middÀ
 = 
f‹w¨d
 && 
back
))

128 
f‹w¨d
 = 
back
 = 0;

131 
ges
 = 
∑ckë
[2] & 1;

132 
fö
 = 
∑ckë
[2] & 2;

134 
	`öput_ªp‹t_key
(
dev
, 
BTN_LEFT
, 
À·
);

135 
	`öput_ªp‹t_key
(
dev
, 
BTN_RIGHT
, 
right
);

136 
	`öput_ªp‹t_key
(
dev
, 
BTN_MIDDLE
, 
middÀ
);

138 i‡((
¥iv
->
i
->
Êags
 & 
ALPS_DUALPOINT
Ë&& 
z
 == 127) {

139 
	`öput_ªp‹t_ªl
(
dev2
, 
REL_X
, (
x
 > 383 ? (x - 768) : x));

140 
	`öput_ªp‹t_ªl
(
dev2
, 
REL_Y
, -(
y
 > 255 ? (y - 512) : y));

141 
	`öput_sync
(
dev
);

142 
	`öput_sync
(
dev2
);

147 i‡(
ges
 && !
fö
Ë
z
 = 40;

154 i‡(
ges
 && 
fö
 && !
¥iv
->
¥ev_fö
) {

155 
	`öput_ªp‹t_abs
(
dev
, 
ABS_X
, 
x
);

156 
	`öput_ªp‹t_abs
(
dev
, 
ABS_Y
, 
y
);

157 
	`öput_ªp‹t_abs
(
dev
, 
ABS_PRESSURE
, 0);

158 
	`öput_ªp‹t_key
(
dev
, 
BTN_TOOL_FINGER
, 0);

159 
	`öput_sync
(
dev
);

161 
¥iv
->
¥ev_fö
 = 
fö
;

163 i‡(
z
 > 30Ë
	`öput_ªp‹t_key
(
dev
, 
BTN_TOUCH
, 1);

164 i‡(
z
 < 25Ë
	`öput_ªp‹t_key
(
dev
, 
BTN_TOUCH
, 0);

166 i‡(
z
 > 0) {

167 
	`öput_ªp‹t_abs
(
dev
, 
ABS_X
, 
x
);

168 
	`öput_ªp‹t_abs
(
dev
, 
ABS_Y
, 
y
);

171 
	`öput_ªp‹t_abs
(
dev
, 
ABS_PRESSURE
, 
z
);

172 
	`öput_ªp‹t_key
(
dev
, 
BTN_TOOL_FINGER
, 
z
 > 0);

174 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_WHEEL
)

175 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, ((
∑ckë
[2] << 1) & 0x08) - ((packet[0] >> 4) & 0x07));

177 i‡(
¥iv
->
i
->
Êags
 & (
ALPS_FW_BK_1
 | 
ALPS_FW_BK_2
)) {

178 
	`öput_ªp‹t_key
(
dev
, 
BTN_FORWARD
, 
f‹w¨d
);

179 
	`öput_ªp‹t_key
(
dev
, 
BTN_BACK
, 
back
);

182 
	`öput_sync
(
dev
);

183 
	}
}

185 
psmou£_ªt_t
 
	$Æps_¥o˚ss_byã
(
psmou£
 *psmouse)

187 
Æps_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

189 i‡((
psmou£
->
∑ckë
[0] & 0xc8) == 0x08) {

190 i‡(
psmou£
->
pkt˙t
 == 3) {

191 
	`Æps_¥o˚ss_∑ckë
(
psmou£
);

192  
PSMOUSE_FULL_PACKET
;

194  
PSMOUSE_GOOD_DATA
;

197 i‡((
psmou£
->
∑ckë
[0] & 
¥iv
->
i
->
mask0
Ë!¥iv->i->
byã0
)

198  
PSMOUSE_BAD_DATA
;

201 i‡(
psmou£
->
pkt˙t
 >= 2 &&Ösmouse->pktcnt <= 6 &&

202 (
psmou£
->
∑ckë
[psmou£->
pkt˙t
 - 1] & 0x80))

203  
PSMOUSE_BAD_DATA
;

205 i‡(
psmou£
->
pkt˙t
 == 6) {

206 
	`Æps_¥o˚ss_∑ckë
(
psmou£
);

207  
PSMOUSE_FULL_PACKET
;

210  
PSMOUSE_GOOD_DATA
;

211 
	}
}

213 c⁄° 
Æps_modñ_öfo
 *
	$Æps_gë_modñ
(
psmou£
 *psmou£, *
vîsi⁄
)

215 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

216 c⁄° 
øãs
[] = { 0, 10, 20, 40, 60, 80, 100, 200 };

217 
∑øm
[4];

218 
i
;

224 
∑øm
[0] = 0;

225 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
) ||

226 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
) ||

227 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
) ||

228 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
))

229  
NULL
;

231 
∑øm
[0] =Öaram[1] =Öaram[2] = 0xff;

232 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
))

233  
NULL
;

235 
	`dbg
("E6Ñï‹t: %2.2x %2.2x %2.2x", 
∑øm
[0],Öaram[1],Öaram[2]);

237 i‡(
∑øm
[0] != 0 ||Öaram[1] != 0 || (param[2] != 10 &&Öaram[2] != 100))

238  
NULL
;

244 
∑øm
[0] = 0;

245 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
) ||

246 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE21
) ||

247 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE21
) ||

248 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE21
))

249  
NULL
;

251 
∑øm
[0] =Öaram[1] =Öaram[2] = 0xff;

252 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
))

253  
NULL
;

255 
	`dbg
("E7Ñï‹t: %2.2x %2.2x %2.2x", 
∑øm
[0],Öaram[1],Öaram[2]);

257 i‡(
vîsi⁄
) {

258 
i
 = 0; i < 
	`ARRAY_SIZE
(
øãs
Ë&& 
∑øm
[2] !=Ñates[i]; i++)

260 *
vîsi⁄
 = (
∑øm
[0] << 8Ë| (∑øm[1] << 4Ë| 
i
;

263 
i
 = 0; i < 
	`ARRAY_SIZE
(
Æps_modñ_d©a
); i++)

264 i‡(!
	`memcmp
(
∑øm
, 
Æps_modñ_d©a
[
i
].
sig«tuª
,

265 (
Æps_modñ_d©a
[
i
].
sig«tuª
)))

266  
Æps_modñ_d©a
 + 
i
;

268  
NULL
;

269 
	}
}

276 
	$Æps_∑s°hrough_mode
(
psmou£
 *psmou£, 
íabÀ
)

278 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

279 
cmd
 = 
íabÀ
 ? 
PSMOUSE_CMD_SETSCALE21
 : 
PSMOUSE_CMD_SETSCALE11
;

281 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
cmd
) ||

282 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
cmd
) ||

283 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
cmd
) ||

284 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
))

288 
	`ps2_døö
(
ps2dev
, 3, 100);

291 
	}
}

293 
	$Æps_absﬁuã_mode
(
psmou£
 *psmouse)

295 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

298 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

299 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

300 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

301 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

302 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
))

309  
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETPOLL
);

310 
	}
}

312 
	$Æps_gë_°©us
(
psmou£
 *psmou£, *
∑øm
)

314 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

317 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

318 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

319 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

320 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
))

323 
	`dbg
("Sètus: %2.2x %2.2x %2.2x", 
∑øm
[0],Öaram[1],Öaram[2]);

326 
	}
}

337 
	$Æps_èp_mode
(
psmou£
 *psmou£, 
íabÀ
)

339 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

340 
cmd
 = 
íabÀ
 ? 
PSMOUSE_CMD_SETRATE
 : 
PSMOUSE_CMD_SETRES
;

341 
èp_¨g
 = 
íabÀ
 ? 0x0A : 0x00;

342 
∑øm
[4];

344 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
) ||

345 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

346 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
) ||

347 
	`ps2_comm™d
(
ps2dev
, &
èp_¨g
, 
cmd
))

350 i‡(
	`Æps_gë_°©us
(
psmou£
, 
∑øm
))

354 
	}
}

360 
	$Æps_pﬁl
(
psmou£
 *psmouse)

362 
Æps_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

363 
buf
[6];

364 
pﬁl_Áûed
;

366 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_PASS
)

367 
	`Æps_∑s°hrough_mode
(
psmou£
, 1);

369 
pﬁl_Áûed
 = 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
buf
,

370 
PSMOUSE_CMD_POLL
 | (
psmou£
->
pktsize
 << 8)) < 0;

372 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_PASS
)

373 
	`Æps_∑s°hrough_mode
(
psmou£
, 0);

375 i‡(
pﬁl_Áûed
 || (
buf
[0] & 
¥iv
->
i
->
mask0
Ë!¥iv->i->
byã0
)

378 i‡((
psmou£
->
badbyã
 & 0xc8) == 0x08) {

382 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
buf
, 
PSMOUSE_CMD_POLL
 | (3 << 8)))

386 
	`mem˝y
(
psmou£
->
∑ckë
, 
buf
, (buf));

388 
	}
}

390 
	$Æps_hw_öô
(
psmou£
 *psmou£, *
vîsi⁄
)

392 
Æps_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

394 
¥iv
->
i
 = 
	`Æps_gë_modñ
(
psmou£
, 
vîsi⁄
);

395 i‡(!
¥iv
->
i
)

398 i‡((
¥iv
->
i
->
Êags
 & 
ALPS_PASS
Ë&& 
	`Æps_∑s°hrough_mode
(
psmou£
, 1))

401 i‡(
	`Æps_èp_mode
(
psmou£
, 1)) {

402 
	`¥ötk
(
KERN_WARNING
 "alps.c: FailedÅoÉnable hardwareÅapping\n");

406 i‡(
	`Æps_absﬁuã_mode
(
psmou£
)) {

407 
	`¥ötk
(
KERN_ERR
 "alps.c: FailedÅoÉnableábsolute mode\n");

411 i‡((
¥iv
->
i
->
Êags
 & 
ALPS_PASS
Ë&& 
	`Æps_∑s°hrough_mode
(
psmou£
, 0))

415 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSTREAM
)) {

416 
	`¥ötk
(
KERN_ERR
 "alps.c: FailedÅoÉnable stream mode\n");

421 
	}
}

423 
	$Æps_ªc⁄√˘
(
psmou£
 *psmouse)

425 
	`psmou£_ª£t
(
psmou£
);

427 i‡(
	`Æps_hw_öô
(
psmou£
, 
NULL
))

431 
	}
}

433 
	$Æps_disc⁄√˘
(
psmou£
 *psmouse)

435 
Æps_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

437 
	`psmou£_ª£t
(
psmou£
);

438 
	`öput_uƒegi°î_devi˚
(
¥iv
->
dev2
);

439 
	`k‰ì
(
¥iv
);

440 
	}
}

442 
	$Æps_öô
(
psmou£
 *psmouse)

444 
Æps_d©a
 *
¥iv
;

445 
öput_dev
 *
dev1
 = 
psmou£
->
dev
, *
dev2
;

446 
vîsi⁄
;

448 
¥iv
 = 
	`kzÆloc
((
Æps_d©a
), 
GFP_KERNEL
);

449 
dev2
 = 
	`öput_Æloˇã_devi˚
();

450 i‡(!
¥iv
 || !
dev2
)

451 
öô_Áû
;

453 
¥iv
->
dev2
 = dev2;

454 
psmou£
->
¥iv©e
 = 
¥iv
;

456 i‡(
	`Æps_hw_öô
(
psmou£
, &
vîsi⁄
))

457 
öô_Áû
;

459 
dev1
->
evbô
[
	`BIT_WORD
(
EV_KEY
)] |
	`BIT_MASK
(EV_KEY);

460 
dev1
->
keybô
[
	`BIT_WORD
(
BTN_TOUCH
)] |
	`BIT_MASK
(BTN_TOUCH);

461 
dev1
->
keybô
[
	`BIT_WORD
(
BTN_TOOL_FINGER
)] |
	`BIT_MASK
(BTN_TOOL_FINGER);

462 
dev1
->
keybô
[
	`BIT_WORD
(
BTN_LEFT
)] |
	`BIT_MASK
(BTN_LEFT) |

463 
	`BIT_MASK
(
BTN_MIDDLE
Ë| BIT_MASK(
BTN_RIGHT
);

465 
dev1
->
evbô
[
	`BIT_WORD
(
EV_ABS
)] |
	`BIT_MASK
(EV_ABS);

466 
	`öput_£t_abs_∑øms
(
dev1
, 
ABS_X
, 0, 1023, 0, 0);

467 
	`öput_£t_abs_∑øms
(
dev1
, 
ABS_Y
, 0, 767, 0, 0);

468 
	`öput_£t_abs_∑øms
(
dev1
, 
ABS_PRESSURE
, 0, 127, 0, 0);

470 i‡(
¥iv
->
i
->
Êags
 & 
ALPS_WHEEL
) {

471 
dev1
->
evbô
[
	`BIT_WORD
(
EV_REL
)] |
	`BIT_MASK
(EV_REL);

472 
dev1
->
ªlbô
[
	`BIT_WORD
(
REL_WHEEL
)] |
	`BIT_MASK
(REL_WHEEL);

475 i‡(
¥iv
->
i
->
Êags
 & (
ALPS_FW_BK_1
 | 
ALPS_FW_BK_2
)) {

476 
dev1
->
keybô
[
	`BIT_WORD
(
BTN_FORWARD
)] |
	`BIT_MASK
(BTN_FORWARD);

477 
dev1
->
keybô
[
	`BIT_WORD
(
BTN_BACK
)] |
	`BIT_MASK
(BTN_BACK);

480 
	`¢¥ötf
(
¥iv
->
phys
, ’riv->phys), "%s/öput1", 
psmou£
->
ps2dev
.
£rio
->phys);

481 
dev2
->
phys
 = 
¥iv
->phys;

482 
dev2
->
«me
 = (
¥iv
->
i
->
Êags
 & 
ALPS_DUALPOINT
) ? "DualPoint Stick" : "PS/2 Mouse";

483 
dev2
->
id
.
bu°y≥
 = 
BUS_I8042
;

484 
dev2
->
id
.
víd‹
 = 0x0002;

485 
dev2
->
id
.
¥odu˘
 = 
PSMOUSE_ALPS
;

486 
dev2
->
id
.
vîsi⁄
 = 0x0000;

487 
dev2
->
dev
.
∑ª¡
 = &
psmou£
->
ps2dev
.
£rio
->dev;

489 
dev2
->
evbô
[0] = 
	`BIT_MASK
(
EV_KEY
Ë| BIT_MASK(
EV_REL
);

490 
dev2
->
ªlbô
[
	`BIT_WORD
(
REL_X
)] |
	`BIT_MASK
(REL_XË| BIT_MASK(
REL_Y
);

491 
dev2
->
keybô
[
	`BIT_WORD
(
BTN_LEFT
)] |
	`BIT_MASK
(BTN_LEFT) |

492 
	`BIT_MASK
(
BTN_MIDDLE
Ë| BIT_MASK(
BTN_RIGHT
);

494 i‡(
	`öput_ªgi°î_devi˚
(
¥iv
->
dev2
))

495 
öô_Áû
;

497 
psmou£
->
¥Ÿocﬁ_h™dÀr
 = 
Æps_¥o˚ss_byã
;

498 
psmou£
->
pﬁl
 = 
Æps_pﬁl
;

499 
psmou£
->
disc⁄√˘
 = 
Æps_disc⁄√˘
;

500 
psmou£
->
ªc⁄√˘
 = 
Æps_ªc⁄√˘
;

501 
psmou£
->
pktsize
 = 6;

504 
psmou£
->
ªsync_time
 = 0;

508 
öô_Áû
:

509 
	`psmou£_ª£t
(
psmou£
);

510 
	`öput_‰ì_devi˚
(
dev2
);

511 
	`k‰ì
(
¥iv
);

512 
psmou£
->
¥iv©e
 = 
NULL
;

514 
	}
}

516 
	$Æps_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

518 
vîsi⁄
;

519 c⁄° 
Æps_modñ_öfo
 *
modñ
;

521 
modñ
 = 
	`Æps_gë_modñ
(
psmou£
, &
vîsi⁄
);

522 i‡(!
modñ
)

525 i‡(
£t_¥›îtõs
) {

526 
psmou£
->
víd‹
 = "ALPS";

527 
psmou£
->
«me
 = 
modñ
->
Êags
 & 
ALPS_DUALPOINT
 ?

529 
psmou£
->
modñ
 = 
vîsi⁄
;

532 
	}
}

	@alps.h

12 #i‚de‡
_ALPS_H


13 
	#_ALPS_H


	)

15 
	sÆps_modñ_öfo
 {

16 
	msig«tuª
[3];

17 
	mbyã0
, 
	mmask0
;

18 
	mÊags
;

21 
	sÆps_d©a
 {

22 
öput_dev
 *
	mdev2
;

23 
	mphys
[32];

24 c⁄° 
Æps_modñ_öfo
 *
	mi
;

25 
	m¥ev_fö
;

28 #ifde‡
CONFIG_MOUSE_PS2_ALPS


29 
Æps_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

30 
Æps_öô
(
psmou£
 *psmouse);

32 
ölöe
 
	$Æps_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

34  -
ENOSYS
;

35 
	}
}

36 
ölöe
 
	$Æps_öô
(
psmou£
 *psmouse)

38  -
ENOSYS
;

39 
	}
}

	@elantech.h

13 #i‚de‡
_ELANTECH_H


14 
	#_ELANTECH_H


	)

19 
	#ETP_FW_VERSION_QUERY
 0x01

	)

20 
	#ETP_CAPABILITIES_QUERY
 0x02

	)

25 
	#ETP_REGISTER_READ
 0x10

	)

26 
	#ETP_REGISTER_WRITE
 0x11

	)

31 
	#ETP_PS2_CUSTOM_COMMAND
 0xf8

	)

36 
	#ETP_PS2_COMMAND_TRIES
 3

	)

37 
	#ETP_PS2_COMMAND_DELAY
 500

	)

42 
	#ETP_READ_BACK_TRIES
 5

	)

43 
	#ETP_READ_BACK_DELAY
 2000

	)

48 
	#ETP_R10_ABSOLUTE_MODE
 0x04

	)

49 
	#ETP_R11_4_BYTE_MODE
 0x02

	)

54 
	#ETP_CAP_HAS_ROCKER
 0x04

	)

61 
	#ETP_EDGE_FUZZ_V1
 32

	)

63 
	#ETP_XMIN_V1
 ( 0 + 
ETP_EDGE_FUZZ_V1
)

	)

64 
	#ETP_XMAX_V1
 (576 - 
ETP_EDGE_FUZZ_V1
)

	)

65 
	#ETP_YMIN_V1
 ( 0 + 
ETP_EDGE_FUZZ_V1
)

	)

66 
	#ETP_YMAX_V1
 (384 - 
ETP_EDGE_FUZZ_V1
)

	)

73 
	#ETP_EDGE_FUZZ_V2
 8

	)

75 
	#ETP_XMIN_V2
 ( 0 + 
ETP_EDGE_FUZZ_V2
)

	)

76 
	#ETP_XMAX_V2
 (1152 - 
ETP_EDGE_FUZZ_V2
)

	)

77 
	#ETP_YMIN_V2
 ( 0 + 
ETP_EDGE_FUZZ_V2
)

	)

78 
	#ETP_YMAX_V2
 ( 768 - 
ETP_EDGE_FUZZ_V2
)

	)

84 
	#ETP_2FT_FUZZ
 4

	)

86 
	#ETP_2FT_XMIN
 ( 0 + 
ETP_2FT_FUZZ
)

	)

87 
	#ETP_2FT_XMAX
 (288 - 
ETP_2FT_FUZZ
)

	)

88 
	#ETP_2FT_YMIN
 ( 0 + 
ETP_2FT_FUZZ
)

	)

89 
	#ETP_2FT_YMAX
 (192 - 
ETP_2FT_FUZZ
)

	)

91 
	sñ™ãch_d©a
 {

92 
	mªg_10
;

93 
	mªg_11
;

94 
	mªg_20
;

95 
	mªg_21
;

96 
	mªg_22
;

97 
	mªg_23
;

98 
	mªg_24
;

99 
	mªg_25
;

100 
	mªg_26
;

101 
	mdebug
;

102 
	mˇ∑bûôõs
;

103 
	mfw_vîsi⁄_maj
;

104 
	mfw_vîsi⁄_mö
;

105 
	mhw_vîsi⁄
;

106 
	m∑rôycheck
;

107 
	m∑rôy
[256];

110 #ifde‡
CONFIG_MOUSE_PS2_ELANTECH


111 
ñ™ãch_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

112 
ñ™ãch_öô
(
psmou£
 *psmouse);

114 
ölöe
 
	$ñ™ãch_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

116  -
ENOSYS
;

117 
	}
}

118 
ölöe
 
	$ñ™ãch_öô
(
psmou£
 *psmouse)

120  -
ENOSYS
;

121 
	}
}

	@hgpk.h

5 #i‚de‡
_HGPK_H


6 
	#_HGPK_H


	)

8 
	ehgpk_modñ_t
 {

9 
	mHGPK_MODEL_PREA
 = 0x0a,

10 
	mHGPK_MODEL_A
 = 0x14,

11 
	mHGPK_MODEL_B
 = 0x28,

12 
	mHGPK_MODEL_C
 = 0x3c,

13 
	mHGPK_MODEL_D
 = 0x50,

16 
	shgpk_d©a
 {

17 
psmou£
 *
	mpsmou£
;

18 
	mpowîed
;

19 
	mcou¡
, 
	mx_èŒy
, 
	my_èŒy
;

20 
	mªˇlib_wödow
;

21 
dñayed_w‹k
 
	mªˇlib_wq
;

24 
	#hgpk_dbg
(
psmou£
, 
f‹m©
, 
¨g
...) \

25 
	`dev_dbg
(&(
psmou£
)->
ps2dev
.
£rio
->
dev
, 
f‹m©
, ## 
¨g
)

	)

26 
	#hgpk_îr
(
psmou£
, 
f‹m©
, 
¨g
...) \

27 
	`dev_îr
(&(
psmou£
)->
ps2dev
.
£rio
->
dev
, 
f‹m©
, ## 
¨g
)

	)

28 
	#hgpk_öfo
(
psmou£
, 
f‹m©
, 
¨g
...) \

29 
	`dev_öfo
(&(
psmou£
)->
ps2dev
.
£rio
->
dev
, 
f‹m©
, ## 
¨g
)

	)

30 
	#hgpk_w¨n
(
psmou£
, 
f‹m©
, 
¨g
...) \

31 
	`dev_w¨n
(&(
psmou£
)->
ps2dev
.
£rio
->
dev
, 
f‹m©
, ## 
¨g
)

	)

32 
	#hgpk_nŸi˚
(
psmou£
, 
f‹m©
, 
¨g
...) \

33 
	`dev_nŸi˚
(&(
psmou£
)->
ps2dev
.
£rio
->
dev
, 
f‹m©
, ## 
¨g
)

	)

35 #ifde‡
CONFIG_MOUSE_PS2_OLPC


36 
hgpk_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

37 
hgpk_öô
(
psmou£
 *psmouse);

39 
ölöe
 
	$hgpk_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

41  -
ENODEV
;

42 
	}
}

43 
ölöe
 
	$hgpk_öô
(
psmou£
 *psmouse)

45  -
ENODEV
;

46 
	}
}

	@lifebook.c

15 
	~<löux/öput.h
>

16 
	~<löux/£rio.h
>

17 
	~<löux/libps2.h
>

18 
	~<löux/dmi.h
>

20 
	~"psmou£.h
"

21 
	~"li„book.h
"

23 
	sli„book_d©a
 {

24 
öput_dev
 *
	mdev2
;

25 
	mphys
[32];

28 c⁄° *
	gdesúed_£rio_phys
;

30 
	$li„book_£t_£rio_phys
(c⁄° 
dmi_sy°em_id
 *
d
)

32 
desúed_£rio_phys
 = 
d
->
drivî_d©a
;

34 
	}
}

36 
	gli„book_u£_6byã_¥Ÿo
;

38 
	$li„book_£t_6byã_¥Ÿo
(c⁄° 
dmi_sy°em_id
 *
d
)

40 
li„book_u£_6byã_¥Ÿo
 = 1;

42 
	}
}

44 c⁄° 
dmi_sy°em_id
 
	gli„book_dmi_èbÀ
[] = {

46 .
idít
 = "FLORA-ie 55mi",

47 .
	gm©ches
 = {

48 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "FLORA-ie 55mi"),

52 .
	gidít
 = "LifeBook B",

53 .
	gm©ches
 = {

54 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "LifeBook B Series"),

58 .
	gidít
 = "Lifebook B",

59 .
	gm©ches
 = {

60 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "LIFEBOOK B Series"),

64 .
	gidít
 = "Lifebook B213x/B2150",

65 .
	gm©ches
 = {

66 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "LifeBook B2131/B2133/B2150"),

70 .
	gidít
 = "Zephyr",

71 .
	gm©ches
 = {

72 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "ZEPHYR"),

76 .
	gidít
 = "CF-18",

77 .
	gm©ches
 = {

78 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "CF-18"),

80 .
	gˇŒback
 = 
li„book_£t_£rio_phys
,

81 .
	gdrivî_d©a
 = "isa0060/serio3",

84 .
	gidít
 = "Panasonic CF-28",

85 .
	gm©ches
 = {

86 
DMI_MATCH
(
DMI_SYS_VENDOR
, "Matsushita"),

87 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "CF-28"),

89 .
	gˇŒback
 = 
li„book_£t_6byã_¥Ÿo
,

92 .
	gidít
 = "Panasonic CF-29",

93 .
	gm©ches
 = {

94 
DMI_MATCH
(
DMI_SYS_VENDOR
, "Matsushita"),

95 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "CF-29"),

97 .
	gˇŒback
 = 
li„book_£t_6byã_¥Ÿo
,

100 .
	gidít
 = "CF-72",

101 .
	gm©ches
 = {

102 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "CF-72"),

104 .
	gˇŒback
 = 
li„book_£t_£rio_phys
,

105 .
	gdrivî_d©a
 = "isa0060/serio3",

108 .
	gidít
 = "Lifebook B142",

109 .
	gm©ches
 = {

110 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "LifeBook B142"),

116 
psmou£_ªt_t
 
	$li„book_¥o˚ss_byã
(
psmou£
 *psmouse)

118 
li„book_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

119 
öput_dev
 *
dev1
 = 
psmou£
->
dev
;

120 
öput_dev
 *
dev2
 = 
¥iv
 ?Öriv->dev2 : 
NULL
;

121 *
∑ckë
 = 
psmou£
->packet;

122 
ªœtive_∑ckë
 = 
∑ckë
[0] & 0x08;

124 i‡(
ªœtive_∑ckë
 || !
li„book_u£_6byã_¥Ÿo
) {

125 i‡(
psmou£
->
pkt˙t
 != 3)

126  
PSMOUSE_GOOD_DATA
;

128 
psmou£
->
pkt˙t
) {

130  (
∑ckë
[0] & 0xf8) == 0x00 ?

131 
PSMOUSE_GOOD_DATA
 : 
PSMOUSE_BAD_DATA
;

133  
PSMOUSE_GOOD_DATA
;

135  ((
∑ckë
[2] & 0x30) << 2) == (packet[2] & 0xc0) ?

136 
PSMOUSE_GOOD_DATA
 : 
PSMOUSE_BAD_DATA
;

138  (
∑ckë
[3] & 0xf8) == 0xc0 ?

139 
PSMOUSE_GOOD_DATA
 : 
PSMOUSE_BAD_DATA
;

141  (
∑ckë
[4] & 0xc0) == (packet[2] & 0xc0) ?

142 
PSMOUSE_GOOD_DATA
 : 
PSMOUSE_BAD_DATA
;

144 i‡(((
∑ckë
[5] & 0x30) << 2) != (packet[5] & 0xc0))

145  
PSMOUSE_BAD_DATA
;

146 i‡((
∑ckë
[5] & 0xc0) != (packet[1] & 0xc0))

147  
PSMOUSE_BAD_DATA
;

152 i‡(
ªœtive_∑ckë
) {

153 i‡(!
dev2
)

154 
	`¥ötk
(
KERN_WARNING
 "lifebook.c: gotÑelativeÖacket "

156 } i‡(
li„book_u£_6byã_¥Ÿo
) {

157 
	`öput_ªp‹t_abs
(
dev1
, 
ABS_X
,

158 ((
∑ckë
[1] & 0x3f) << 6) | (packet[2] & 0x3f));

159 
	`öput_ªp‹t_abs
(
dev1
, 
ABS_Y
,

160 4096 - (((
∑ckë
[4] & 0x3f) << 6) | (packet[5] & 0x3f)));

162 
	`öput_ªp‹t_abs
(
dev1
, 
ABS_X
,

163 (
∑ckë
[1] | ((packet[0] & 0x30) << 4)));

164 
	`öput_ªp‹t_abs
(
dev1
, 
ABS_Y
,

165 1024 - (
∑ckë
[2] | ((packet[0] & 0xC0) << 2)));

168 
	`öput_ªp‹t_key
(
dev1
, 
BTN_TOUCH
, 
∑ckë
[0] & 0x04);

169 
	`öput_sync
(
dev1
);

171 i‡(
dev2
) {

172 i‡(
ªœtive_∑ckë
) {

173 
	`öput_ªp‹t_ªl
(
dev2
, 
REL_X
,

174 ((
∑ckë
[0] & 0x10) ?Öacket[1] - 256 :Öacket[1]));

175 
	`öput_ªp‹t_ªl
(
dev2
, 
REL_Y
,

176 -()((
∑ckë
[0] & 0x20) ?Öacket[2] - 256 :Öacket[2]));

178 
	`öput_ªp‹t_key
(
dev2
, 
BTN_LEFT
, 
∑ckë
[0] & 0x01);

179 
	`öput_ªp‹t_key
(
dev2
, 
BTN_RIGHT
, 
∑ckë
[0] & 0x02);

180 
	`öput_sync
(
dev2
);

183  
PSMOUSE_FULL_PACKET
;

184 
	}
}

186 
	$li„book_absﬁuã_mode
(
psmou£
 *psmouse)

188 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

189 
∑øm
;

191 i‡(
	`psmou£_ª£t
(
psmou£
))

199 
∑øm
 = 
li„book_u£_6byã_¥Ÿo
 ? 0x08 : 0x07;

200 
	`ps2_comm™d
(
ps2dev
, &
∑øm
, 
PSMOUSE_CMD_SETRES
);

203 
	}
}

205 
	$li„book_ªœtive_mode
(
psmou£
 *psmouse)

207 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

208 
∑øm
 = 0x06;

210 
	`ps2_comm™d
(
ps2dev
, &
∑øm
, 
PSMOUSE_CMD_SETRES
);

211 
	}
}

213 
	$li„book_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, 
ªsﬁuti⁄
)

215 c⁄° 
∑øms
[] = { 0, 1, 2, 2, 3 };

216 
p
;

218 i‡(
ªsﬁuti⁄
 == 0 ||Ñesolution > 400)

219 
ªsﬁuti⁄
 = 400;

221 
p
 = 
∑øms
[
ªsﬁuti⁄
 / 100];

222 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
p
, 
PSMOUSE_CMD_SETRES
);

223 
psmou£
->
ªsﬁuti⁄
 = 50 << 
p
;

224 
	}
}

226 
	$li„book_disc⁄√˘
(
psmou£
 *psmouse)

228 
li„book_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

230 
	`psmou£_ª£t
(
psmou£
);

231 i‡(
¥iv
) {

232 
	`öput_uƒegi°î_devi˚
(
¥iv
->
dev2
);

233 
	`k‰ì
(
¥iv
);

235 
psmou£
->
¥iv©e
 = 
NULL
;

236 
	}
}

238 
	$li„book_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

240 i‡(!
	`dmi_check_sy°em
(
li„book_dmi_èbÀ
))

243 i‡(
desúed_£rio_phys
 &&

244 
	`°rcmp
(
psmou£
->
ps2dev
.
£rio
->
phys
, 
desúed_£rio_phys
))

247 i‡(
£t_¥›îtõs
) {

248 
psmou£
->
víd‹
 = "Fujitsu";

249 
psmou£
->
«me
 = "Lifebook TouchScreen";

253 
	}
}

255 
	$li„book_¸óã_ªœtive_devi˚
(
psmou£
 *psmouse)

257 
öput_dev
 *
dev2
;

258 
li„book_d©a
 *
¥iv
;

259 
îr‹
 = -
ENOMEM
;

261 
¥iv
 = 
	`kzÆloc
((
li„book_d©a
), 
GFP_KERNEL
);

262 
dev2
 = 
	`öput_Æloˇã_devi˚
();

263 i‡(!
¥iv
 || !
dev2
)

264 
îr_out
;

266 
¥iv
->
dev2
 = dev2;

267 
	`¢¥ötf
(
¥iv
->
phys
, (priv->phys),

268 "%s/öput1", 
psmou£
->
ps2dev
.
£rio
->
phys
);

270 
dev2
->
phys
 = 
¥iv
->phys;

271 
dev2
->
«me
 = "PS/2 Touchpad";

272 
dev2
->
id
.
bu°y≥
 = 
BUS_I8042
;

273 
dev2
->
id
.
víd‹
 = 0x0002;

274 
dev2
->
id
.
¥odu˘
 = 
PSMOUSE_LIFEBOOK
;

275 
dev2
->
id
.
vîsi⁄
 = 0x0000;

276 
dev2
->
dev
.
∑ª¡
 = &
psmou£
->
ps2dev
.
£rio
->dev;

278 
dev2
->
evbô
[0] = 
	`BIT_MASK
(
EV_KEY
Ë| BIT_MASK(
EV_REL
);

279 
dev2
->
ªlbô
[
	`BIT_WORD
(
REL_X
)] = 
	`BIT_MASK
(REL_XË| BIT_MASK(
REL_Y
);

280 
dev2
->
keybô
[
	`BIT_WORD
(
BTN_LEFT
)] = 
	`BIT_MASK
(BTN_LEFT) |

281 
	`BIT_MASK
(
BTN_RIGHT
);

283 
îr‹
 = 
	`öput_ªgi°î_devi˚
(
¥iv
->
dev2
);

284 i‡(
îr‹
)

285 
îr_out
;

287 
psmou£
->
¥iv©e
 = 
¥iv
;

290 
îr_out
:

291 
	`öput_‰ì_devi˚
(
dev2
);

292 
	`k‰ì
(
¥iv
);

293  
îr‹
;

294 
	}
}

296 
	$li„book_öô
(
psmou£
 *psmouse)

298 
öput_dev
 *
dev1
 = 
psmou£
->
dev
;

299 
max_co‹d
 = 
li„book_u£_6byã_¥Ÿo
 ? 4096 : 1024;

301 i‡(
	`li„book_absﬁuã_mode
(
psmou£
))

304 
dev1
->
evbô
[0] = 
	`BIT_MASK
(
EV_ABS
Ë| BIT_MASK(
EV_KEY
);

305 
dev1
->
ªlbô
[0] = 0;

306 
dev1
->
keybô
[
	`BIT_WORD
(
BTN_TOUCH
)] = 
	`BIT_MASK
(BTN_TOUCH);

307 
	`öput_£t_abs_∑øms
(
dev1
, 
ABS_X
, 0, 
max_co‹d
, 0, 0);

308 
	`öput_£t_abs_∑øms
(
dev1
, 
ABS_Y
, 0, 
max_co‹d
, 0, 0);

310 i‡(!
desúed_£rio_phys
) {

311 i‡(
	`li„book_¸óã_ªœtive_devi˚
(
psmou£
)) {

312 
	`li„book_ªœtive_mode
(
psmou£
);

317 
psmou£
->
¥Ÿocﬁ_h™dÀr
 = 
li„book_¥o˚ss_byã
;

318 
psmou£
->
£t_ªsﬁuti⁄
 = 
li„book_£t_ªsﬁuti⁄
;

319 
psmou£
->
disc⁄√˘
 = 
li„book_disc⁄√˘
;

320 
psmou£
->
ªc⁄√˘
 = 
li„book_absﬁuã_mode
;

322 
psmou£
->
modñ
 = 
li„book_u£_6byã_¥Ÿo
 ? 6 : 3;

328 
psmou£
->
pktsize
 = 3;

331 
	}
}

	@lifebook.h

11 #i‚de‡
_LIFEBOOK_H


12 
	#_LIFEBOOK_H


	)

14 #ifde‡
CONFIG_MOUSE_PS2_LIFEBOOK


15 
li„book_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

16 
li„book_öô
(
psmou£
 *psmouse);

18 
ölöe
 
	$li„book_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

20  -
ENOSYS
;

21 
	}
}

22 
ölöe
 
	$li„book_öô
(
psmou£
 *psmouse)

24  -
ENOSYS
;

25 
	}
}

	@logips2pp.c

12 
	~<löux/öput.h
>

13 
	~<löux/£rio.h
>

14 
	~<löux/libps2.h
>

15 
	~"psmou£.h
"

16 
	~"logùs2µ.h
"

19 
	#PS2PP_KIND_WHEEL
 1

	)

20 
	#PS2PP_KIND_MX
 2

	)

21 
	#PS2PP_KIND_TP3
 3

	)

22 
	#PS2PP_KIND_TRACKMAN
 4

	)

25 
	#PS2PP_WHEEL
 0x01

	)

26 
	#PS2PP_HWHEEL
 0x02

	)

27 
	#PS2PP_SIDE_BTN
 0x04

	)

28 
	#PS2PP_EXTRA_BTN
 0x08

	)

29 
	#PS2PP_TASK_BTN
 0x10

	)

30 
	#PS2PP_NAV_BTN
 0x20

	)

32 
	sps2µ_öfo
 {

33 
u8
 
	mmodñ
;

34 
u8
 
	mköd
;

35 
u16
 
	m„©uªs
;

42 
psmou£_ªt_t
 
	$ps2µ_¥o˚ss_byã
(
psmou£
 *psmouse)

44 
öput_dev
 *
dev
 = 
psmou£
->dev;

45 *
∑ckë
 = 
psmou£
->packet;

47 i‡(
psmou£
->
pkt˙t
 < 3)

48  
PSMOUSE_GOOD_DATA
;

54 i‡((
∑ckë
[0] & 0x48) == 0x48 && (packet[1] & 0x02) == 0x02) {

57 (
∑ckë
[1] >> 4) | (packet[0] & 0x30)) {

61 
	`öput_ªp‹t_ªl
(
dev
, 
∑ckë
[2] & 0x80 ? 
REL_HWHEEL
 : 
REL_WHEEL
,

62 (Ë(
∑ckë
[2] & 8) - () (packet[2] & 7));

63 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[2] >> 4) & 1);

64 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[2] >> 5) & 1);

70 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[2]) & 1);

71 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[2] >> 1) & 1);

72 
	`öput_ªp‹t_key
(
dev
, 
BTN_BACK
, (
∑ckë
[2] >> 3) & 1);

73 
	`öput_ªp‹t_key
(
dev
, 
BTN_FORWARD
, (
∑ckë
[2] >> 4) & 1);

74 
	`öput_ªp‹t_key
(
dev
, 
BTN_TASK
, (
∑ckë
[2] >> 2) & 1);

80 
	`öput_ªp‹t_ªl
(
dev
, 
∑ckë
[2] & 0x08 ? 
REL_HWHEEL
 : 
REL_WHEEL
,

81 (Ë((
∑ckë
[2] >> 4) & 8) - () ((packet[2] >> 4) & 7));

82 
∑ckë
[0] =Öacket[2] | 0x08;

85 #ifde‡
DEBUG


87 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: Received PS2++Öacket #%x, but don't know howÅo handle.\n",

88 (
∑ckë
[1] >> 4) | (packet[0] & 0x30));

93 
	`öput_ªp‹t_ªl
(
dev
, 
REL_X
, 
∑ckë
[1] ? ()Öacket[1] - () ((packet[0] << 4) & 0x100) : 0);

94 
	`öput_ªp‹t_ªl
(
dev
, 
REL_Y
, 
∑ckë
[2] ? () ((packet[0] << 3) & 0x100) - ()Öacket[2] : 0);

97 
	`öput_ªp‹t_key
(
dev
, 
BTN_LEFT
, 
∑ckë
[0] & 1);

98 
	`öput_ªp‹t_key
(
dev
, 
BTN_MIDDLE
, (
∑ckë
[0] >> 2) & 1);

99 
	`öput_ªp‹t_key
(
dev
, 
BTN_RIGHT
, (
∑ckë
[0] >> 1) & 1);

101 
	`öput_sync
(
dev
);

103  
PSMOUSE_FULL_PACKET
;

105 
	}
}

114 
	$ps2µ_cmd
(
psmou£
 *psmou£, *
∑øm
, 
comm™d
)

116 i‡(
	`psmou£_¶i˚d_comm™d
(
psmou£
, 
comm™d
))

119 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_POLL
 | 0x0300))

123 
	}
}

133 
	$ps2µ_£t_sm¨ts¸ﬁl
(
psmou£
 *psmou£, 
sm¨ts¸ﬁl
)

135 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

136 
∑øm
[4];

138 i‡(
sm¨ts¸ﬁl
 > 1)

139 
sm¨ts¸ﬁl
 = 1;

141 
	`ps2µ_cmd
(
psmou£
, 
∑øm
, 0x32);

143 
∑øm
[0] = 0;

144 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

145 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

146 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

148 
∑øm
[0] = 
sm¨ts¸ﬁl
;

149 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

150 
	}
}

152 
ssize_t
 
	$ps2µ_©å_show_sm¨ts¸ﬁl
(
psmou£
 *psmou£, *
d©a
, *
buf
)

154  
	`•rötf
(
buf
, "%d\n", 
psmou£
->
sm¨ts¸ﬁl
 ? 1 : 0);

155 
	}
}

157 
ssize_t
 
	$ps2µ_©å_£t_sm¨ts¸ﬁl
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

159 
vÆue
;

161 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
) || value > 1)

162  -
EINVAL
;

164 
	`ps2µ_£t_sm¨ts¸ﬁl
(
psmou£
, 
vÆue
);

165 
psmou£
->
sm¨ts¸ﬁl
 = 
vÆue
;

166  
cou¡
;

167 
	}
}

169 
PSMOUSE_DEFINE_ATTR
(
sm¨ts¸ﬁl
, 
S_IWUSR
 | 
S_IRUGO
, 
NULL
,

170 
ps2µ_©å_show_sm¨ts¸ﬁl
, 
ps2µ_©å_£t_sm¨ts¸ﬁl
);

178 
	$ps2µ_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, 
ªsﬁuti⁄
)

180 i‡(
ªsﬁuti⁄
 > 400) {

181 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

182 
∑øm
 = 3;

184 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

185 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

186 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

187 
	`ps2_comm™d
(
ps2dev
, &
∑øm
, 
PSMOUSE_CMD_SETRES
);

188 
psmou£
->
ªsﬁuti⁄
 = 800;

190 
	`psmou£_£t_ªsﬁuti⁄
(
psmou£
, 
ªsﬁuti⁄
);

191 
	}
}

193 
	$ps2µ_disc⁄√˘
(
psmou£
 *psmouse)

195 
	`devi˚_ªmove_fûe
(&
psmou£
->
ps2dev
.
£rio
->
dev
, &
psmou£_©å_sm¨ts¸ﬁl
.
d©å
);

196 
	}
}

198 c⁄° 
ps2µ_öfo
 *
	$gë_modñ_öfo
(
modñ
)

200 c⁄° 
ps2µ_öfo
 
ps2µ_li°
[] = {

202 { 12, 0, 
PS2PP_SIDE_BTN
},

204 { 15, 
PS2PP_KIND_MX
,

205 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 | 
PS2PP_TASK_BTN
 |

206 
PS2PP_EXTRA_BTN
 | 
PS2PP_NAV_BTN
 | 
PS2PP_HWHEEL
 },

207 { 40, 0, 
PS2PP_SIDE_BTN
 },

208 { 41, 0, 
PS2PP_SIDE_BTN
 },

209 { 42, 0, 
PS2PP_SIDE_BTN
 },

210 { 43, 0, 
PS2PP_SIDE_BTN
 },

213 { 52, 
PS2PP_KIND_WHEEL
, 
PS2PP_SIDE_BTN
 | 
PS2PP_WHEEL
 },

214 { 53, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

215 { 56, 
PS2PP_KIND_WHEEL
, 
PS2PP_SIDE_BTN
 | 
PS2PP_WHEEL
 },

216 { 61, 
PS2PP_KIND_MX
,

217 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 | 
PS2PP_TASK_BTN
 |

218 
PS2PP_EXTRA_BTN
 | 
PS2PP_NAV_BTN
 },

219 { 66, 
PS2PP_KIND_MX
,

220 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 | 
PS2PP_TASK_BTN
 |

221 
PS2PP_EXTRA_BTN
 | 
PS2PP_NAV_BTN
 | 
PS2PP_HWHEEL
 },

222 { 72, 
PS2PP_KIND_TRACKMAN
, 0 },

223 { 73, 0, 
PS2PP_SIDE_BTN
 },

224 { 75, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

225 { 76, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

226 { 79, 
PS2PP_KIND_TRACKMAN
, 
PS2PP_WHEEL
 },

227 { 80, 
PS2PP_KIND_WHEEL
, 
PS2PP_SIDE_BTN
 | 
PS2PP_WHEEL
 },

228 { 81, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

229 { 83, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

230 { 85, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

231 { 86, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

232 { 87, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

233 { 88, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

235 { 97, 
PS2PP_KIND_TP3
, 
PS2PP_WHEEL
 | 
PS2PP_HWHEEL
 },

236 { 99, 
PS2PP_KIND_WHEEL
, 
PS2PP_WHEEL
 },

237 { 100, 
PS2PP_KIND_MX
,

238 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 | 
PS2PP_TASK_BTN
 |

239 
PS2PP_EXTRA_BTN
 | 
PS2PP_NAV_BTN
 },

240 { 111, 
PS2PP_KIND_MX
, 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 },

241 { 112, 
PS2PP_KIND_MX
,

242 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 | 
PS2PP_TASK_BTN
 |

243 
PS2PP_EXTRA_BTN
 | 
PS2PP_NAV_BTN
 },

244 { 114, 
PS2PP_KIND_MX
,

245 
PS2PP_WHEEL
 | 
PS2PP_SIDE_BTN
 |

246 
PS2PP_TASK_BTN
 | 
PS2PP_EXTRA_BTN
 }

248 
i
;

250 
i
 = 0; i < 
	`ARRAY_SIZE
(
ps2µ_li°
); i++)

251 i‡(
modñ
 =
ps2µ_li°
[
i
].model)

252  &
ps2µ_li°
[
i
];

254 
	`¥ötk
(
KERN_WARNING
 "logùs2µ: Dëe˘ed unknow¿logôech mou£ modñ %d\n", 
modñ
);

255  
NULL
;

256 
	}
}

262 
	$ps2µ_£t_modñ_¥›îtõs
(
psmou£
 *psmouse,

263 c⁄° 
ps2µ_öfo
 *
modñ_öfo
,

264 
usög_ps2µ
)

266 
öput_dev
 *öput_dev = 
psmou£
->
dev
;

268 i‡(
modñ_öfo
->
„©uªs
 & 
PS2PP_SIDE_BTN
)

269 
	`£t_bô
(
BTN_SIDE
, 
öput_dev
->
keybô
);

271 i‡(
modñ_öfo
->
„©uªs
 & 
PS2PP_EXTRA_BTN
)

272 
	`£t_bô
(
BTN_EXTRA
, 
öput_dev
->
keybô
);

274 i‡(
modñ_öfo
->
„©uªs
 & 
PS2PP_TASK_BTN
)

275 
	`£t_bô
(
BTN_TASK
, 
öput_dev
->
keybô
);

277 i‡(
modñ_öfo
->
„©uªs
 & 
PS2PP_NAV_BTN
) {

278 
	`£t_bô
(
BTN_FORWARD
, 
öput_dev
->
keybô
);

279 
	`£t_bô
(
BTN_BACK
, 
öput_dev
->
keybô
);

282 i‡(
modñ_öfo
->
„©uªs
 & 
PS2PP_WHEEL
)

283 
	`£t_bô
(
REL_WHEEL
, 
öput_dev
->
ªlbô
);

285 i‡(
modñ_öfo
->
„©uªs
 & 
PS2PP_HWHEEL
)

286 
	`£t_bô
(
REL_HWHEEL
, 
öput_dev
->
ªlbô
);

288 
modñ_öfo
->
köd
) {

289 
PS2PP_KIND_WHEEL
:

290 
psmou£
->
«me
 = "Wheel Mouse";

293 
PS2PP_KIND_MX
:

294 
psmou£
->
«me
 = "MX Mouse";

297 
PS2PP_KIND_TP3
:

298 
psmou£
->
«me
 = "TouchPad 3";

301 
PS2PP_KIND_TRACKMAN
:

302 
psmou£
->
«me
 = "TrackMan";

311 i‡(
usög_ps2µ
)

312 
psmou£
->
«me
 = "Mouse";

315 
	}
}

324 
	$ps2µ_öô
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

326 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

327 
∑øm
[4];

328 
modñ
, 
buâ⁄s
;

329 c⁄° 
ps2µ_öfo
 *
modñ_öfo
;

330 
u£_ps2µ
 = 0;

331 
îr‹
;

333 
∑øm
[0] = 0;

334 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

335 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

336 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

337 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

338 
∑øm
[1] = 0;

339 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
);

341 
modñ
 = ((
∑øm
[0] >> 4) & 0x07) | ((param[0] << 3) & 0x78);

342 
buâ⁄s
 = 
∑øm
[1];

344 i‡(!
modñ
 || !
buâ⁄s
)

347 i‡((
modñ_öfo
 = 
	`gë_modñ_öfo
(
modñ
)Ë!
NULL
) {

352 i‡(
modñ_öfo
->
köd
 =
PS2PP_KIND_TP3
) {

355 
∑øm
[0] = 0x11;Öaram[1] = 0x04;Öaram[2] = 0x68;

356 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 0x30d1);

358 
∑øm
[0] = 0x11;Öaram[1] = 0x05;Öaram[2] = 0x0b;

359 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 0x30d1);

361 
∑øm
[0] = 0x11;Öaram[1] = 0x09;Öaram[2] = 0xc3;

362 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 0x30d1);

364 
∑øm
[0] = 0;

365 i‡(!
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 0x13d1) &&

366 
∑øm
[0] == 0x06 &&Öaram[1] == 0x00 &&Öaram[2] == 0x14) {

367 
u£_ps2µ
 = 1;

372 
∑øm
[0] =Öaram[1] =Öaram[2] = 0;

373 
	`ps2µ_cmd
(
psmou£
, 
∑øm
, 0x39);

374 
	`ps2µ_cmd
(
psmou£
, 
∑øm
, 0xDB);

376 i‡((
∑øm
[0] & 0x78) == 0x48 &&

377 (
∑øm
[1] & 0xf3) == 0xc2 &&

378 (
∑øm
[2] & 0x03) == ((param[1] >> 2) & 3)) {

379 
	`ps2µ_£t_sm¨ts¸ﬁl
(
psmou£
,Ösmou£->
sm¨ts¸ﬁl
);

380 
u£_ps2µ
 = 1;

385 i‡(
£t_¥›îtõs
) {

386 
psmou£
->
víd‹
 = "Logitech";

387 
psmou£
->
modñ
 = model;

389 i‡(
u£_ps2µ
) {

390 
psmou£
->
¥Ÿocﬁ_h™dÀr
 = 
ps2µ_¥o˚ss_byã
;

391 
psmou£
->
pktsize
 = 3;

393 i‡(
modñ_öfo
->
köd
 !
PS2PP_KIND_TP3
) {

394 
psmou£
->
£t_ªsﬁuti⁄
 = 
ps2µ_£t_ªsﬁuti⁄
;

395 
psmou£
->
disc⁄√˘
 = 
ps2µ_disc⁄√˘
;

397 
îr‹
 = 
	`devi˚_¸óã_fûe
(&
psmou£
->
ps2dev
.
£rio
->
dev
,

398 &
psmou£_©å_sm¨ts¸ﬁl
.
d©å
);

399 i‡(
îr‹
) {

400 
	`¥ötk
(
KERN_ERR


402 "sysf†©åibuã,Éº‹: %d\n", 
îr‹
);

408 i‡(
buâ⁄s
 < 3)

409 
	`˛ór_bô
(
BTN_MIDDLE
, 
psmou£
->
dev
->
keybô
);

411 i‡(
modñ_öfo
)

412 
	`ps2µ_£t_modñ_¥›îtõs
(
psmou£
, 
modñ_öfo
, 
u£_ps2µ
);

415  
u£_ps2µ
 ? 0 : -1;

416 
	}
}

	@logips2pp.h

11 #i‚de‡
_LOGIPS2PP_H


12 
	#_LOGIPS2PP_H


	)

14 #ifde‡
CONFIG_MOUSE_PS2_LOGIPS2PP


15 
ps2µ_öô
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

17 
ölöe
 
	$ps2µ_öô
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

19  -
ENOSYS
;

20 
	}
}

	@modif_annots.h

1 
	#MODIFANNOT
(
X
Ë
MICRODRIVERS__MODIF_
 ## 
	)
X

2 
	#MODIFIES
(
v¨
Ë
	`MICRODRIVERS__DUMMY
((*Ëv¨)

	)

3 
	#MODIFIES_ADDROF
(
v¨
Ë
	`MICRODRIVERS__DUMMY
((*Ë&v¨)

	)

9 
	sw‹kqueue_°ru˘
 {

10 
˝u_w‹kqueue_°ru˘
 *
	m˝u_wq
;

11 c⁄° *
	m«me
;

12 
li°_hód
 
	mli°
;

16 
	$MICRODRIVERS__DUMMY
(*
x
) {

18 
	}
}

21 c⁄° *
	$MODIFANNOT
(
dev_drivî_°rög
Ë(
devi˚
 *
dev
) {

23 
	}
}

25 
	$MODIFANNOT
(
pci_bus_wrôe_c⁄fig_w‹d
Ë(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u16
 
vÆ
) {

27 
	}
}

30 
	$MODIFANNOT
(
_•ö_lock
Ë(
•ölock_t
 *
lock
) {

32 
	}
}

35 
	$MODIFANNOT
(
__•ö_lock_öô
)

36 (
•ölock_t
 *
lock
, c⁄° *
«me
, 
lock_˛ass_key
 *
key
) {

38 
	}
}

41 
	$MODIFANNOT
(
_•ö_lock_úq
Ë(
•ölock_t
 *
lock
) {

43 
	}
}

46 
	$MODIFANNOT
(
_•ö_lock_úqßve
Ë(
•ölock_t
 *
lock
) {

48 
	}
}

51 
	$MODIFANNOT
(
_•ö_u∆ock
)

52 (
•ölock_t
 *
lock
) {

54 
	}
}

56 
	$MODIFANNOT
(
_•ö_u∆ock_úq
Ë(
•ölock_t
 *
lock
) {

58 
	}
}

61 
	$MODIFANNOT
(
_•ö_u∆ock_úqª°‹e
)

62 (
•ölock_t
 *
lock
, 
Êags
) {

64 
	}
}

67 
	$MODIFANNOT
(
pci_bus_ªad_c⁄fig_byã
)

68 (
pci_bus
 *
bus
,

69 
dev‚
,

70 
whîe
,

71 
u8
 *
vÆ
)

73 
	`MODIFIES
(
vÆ
);

75 
	}
}

78 
	$MODIFANNOT
(
pci_bus_ªad_c⁄fig_w‹d
)

79 (
pci_bus
 *
bus
,

80 
dev‚
,

81 
whîe
,

82 
u16
 *
vÆ
)

84 
	`MODIFIES
(
vÆ
);

86 
	}
}

89 
	$MODIFANNOT
(
pci_˛ór_mwi
Ë(
pci_dev
 *
dev
) {

91 
	}
}

94 
	$MODIFANNOT
(
ªque°_úq
)

95 (
a
,

96 
	$úqªtu∫_t
 (*
h™dÀr
)(, *, 
±_ªgs
 *),

97 
b
, c⁄° * 
c
, * 
d
) {

99 
	}
}

101 
	$MODIFANNOT
(
‰ì_úq
)

102 (
úq
 , 
√t_devi˚
 *
dev
 )

105 
	}
}

109 
	$MODIFANNOT
(
ps2_comm™d
)

110 (
ps2dev
 *ps2dev, *
∑øm
, 
comm™d
)

112 
	`MODIFIES
(
ps2dev
->
Êags
);

113 
	`MODIFIES
(
ps2dev
->
cmd˙t
);

114 
	`MODIFIES
(
ps2dev
->
cmdbuf
);

115 
	`MODIFIES
(
∑øm
);

117 
	}
}

120 
	$MODIFANNOT
(
öô_timî
)(
timî_li°
 *
timî
)

124 
	}
}

127 
w‹kqueue_°ru˘
 *
	$MODIFANNOT
(
__¸óã_w‹kqueue
)(c⁄° *
«me
, 
sögÀthªad
)

129  
NULL
;

130 
	}
}

133 
	$MODIFANNOT
(
Êush_w‹kqueue
)(
w‹kqueue_°ru˘
 *
wq
)

136 
	}
}

139 
	$MODIFANNOT
(
de°roy_w‹kqueue
)(
w‹kqueue_°ru˘
 *
wq
)

142 
	}
}

144 
	$MODIFANNOT
(
ps2_cmd_ab‹ãd
)(
ps2dev
 *ps2dev) {

145 
	`MODIFIES
(
ps2dev
->
Êags
);

146 
	}
}

148 
	$MODIFANNOT
(
ps2_døö
)(
ps2dev
 *ps2dev, 
maxbyãs
, 
timeout
) {

149 
	`MODIFIES
(
ps2dev
->
cmdbuf
);

150 
	`MODIFIES
(
ps2dev
->
Êags
);

151 
	`MODIFIES
(
ps2dev
->
cmd˙t
);

152 
	}
}

154 
	$MODIFANNOT
(
ps2_h™dÀ_ack
)(
ps2dev
 *ps2dev, 
d©a
) {

155 
	`MODIFIES
(
ps2dev
->
«k
);

156 
	`MODIFIES
(
ps2dev
->
Êags
);

158 
	}
}

160 
	$MODIFANNOT
(
ps2_h™dÀ_ª•⁄£
)(
ps2dev
 *ps2dev, 
d©a
) {

161 
	`MODIFIES
(
ps2dev
->
cmdbuf
);

162 
	`MODIFIES
(
ps2dev
->
Êags
);

163 
	`MODIFIES
(
ps2dev
->
cmd˙t
);

165 
	}
}

167 
	$MODIFANNOT
(
ps2_öô
)(
ps2dev
 *ps2dev, 
£rio
 *serio) {

168 
	`MODIFIES
(
ps2dev
->
£rio
);

169 
	}
}

171 
	$MODIFANNOT
(
ps2_£ndbyã
)(
ps2dev
 *ps2dev, 
byã
, 
timeout
) {

172 
	`MODIFIES
(
ps2dev
->
«k
);

173 
	`MODIFIES
(
ps2dev
->
Êags
);

175 
	}
}

	@psmouse-base.c

14 
	~<löux/dñay.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/öput.h
>

19 
	~<löux/£rio.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/libps2.h
>

22 
	~<löux/muãx.h
>

24 
	~"psmou£.h
"

25 
	~"sy«±ics.h
"

26 
	~"logùs2µ.h
"

27 
	~"Æps.h
"

28 
	~"hgpk.h
"

29 
	~"li„book.h
"

30 
	~"åackpoöt.h
"

31 
	~"touchkô_ps2.h
"

32 
	~"ñ™ãch.h
"

34 
	#DRIVER_DESC
 "PS/2 mou£ drivî"

	)

36 
MODULE_AUTHOR
("Vojtech Pavlik <vojtech@suse.cz>");

37 
MODULE_DESCRIPTION
(
DRIVER_DESC
);

38 
MODULE_LICENSE
("GPL");

40 
	gpsmou£_max_¥Ÿo
 = 
PSMOUSE_AUTO
;

41 
psmou£_£t_max¥Ÿo
(c⁄° *
vÆ
, 
kî√l_∑øm
 *
kp
);

42 
psmou£_gë_max¥Ÿo
(*
buf„r
, 
kî√l_∑øm
 *
kp
);

43 
	#∑øm_check_¥Ÿo_abbªv
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

44 
	#∑øm_£t_¥Ÿo_abbªv
 
psmou£_£t_max¥Ÿo


	)

45 
	#∑øm_gë_¥Ÿo_abbªv
 
psmou£_gë_max¥Ÿo


	)

46 
moduÀ_∑øm_«med
(
¥Ÿo
, 
psmou£_max_¥Ÿo
, 
¥Ÿo_abbªv
, 0644);

47 
MODULE_PARM_DESC
(
¥Ÿo
, "HighestÖrotocolÉxtensionÅoÖrobe (bare, imps,Éxps,ány). Useful for KVM switches.");

49 
	gpsmou£_ªsﬁuti⁄
 = 200;

50 
moduÀ_∑øm_«med
(
ªsﬁuti⁄
, 
psmou£_ªsﬁuti⁄
, 
uöt
, 0644);

51 
MODULE_PARM_DESC
(
ªsﬁuti⁄
, "Resolution, in dpi.");

53 
	gpsmou£_øã
 = 100;

54 
moduÀ_∑øm_«med
(
øã
, 
psmou£_øã
, 
uöt
, 0644);

55 
MODULE_PARM_DESC
(
øã
, "ReportÑate, inÑeportsÖer second.");

57 
	gpsmou£_sm¨ts¸ﬁl
 = 1;

58 
moduÀ_∑øm_«med
(
sm¨ts¸ﬁl
, 
psmou£_sm¨ts¸ﬁl
, 
boﬁ
, 0644);

59 
MODULE_PARM_DESC
(
sm¨ts¸ﬁl
, "Logitech Smartscrolláutorepeat, 1 =Énabled (default), 0 = disabled.");

61 
	gpsmou£_ª£è·î
 = 5;

62 
moduÀ_∑øm_«med
(
ª£è·î
, 
psmou£_ª£è·î
, 
uöt
, 0644);

63 
MODULE_PARM_DESC
(
ª£è·î
, "Reset deviceáfter so many badÖackets (0 =Çever).");

65 
	gpsmou£_ªsync_time
;

66 
moduÀ_∑øm_«med
(
ªsync_time
, 
psmou£_ªsync_time
, 
uöt
, 0644);

67 
MODULE_PARM_DESC
(
ªsync_time
, "HowÜong can mouse stay idle before forcingÑesync (in seconds, 0 =Çever).");

69 
PSMOUSE_DEFINE_ATTR
(
¥Ÿocﬁ
, 
S_IWUSR
 | 
S_IRUGO
,

70 
NULL
,

71 
psmou£_©å_show_¥Ÿocﬁ
, 
psmou£_©å_£t_¥Ÿocﬁ
);

72 
PSMOUSE_DEFINE_ATTR
(
øã
, 
S_IWUSR
 | 
S_IRUGO
,

73 (*Ë
off£tof
(
psmou£
, 
øã
),

74 
psmou£_show_öt_©å
, 
psmou£_©å_£t_øã
);

75 
PSMOUSE_DEFINE_ATTR
(
ªsﬁuti⁄
, 
S_IWUSR
 | 
S_IRUGO
,

76 (*Ë
off£tof
(
psmou£
, 
ªsﬁuti⁄
),

77 
psmou£_show_öt_©å
, 
psmou£_©å_£t_ªsﬁuti⁄
);

78 
PSMOUSE_DEFINE_ATTR
(
ª£è·î
, 
S_IWUSR
 | 
S_IRUGO
,

79 (*Ë
off£tof
(
psmou£
, 
ª£è·î
),

80 
psmou£_show_öt_©å
, 
psmou£_£t_öt_©å
);

81 
PSMOUSE_DEFINE_ATTR
(
ªsync_time
, 
S_IWUSR
 | 
S_IRUGO
,

82 (*Ë
off£tof
(
psmou£
, 
ªsync_time
),

83 
psmou£_show_öt_©å
, 
psmou£_£t_öt_©å
);

85 
©åibuã
 *
	gpsmou£_©åibuãs
[] = {

86 &
psmou£_©å_¥Ÿocﬁ
.
d©å
.
©å
,

87 &
psmou£_©å_øã
.
d©å
.
©å
,

88 &
psmou£_©å_ªsﬁuti⁄
.
d©å
.
©å
,

89 &
psmou£_©å_ª£è·î
.
d©å
.
©å
,

90 &
psmou£_©å_ªsync_time
.
d©å
.
©å
,

91 
NULL


94 
©åibuã_group
 
	gpsmou£_©åibuã_group
 = {

95 .
©ås
 = 
psmou£_©åibuãs
,

105 
DEFINE_MUTEX
(
psmou£_muãx
);

107 
w‹kqueue_°ru˘
 *
	gkpsmou£d_wq
;

109 
	spsmou£_¥Ÿocﬁ
 {

110 
psmou£_ty≥
 
	mty≥
;

111 c⁄° *
	m«me
;

112 c⁄° *
	mÆüs
;

113 
	mmax¥Ÿo
;

114 (*
	mdëe˘
)(
	mpsmou£
 *, );

115 (*
	möô
)(
	mpsmou£
 *);

123 
psmou£_ªt_t
 
	$psmou£_¥o˚ss_byã
(
psmou£
 *psmouse)

125 
öput_dev
 *
dev
 = 
psmou£
->dev;

126 *
∑ckë
 = 
psmou£
->packet;

128 i‡(
psmou£
->
pkt˙t
 <Ösmou£->
pktsize
)

129  
PSMOUSE_GOOD_DATA
;

139 i‡(
psmou£
->
ty≥
 =
PSMOUSE_IMPS
 ||Ösmou£->ty≥ =
PSMOUSE_GENPS
)

140 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, -(sig√d Ë
∑ckë
[3]);

146 i‡(
psmou£
->
ty≥
 =
PSMOUSE_IMEX
) {

147 
∑ckë
[3] & 0xC0) {

149 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, (Ë(
∑ckë
[3] & 32) - () (packet[3] & 31));

152 
	`öput_ªp‹t_ªl
(
dev
, 
REL_HWHEEL
, (Ë(
∑ckë
[3] & 32) - () (packet[3] & 31));

156 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, (Ë(
∑ckë
[3] & 8) - () (packet[3] & 7));

157 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[3] >> 4) & 1);

158 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[3] >> 5) & 1);

167 i‡(
psmou£
->
ty≥
 =
PSMOUSE_GENPS
) {

168 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[0] >> 6) & 1);

169 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[0] >> 7) & 1);

175 i‡(
psmou£
->
ty≥
 =
PSMOUSE_THINKPS
) {

176 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[0] >> 3) & 1);

178 
∑ckë
[1] |= (packet[0] & 0x40) << 1;

185 i‡(
psmou£
->
ty≥
 =
PSMOUSE_CORTRON
) {

186 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[0] >> 3) & 1);

187 
∑ckë
[0] |= 0x08;

194 
	`öput_ªp‹t_key
(
dev
, 
BTN_LEFT
, 
∑ckë
[0] & 1);

195 
	`öput_ªp‹t_key
(
dev
, 
BTN_MIDDLE
, (
∑ckë
[0] >> 2) & 1);

196 
	`öput_ªp‹t_key
(
dev
, 
BTN_RIGHT
, (
∑ckë
[0] >> 1) & 1);

198 
	`öput_ªp‹t_ªl
(
dev
, 
REL_X
, 
∑ckë
[1] ? ()Öacket[1] - () ((packet[0] << 4) & 0x100) : 0);

199 
	`öput_ªp‹t_ªl
(
dev
, 
REL_Y
, 
∑ckë
[2] ? () ((packet[0] << 3) & 0x100) - ()Öacket[2] : 0);

201 
	`öput_sync
(
dev
);

203  
PSMOUSE_FULL_PACKET
;

204 
	}
}

206 
	$psmou£_queue_w‹k
(
psmou£
 *psmou£, 
dñayed_w‹k
 *
w‹k
,

207 
dñay
)

209 
	`queue_dñayed_w‹k
(
kpsmou£d_wq
, 
w‹k
, 
dñay
);

210 
	}
}

216 
ölöe
 
	$__psmou£_£t_°©e
(
psmou£
 *psmou£, 
psmou£_°©e
 
√w_°©e
)

218 
psmou£
->
°©e
 = 
√w_°©e
;

219 
psmou£
->
pkt˙t
 =Ösmou£->
out_of_sync
 = 0;

220 
psmou£
->
ps2dev
.
Êags
 = 0;

221 
psmou£
->
œ°
 = 
jiffõs
;

222 
	}
}

231 
	$psmou£_£t_°©e
(
psmou£
 *psmou£, 
psmou£_°©e
 
√w_°©e
)

233 
	`£rio_∑u£_rx
(
psmou£
->
ps2dev
.
£rio
);

234 
	`__psmou£_£t_°©e
(
psmou£
, 
√w_°©e
);

235 
	`£rio_c⁄töue_rx
(
psmou£
->
ps2dev
.
£rio
);

236 
	}
}

243 
	$psmou£_h™dÀ_byã
(
psmou£
 *psmouse)

245 
psmou£_ªt_t
 
rc
 = 
psmou£
->
	`¥Ÿocﬁ_h™dÀr
(psmouse);

247 
rc
) {

248 
PSMOUSE_BAD_DATA
:

249 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
) {

250 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: %sát %sÜost syncát byte %d\n",

251 
psmou£
->
«me
,Ösmou£->
phys
,Ösmou£->
pkt˙t
);

252 i‡(++
psmou£
->
out_of_sync
 =psmou£->
ª£è·î
) {

253 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

254 
	`¥ötk
(
KERN_NOTICE
 "psmouse.c: issuingÑeconnectÑequest\n");

255 
	`£rio_ªc⁄√˘
(
psmou£
->
ps2dev
.
£rio
);

259 
psmou£
->
pkt˙t
 = 0;

262 
PSMOUSE_FULL_PACKET
:

263 
psmou£
->
pkt˙t
 = 0;

264 i‡(
psmou£
->
out_of_sync
) {

265 
psmou£
->
out_of_sync
 = 0;

266 
	`¥ötk
(
KERN_NOTICE
 "psmouse.c: %sát %s - driverÑesynched.\n",

267 
psmou£
->
«me
,Ösmou£->
phys
);

271 
PSMOUSE_GOOD_DATA
:

275 
	}
}

282 
úqªtu∫_t
 
	$psmou£_öãºu±
(
£rio
 *serio,

283 
d©a
, 
Êags
)

285 
psmou£
 *psmou£ = 
	`£rio_gë_drvd©a
(
£rio
);

287 i‡(
psmou£
->
°©e
 =
PSMOUSE_IGNORE
)

288 
out
;

290 i‡(
Êags
 & (
SERIO_PARITY
|
SERIO_TIMEOUT
)) {

291 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
)

292 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: bad data from KBC -%s%s\n",

293 
Êags
 & 
SERIO_TIMEOUT
 ? "Åimeout" : "",

294 
Êags
 & 
SERIO_PARITY
 ? " badÖarity" : "");

295 
	`ps2_cmd_ab‹ãd
(&
psmou£
->
ps2dev
);

296 
out
;

299 i‡(
	`u∆ikñy
(
psmou£
->
ps2dev
.
Êags
 & 
PS2_FLAG_ACK
))

300 i‡(
	`ps2_h™dÀ_ack
(&
psmou£
->
ps2dev
, 
d©a
))

301 
out
;

303 i‡(
	`u∆ikñy
(
psmou£
->
ps2dev
.
Êags
 & 
PS2_FLAG_CMD
))

304 i‡(
	`ps2_h™dÀ_ª•⁄£
(&
psmou£
->
ps2dev
, 
d©a
))

305 
out
;

307 i‡(
psmou£
->
°©e
 <
PSMOUSE_RESYNCING
)

308 
out
;

310 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
 &&

311 
psmou£
->
pkt˙t
 && 
	`time_a·î
(
jiffõs
,Ösmou£->
œ°
 + 
HZ
/2)) {

312 
	`¥ötk
(
KERN_INFO
 "psmouse.c: %sát %sÜost synchronization,Åhrowing %d bytesáway.\n",

313 
psmou£
->
«me
,Ösmou£->
phys
,Ösmou£->
pkt˙t
);

314 
psmou£
->
badbyã
 =Ösmou£->
∑ckë
[0];

315 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_RESYNCING
);

316 
	`psmou£_queue_w‹k
(
psmou£
, &psmou£->
ªsync_w‹k
, 0);

317 
out
;

320 
psmou£
->
∑ckë
[psmou£->
pkt˙t
++] = 
d©a
;

324 i‡(
	`u∆ikñy
(
psmou£
->
∑ckë
[0] =
PSMOUSE_RET_BAT
 &&Ösmou£->
pkt˙t
 <= 2)) {

325 i‡(
psmou£
->
pkt˙t
 == 1) {

326 
psmou£
->
œ°
 = 
jiffõs
;

327 
out
;

330 i‡(
psmou£
->
∑ckë
[1] =
PSMOUSE_RET_ID
) {

331 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

332 
	`£rio_ªc⁄√˘
(
£rio
);

333 
out
;

338 
psmou£
->
pkt˙t
 = 1;

339 i‡(
	`psmou£_h™dÀ_byã
(
psmou£
))

340 
out
;

342 
psmou£
->
∑ckë
[psmou£->
pkt˙t
++] = 
d©a
;

348 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
 &&

349 
psmou£
->
pkt˙t
 =1 &&Ösmou£->
ªsync_time
 &&

350 
	`time_a·î
(
jiffõs
, 
psmou£
->
œ°
 +Ösmou£->
ªsync_time
 * 
HZ
)) {

351 
psmou£
->
badbyã
 =Ösmou£->
∑ckë
[0];

352 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_RESYNCING
);

353 
	`psmou£_queue_w‹k
(
psmou£
, &psmou£->
ªsync_w‹k
, 0);

354 
out
;

357 
psmou£
->
œ°
 = 
jiffõs
;

358 
	`psmou£_h™dÀ_byã
(
psmou£
);

360 
out
:

361  
IRQ_HANDLED
;

362 
	}
}

372 
	$psmou£_¶i˚d_comm™d
(
psmou£
 *psmou£, 
comm™d
)

374 
i
;

376 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
))

379 
i
 = 6; i >= 0; i -= 2) {

380 
d
 = (
comm™d
 >> 
i
) & 3;

381 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
d
, 
PSMOUSE_CMD_SETRES
))

386 
	}
}

392 
	$psmou£_ª£t
(
psmou£
 *psmouse)

394 
∑øm
[2];

396 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_RESET_BAT
))

399 i‡(
∑øm
[0] !
PSMOUSE_RET_BAT
 &&Ö¨am[1] !
PSMOUSE_RET_ID
)

403 
	}
}

409 
	$gíius_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

411 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

412 
∑øm
[4];

414 
∑øm
[0] = 3;

415 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

416 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

417 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

418 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

419 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
);

421 i‡(
∑øm
[0] != 0x00 ||Öaram[1] != 0x33 ||Öaram[2] != 0x55)

424 i‡(
£t_¥›îtõs
) {

425 
	`£t_bô
(
BTN_EXTRA
, 
psmou£
->
dev
->
keybô
);

426 
	`£t_bô
(
BTN_SIDE
, 
psmou£
->
dev
->
keybô
);

427 
	`£t_bô
(
REL_WHEEL
, 
psmou£
->
dev
->
ªlbô
);

429 
psmou£
->
víd‹
 = "Genius";

430 
psmou£
->
«me
 = "Mouse";

431 
psmou£
->
pktsize
 = 4;

435 
	}
}

440 
	$öãŒimou£_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

442 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

443 
∑øm
[2];

445 
∑øm
[0] = 200;

446 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

447 
∑øm
[0] = 100;

448 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

449 
∑øm
[0] = 80;

450 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

451 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
);

453 i‡(
∑øm
[0] != 3)

456 i‡(
£t_¥›îtõs
) {

457 
	`£t_bô
(
BTN_MIDDLE
, 
psmou£
->
dev
->
keybô
);

458 
	`£t_bô
(
REL_WHEEL
, 
psmou£
->
dev
->
ªlbô
);

460 i‡(!
psmou£
->
víd‹
)Ösmouse->vendor = "Generic";

461 i‡(!
psmou£
->
«me
)Ösmouse->name = "Wheel Mouse";

462 
psmou£
->
pktsize
 = 4;

466 
	}
}

471 
	$im_ex∂‹î_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

473 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

474 
∑øm
[2];

476 
	`öãŒimou£_dëe˘
(
psmou£
, 0);

478 
∑øm
[0] = 200;

479 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

480 
∑øm
[0] = 200;

481 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

482 
∑øm
[0] = 80;

483 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

484 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
);

486 i‡(
∑øm
[0] != 4)

490 
∑øm
[0] = 200;

491 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

492 
∑øm
[0] = 80;

493 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

494 
∑øm
[0] = 40;

495 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

497 i‡(
£t_¥›îtõs
) {

498 
	`£t_bô
(
BTN_MIDDLE
, 
psmou£
->
dev
->
keybô
);

499 
	`£t_bô
(
REL_WHEEL
, 
psmou£
->
dev
->
ªlbô
);

500 
	`£t_bô
(
REL_HWHEEL
, 
psmou£
->
dev
->
ªlbô
);

501 
	`£t_bô
(
BTN_SIDE
, 
psmou£
->
dev
->
keybô
);

502 
	`£t_bô
(
BTN_EXTRA
, 
psmou£
->
dev
->
keybô
);

504 i‡(!
psmou£
->
víd‹
)Ösmouse->vendor = "Generic";

505 i‡(!
psmou£
->
«me
)Ösmouse->name = "Explorer Mouse";

506 
psmou£
->
pktsize
 = 4;

510 
	}
}

515 
	$thökög_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

517 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

518 
∑øm
[2];

519 c⁄° 
£q
[] = { 20, 60, 40, 20, 20, 60, 40, 20, 20 };

520 
i
;

522 
∑øm
[0] = 10;

523 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

524 
∑øm
[0] = 0;

525 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

526 
i
 = 0; i < 
	`ARRAY_SIZE
(
£q
); i++) {

527 
∑øm
[0] = 
£q
[
i
];

528 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

530 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
);

532 i‡(
∑øm
[0] != 2)

535 i‡(
£t_¥›îtõs
) {

536 
	`£t_bô
(
BTN_EXTRA
, 
psmou£
->
dev
->
keybô
);

538 
psmou£
->
víd‹
 = "Kensington";

539 
psmou£
->
«me
 = "ThinkingMouse";

543 
	}
}

548 
	$ps2b¨e_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

550 i‡(
£t_¥›îtõs
) {

551 i‡(!
psmou£
->
víd‹
)Ösmouse->vendor = "Generic";

552 i‡(!
psmou£
->
«me
)Ösmouse->name = "Mouse";

556 
	}
}

562 
	$c‹å⁄_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

564 i‡(
£t_¥›îtõs
) {

565 
psmou£
->
víd‹
 = "Cortron";

566 
psmou£
->
«me
 = "PS/2 Trackball";

567 
	`£t_bô
(
BTN_SIDE
, 
psmou£
->
dev
->
keybô
);

571 
	}
}

578 
	$psmou£_exãnsi⁄s
(
psmou£
 *psmouse,

579 
max_¥Ÿo
, 
£t_¥›îtõs
)

581 
sy«±ics_h¨dw¨e
 = 0;

587 i‡(
	`li„book_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

588 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

589 i‡(!
£t_¥›îtõs
 || 
	`li„book_öô
(
psmou£
) == 0)

590  
PSMOUSE_LIFEBOOK
;

599 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
 && 
	`thökög_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

600  
PSMOUSE_THINKPS
;

607 i‡(
max_¥Ÿo
 > 
PSMOUSE_PS2
 && 
	`sy«±ics_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

608 
sy«±ics_h¨dw¨e
 = 1;

610 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

611 i‡(!
£t_¥›îtõs
 || 
	`sy«±ics_öô
(
psmou£
) == 0)

612  
PSMOUSE_SYNAPTICS
;

618 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

623 
	`sy«±ics_ª£t
(
psmou£
);

629 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

630 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_RESET_DIS
);

631 i‡(
	`Æps_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

632 i‡(!
£t_¥›îtõs
 || 
	`Æps_öô
(
psmou£
) == 0)

633  
PSMOUSE_ALPS
;

637 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

644 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
 &&

645 
	`hgpk_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

646 i‡(!
£t_¥›îtõs
 || 
	`hgpk_öô
(
psmou£
) == 0)

647  
PSMOUSE_HGPK
;

651 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

657 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
 &&

658 
	`ñ™ãch_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

659 i‡(!
£t_¥›îtõs
 || 
	`ñ™ãch_öô
(
psmou£
) == 0)

660  
PSMOUSE_ELANTECH
;

664 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

667 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

668 i‡(
	`gíius_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

669  
PSMOUSE_GENPS
;

671 i‡(
	`ps2µ_öô
(
psmou£
, 
£t_¥›îtõs
) == 0)

672  
PSMOUSE_PS2PP
;

674 i‡(
	`åackpoöt_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

675  
PSMOUSE_TRACKPOINT
;

677 i‡(
	`touchkô_ps2_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

678  
PSMOUSE_TOUCHKIT_PS2
;

686 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_RESET_DIS
);

687 
	`psmou£_ª£t
(
psmou£
);

689 i‡(
max_¥Ÿo
 >
PSMOUSE_IMEX
 && 
	`im_ex∂‹î_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

690  
PSMOUSE_IMEX
;

692 i‡(
max_¥Ÿo
 >
PSMOUSE_IMPS
 && 
	`öãŒimou£_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

693  
PSMOUSE_IMPS
;

699 
	`ps2b¨e_dëe˘
(
psmou£
, 
£t_¥›îtõs
);

701 i‡(
sy«±ics_h¨dw¨e
) {

708 
	`psmou£_ª£t
(
psmou£
);

711  
PSMOUSE_PS2
;

712 
	}
}

714 c⁄° 
psmou£_¥Ÿocﬁ
 
	gpsmou£_¥Ÿocﬁs
[] = {

716 .
ty≥
 = 
PSMOUSE_PS2
,

717 .
	g«me
 = "PS/2",

718 .
	gÆüs
 = "bare",

719 .
	gmax¥Ÿo
 = 1,

720 .
	gdëe˘
 = 
ps2b¨e_dëe˘
,

722 #ifde‡
CONFIG_MOUSE_PS2_LOGIPS2PP


724 .
	gty≥
 = 
PSMOUSE_PS2PP
,

725 .
	g«me
 = "PS2++",

726 .
	gÆüs
 = "logitech",

727 .
	gdëe˘
 = 
ps2µ_öô
,

731 .
	gty≥
 = 
PSMOUSE_THINKPS
,

732 .
	g«me
 = "ThinkPS/2",

733 .
	gÆüs
 = "thinkps",

734 .
	gdëe˘
 = 
thökög_dëe˘
,

737 .
	gty≥
 = 
PSMOUSE_GENPS
,

738 .
	g«me
 = "GenPS/2",

739 .
	gÆüs
 = "genius",

740 .
	gdëe˘
 = 
gíius_dëe˘
,

743 .
	gty≥
 = 
PSMOUSE_IMPS
,

744 .
	g«me
 = "ImPS/2",

745 .
	gÆüs
 = "imps",

746 .
	gmax¥Ÿo
 = 1,

747 .
	gdëe˘
 = 
öãŒimou£_dëe˘
,

750 .
	gty≥
 = 
PSMOUSE_IMEX
,

751 .
	g«me
 = "ImExPS/2",

752 .
	gÆüs
 = "exps",

753 .
	gmax¥Ÿo
 = 1,

754 .
	gdëe˘
 = 
im_ex∂‹î_dëe˘
,

756 #ifde‡
CONFIG_MOUSE_PS2_SYNAPTICS


758 .
	gty≥
 = 
PSMOUSE_SYNAPTICS
,

759 .
	g«me
 = "SynPS/2",

760 .
	gÆüs
 = "synaptics",

761 .
	gdëe˘
 = 
sy«±ics_dëe˘
,

762 .
	göô
 = 
sy«±ics_öô
,

765 #ifde‡
CONFIG_MOUSE_PS2_ALPS


767 .
	gty≥
 = 
PSMOUSE_ALPS
,

768 .
	g«me
 = "AlpsPS/2",

769 .
	gÆüs
 = "alps",

770 .
	gdëe˘
 = 
Æps_dëe˘
,

771 .
	göô
 = 
Æps_öô
,

774 #ifde‡
CONFIG_MOUSE_PS2_LIFEBOOK


776 .
	gty≥
 = 
PSMOUSE_LIFEBOOK
,

777 .
	g«me
 = "LBPS/2",

778 .
	gÆüs
 = "lifebook",

779 .
	göô
 = 
li„book_öô
,

782 #ifde‡
CONFIG_MOUSE_PS2_TRACKPOINT


784 .
	gty≥
 = 
PSMOUSE_TRACKPOINT
,

785 .
	g«me
 = "TPPS/2",

786 .
	gÆüs
 = "trackpoint",

787 .
	gdëe˘
 = 
åackpoöt_dëe˘
,

790 #ifde‡
CONFIG_MOUSE_PS2_TOUCHKIT


792 .
	gty≥
 = 
PSMOUSE_TOUCHKIT_PS2
,

793 .
	g«me
 = "touchkitPS/2",

794 .
	gÆüs
 = "touchkit",

795 .
	gdëe˘
 = 
touchkô_ps2_dëe˘
,

798 #ifde‡
CONFIG_MOUSE_PS2_OLPC


800 .
	gty≥
 = 
PSMOUSE_HGPK
,

801 .
	g«me
 = "OLPC HGPK",

802 .
	gÆüs
 = "hgpk",

803 .
	gdëe˘
 = 
hgpk_dëe˘
,

806 #ifde‡
CONFIG_MOUSE_PS2_ELANTECH


808 .
	gty≥
 = 
PSMOUSE_ELANTECH
,

809 .
	g«me
 = "ETPS/2",

810 .
	gÆüs
 = "elantech",

811 .
	gdëe˘
 = 
ñ™ãch_dëe˘
,

812 .
	göô
 = 
ñ™ãch_öô
,

816 .
	gty≥
 = 
PSMOUSE_CORTRON
,

817 .
	g«me
 = "CortronPS/2",

818 .
	gÆüs
 = "cortps",

819 .
	gdëe˘
 = 
c‹å⁄_dëe˘
,

822 .
	gty≥
 = 
PSMOUSE_AUTO
,

823 .
	g«me
 = "auto",

824 .
	gÆüs
 = "any",

825 .
	gmax¥Ÿo
 = 1,

829 c⁄° 
psmou£_¥Ÿocﬁ
 *
	$psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£_ty≥
 
ty≥
)

831 
i
;

833 
i
 = 0; i < 
	`ARRAY_SIZE
(
psmou£_¥Ÿocﬁs
); i++)

834 i‡(
psmou£_¥Ÿocﬁs
[
i
].
ty≥
 ==Åype)

835  &
psmou£_¥Ÿocﬁs
[
i
];

837 
	`WARN_ON
(1);

838  &
psmou£_¥Ÿocﬁs
[0];

839 
	}
}

841 c⁄° 
psmou£_¥Ÿocﬁ
 *
	$psmou£_¥Ÿocﬁ_by_«me
(c⁄° *
«me
, 
size_t
 
Àn
)

843 c⁄° 
psmou£_¥Ÿocﬁ
 *
p
;

844 
i
;

846 
i
 = 0; i < 
	`ARRAY_SIZE
(
psmou£_¥Ÿocﬁs
); i++) {

847 
p
 = &
psmou£_¥Ÿocﬁs
[
i
];

849 i‡((
	`°æí
(
p
->
«me
Ë=
Àn
 && !
	`°∫cmp
(p->name,Çame,Üen)) ||

850 (
	`°æí
(
p
->
Æüs
Ë=
Àn
 && !
	`°∫cmp
’->Æüs, 
«me
,Üen)))

851  &
psmou£_¥Ÿocﬁs
[
i
];

854  
NULL
;

855 
	}
}

862 
	$psmou£_¥obe
(
psmou£
 *psmouse)

864 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

865 
∑øm
[2];

874 
∑øm
[0] = 0xa5;

875 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
))

878 i‡(
∑øm
[0] != 0x00 &&Öaram[0] != 0x03 &&

879 
∑øm
[0] != 0x04 &&Öaram[0] != 0xff)

886 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_RESET_DIS
))

887 
	`¥ötk
(
KERN_WARNING
 "psmou£.c: FaûedÅÿª£àmou£ o¿%s\n", 
ps2dev
->
£rio
->
phys
);

890 
	}
}

896 
	$psmou£_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, 
ªsﬁuti⁄
)

898 c⁄° 
∑øms
[] = { 0, 1, 2, 2, 3 };

899 
p
;

901 i‡(
ªsﬁuti⁄
 == 0 ||Ñesolution > 200)

902 
ªsﬁuti⁄
 = 200;

904 
p
 = 
∑øms
[
ªsﬁuti⁄
 / 50];

905 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
p
, 
PSMOUSE_CMD_SETRES
);

906 
psmou£
->
ªsﬁuti⁄
 = 25 << 
p
;

907 
	}
}

913 
	$psmou£_£t_øã
(
psmou£
 *psmou£, 
øã
)

915 c⁄° 
øãs
[] = { 200, 100, 80, 60, 40, 20, 10, 0 };

916 
r
;

917 
i
 = 0;

919 
øãs
[
i
] > 
øã
) i++;

920 
r
 = 
øãs
[
i
];

921 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
r
, 
PSMOUSE_CMD_SETRATE
);

922 
psmou£
->
øã
 = 
r
;

923 
	}
}

929 
	$psmou£_öôülize
(
psmou£
 *psmouse)

935 i‡(
psmou£_max_¥Ÿo
 !
PSMOUSE_PS2
) {

936 
psmou£
->
	`£t_øã
’smou£,Ösmou£->
øã
);

937 
psmou£
->
	`£t_ªsﬁuti⁄
’smou£,Ösmou£->
ªsﬁuti⁄
);

938 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

940 
	}
}

946 
	$psmou£_a˘iv©e
(
psmou£
 *psmouse)

948 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
))

949 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: FailedÅoÉnable mouse on %s\n",

950 
psmou£
->
ps2dev
.
£rio
->
phys
);

952 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_ACTIVATED
);

953 
	}
}

961 
	$psmou£_dó˘iv©e
(
psmou£
 *psmouse)

963 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
))

964 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: FailedÅo deactivate mouse on %s\n",

965 
psmou£
->
ps2dev
.
£rio
->
phys
);

967 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

968 
	}
}

974 
	$psmou£_pﬁl
(
psmou£
 *psmouse)

976  
	`ps2_comm™d
(&
psmou£
->
ps2dev
,Ösmou£->
∑ckë
,

977 
PSMOUSE_CMD_POLL
 | (
psmou£
->
pktsize
 << 8));

978 
	}
}

985 
	$psmou£_ªsync
(
w‹k_°ru˘
 *
w‹k
)

987 
psmou£
 *
∑ª¡
 = 
NULL
, *psmouse =

988 
	`c⁄èöî_of
(
w‹k
, 
psmou£
, 
ªsync_w‹k
.work);

989 
£rio
 *£riÿ
psmou£
->
ps2dev
.serio;

990 
psmou£_ªt_t
 
rc
 = 
PSMOUSE_GOOD_DATA
;

991 
Áûed
 = 0, 
íabÀd
 = 0;

992 
i
;

994 
	`muãx_lock
(&
psmou£_muãx
);

996 i‡(
psmou£
->
°©e
 !
PSMOUSE_RESYNCING
)

997 
out
;

999 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1000 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1001 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1014 
psmou£
->
num_ªsyncs
++;

1016 i‡(
	`ps2_£ndbyã
(&
psmou£
->
ps2dev
, 
PSMOUSE_CMD_DISABLE
, 20)) {

1017 i‡(
psmou£
->
num_ªsyncs
 < 3 ||Ösmou£->
acks_dißbÀ_comm™d
)

1018 
Áûed
 = 1;

1020 
psmou£
->
acks_dißbÀ_comm™d
 = 1;

1029 i‡(!
Áûed
) {

1030 i‡(
psmou£
->
	`pﬁl
(psmouse))

1031 
Áûed
 = 1;

1033 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1034 
i
 = 0; i < 
psmou£
->
pktsize
; i++) {

1035 
psmou£
->
pkt˙t
++;

1036 
rc
 = 
psmou£
->
	`¥Ÿocﬁ_h™dÀr
(psmouse);

1037 i‡(
rc
 !
PSMOUSE_GOOD_DATA
)

1040 i‡(
rc
 !
PSMOUSE_FULL_PACKET
)

1041 
Áûed
 = 1;

1042 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_RESYNCING
);

1050 
i
 = 0; i < 5; i++) {

1051 i‡(!
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
)) {

1052 
íabÀd
 = 1;

1055 
	`m¶ìp
(200);

1058 i‡(!
íabÀd
) {

1059 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: failedÅoÑe-enable mouse on %s\n",

1060 
psmou£
->
ps2dev
.
£rio
->
phys
);

1061 
Áûed
 = 1;

1064 i‡(
Áûed
) {

1065 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1066 
	`¥ötk
(
KERN_INFO
 "psmouse.c:Ñesync failed, issuingÑeconnectÑequest\n");

1067 
	`£rio_ªc⁄√˘
(
£rio
);

1069 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_ACTIVATED
);

1071 i‡(
∑ª¡
)

1072 
	`psmou£_a˘iv©e
(
∑ª¡
);

1073 
out
:

1074 
	`muãx_u∆ock
(&
psmou£_muãx
);

1075 
	}
}

1081 
	$psmou£_˛ónup
(
£rio
 *serio)

1083 
psmou£
 *psmou£ = 
	`£rio_gë_drvd©a
(
£rio
);

1084 
psmou£
 *
∑ª¡
 = 
NULL
;

1086 
	`muãx_lock
(&
psmou£_muãx
);

1088 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1089 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1090 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1093 
	`psmou£_dó˘iv©e
(
psmou£
);

1095 i‡(
psmou£
->
˛ónup
)

1096 
psmou£
->
	`˛ónup
(psmouse);

1098 
	`psmou£_ª£t
(
psmou£
);

1104 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
);

1106 i‡(
∑ª¡
) {

1107 i‡(
∑ª¡
->
±_dó˘iv©e
)

1108 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1110 
	`psmou£_a˘iv©e
(
∑ª¡
);

1113 
	`muãx_u∆ock
(&
psmou£_muãx
);

1114 
	}
}

1120 
	$psmou£_disc⁄√˘
(
£rio
 *serio)

1122 
psmou£
 *psmou£, *
∑ª¡
 = 
NULL
;

1124 
psmou£
 = 
	`£rio_gë_drvd©a
(
£rio
);

1126 
	`sysfs_ªmove_group
(&
£rio
->
dev
.
kobj
, &
psmou£_©åibuã_group
);

1128 
	`muãx_lock
(&
psmou£_muãx
);

1130 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1133 
	`muãx_u∆ock
(&
psmou£_muãx
);

1134 
	`Êush_w‹kqueue
(
kpsmou£d_wq
);

1135 
	`muãx_lock
(&
psmou£_muãx
);

1137 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1138 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1139 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1142 i‡(
psmou£
->
disc⁄√˘
)

1143 
psmou£
->
	`disc⁄√˘
(psmouse);

1145 i‡(
∑ª¡
 &&Ö¨ít->
±_dó˘iv©e
)

1146 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1148 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1150 
	`£rio_˛o£
(
£rio
);

1151 
	`£rio_£t_drvd©a
(
£rio
, 
NULL
);

1152 
	`öput_uƒegi°î_devi˚
(
psmou£
->
dev
);

1153 
	`k‰ì
(
psmou£
);

1155 i‡(
∑ª¡
)

1156 
	`psmou£_a˘iv©e
(
∑ª¡
);

1158 
	`muãx_u∆ock
(&
psmou£_muãx
);

1159 
	}
}

1161 
	$psmou£_swôch_¥Ÿocﬁ
(
psmou£
 *psmou£, c⁄° 
psmou£_¥Ÿocﬁ
 *
¥Ÿo
)

1163 
öput_dev
 *öput_dev = 
psmou£
->
dev
;

1165 
öput_dev
->
dev
.
∑ª¡
 = &
psmou£
->
ps2dev
.
£rio
->dev;

1167 
öput_dev
->
evbô
[0] = 
	`BIT_MASK
(
EV_KEY
Ë| BIT_MASK(
EV_REL
);

1168 
öput_dev
->
keybô
[
	`BIT_WORD
(
BTN_MOUSE
)] = 
	`BIT_MASK
(
BTN_LEFT
) |

1169 
	`BIT_MASK
(
BTN_MIDDLE
Ë| BIT_MASK(
BTN_RIGHT
);

1170 
öput_dev
->
ªlbô
[0] = 
	`BIT_MASK
(
REL_X
Ë| BIT_MASK(
REL_Y
);

1172 
psmou£
->
£t_øã
 = 
psmou£_£t_øã
;

1173 
psmou£
->
£t_ªsﬁuti⁄
 = 
psmou£_£t_ªsﬁuti⁄
;

1174 
psmou£
->
pﬁl
 = 
psmou£_pﬁl
;

1175 
psmou£
->
¥Ÿocﬁ_h™dÀr
 = 
psmou£_¥o˚ss_byã
;

1176 
psmou£
->
pktsize
 = 3;

1178 i‡(
¥Ÿo
 && (¥Ÿo->
dëe˘
 ||ÖrŸo->
öô
)) {

1179 i‡(
¥Ÿo
->
dëe˘
 &&ÖrŸo->
	`dëe˘
(
psmou£
, 1) < 0)

1182 i‡(
¥Ÿo
->
öô
 &&ÖrŸo->
	`öô
(
psmou£
) < 0)

1185 
psmou£
->
ty≥
 = 
¥Ÿo
->type;

1188 
psmou£
->
ty≥
 = 
	`psmou£_exãnsi⁄s
’smou£, 
psmou£_max_¥Ÿo
, 1);

1195 i‡(
psmou£
->
pktsize
 == 3)

1196 
psmou£
->
ªsync_time
 = 0;

1204 i‡(
psmou£
->
ªsync_time
 &&Ösmou£->
	`pﬁl
(psmouse))

1205 
psmou£
->
ªsync_time
 = 0;

1207 
	`¢¥ötf
(
psmou£
->
dev«me
, (psmouse->devname), "%s %s %s",

1208 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
)->
«me
,Ösmou£->
víd‹
,Ösmouse->name);

1210 
öput_dev
->
«me
 = 
psmou£
->
dev«me
;

1211 
öput_dev
->
phys
 = 
psmou£
->phys;

1212 
öput_dev
->
id
.
bu°y≥
 = 
BUS_I8042
;

1213 
öput_dev
->
id
.
víd‹
 = 0x0002;

1214 
öput_dev
->
id
.
¥odu˘
 = 
psmou£
->
ty≥
;

1215 
öput_dev
->
id
.
vîsi⁄
 = 
psmou£
->
modñ
;

1218 
	}
}

1224 
	$psmou£_c⁄√˘
(
£rio
 *£rio, 
£rio_drivî
 *
drv
)

1226 
psmou£
 *psmou£, *
∑ª¡
 = 
NULL
;

1227 
öput_dev
 *input_dev;

1228 
ªtvÆ
 = 0, 
îr‹
 = -
ENOMEM
;

1230 
	`muãx_lock
(&
psmou£_muãx
);

1236 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1237 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1238 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1241 
psmou£
 = 
	`kzÆloc
((psmou£), 
GFP_KERNEL
);

1242 
öput_dev
 = 
	`öput_Æloˇã_devi˚
();

1243 i‡(!
psmou£
 || !
öput_dev
)

1244 
îr_‰ì
;

1246 
	`ps2_öô
(&
psmou£
->
ps2dev
, 
£rio
);

1247 
	`INIT_DELAYED_WORK
(&
psmou£
->
ªsync_w‹k
, 
psmou£_ªsync
);

1248 
psmou£
->
dev
 = 
öput_dev
;

1249 
	`¢¥ötf
(
psmou£
->
phys
, ’smou£->phys), "%s/öput0", 
£rio
->phys);

1251 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1253 
	`£rio_£t_drvd©a
(
£rio
, 
psmou£
);

1255 
îr‹
 = 
	`£rio_›í
(
£rio
, 
drv
);

1256 i‡(
îr‹
)

1257 
îr_˛ór_drvd©a
;

1259 i‡(
	`psmou£_¥obe
(
psmou£
) < 0) {

1260 
îr‹
 = -
ENODEV
;

1261 
îr_˛o£_£rio
;

1264 
psmou£
->
øã
 = 
psmou£_øã
;

1265 
psmou£
->
ªsﬁuti⁄
 = 
psmou£_ªsﬁuti⁄
;

1266 
psmou£
->
ª£è·î
 = 
psmou£_ª£è·î
;

1267 
psmou£
->
ªsync_time
 = 
∑ª¡
 ? 0 : 
psmou£_ªsync_time
;

1268 
psmou£
->
sm¨ts¸ﬁl
 = 
psmou£_sm¨ts¸ﬁl
;

1270 
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, 
NULL
);

1272 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1273 
	`psmou£_öôülize
(
psmou£
);

1275 
îr‹
 = 
	`öput_ªgi°î_devi˚
(
psmou£
->
dev
);

1276 i‡(
îr‹
)

1277 
îr_¥Ÿocﬁ_disc⁄√˘
;

1279 i‡(
∑ª¡
 &&Ö¨ít->
±_a˘iv©e
)

1280 
∑ª¡
->
	`±_a˘iv©e
(parent);

1282 
îr‹
 = 
	`sysfs_¸óã_group
(&
£rio
->
dev
.
kobj
, &
psmou£_©åibuã_group
);

1283 i‡(
îr‹
)

1284 
îr_±_dó˘iv©e
;

1286 
	`psmou£_a˘iv©e
(
psmou£
);

1288 
out
:

1290 i‡(
∑ª¡
)

1291 
	`psmou£_a˘iv©e
(
∑ª¡
);

1293 
	`muãx_u∆ock
(&
psmou£_muãx
);

1294  
ªtvÆ
;

1296 
îr_±_dó˘iv©e
:

1297 i‡(
∑ª¡
 &&Ö¨ít->
±_dó˘iv©e
)

1298 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1299 
	`öput_uƒegi°î_devi˚
(
psmou£
->
dev
);

1300 
öput_dev
 = 
NULL
;

1301 
îr_¥Ÿocﬁ_disc⁄√˘
:

1302 i‡(
psmou£
->
disc⁄√˘
)

1303 
psmou£
->
	`disc⁄√˘
(psmouse);

1304 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1305 
îr_˛o£_£rio
:

1306 
	`£rio_˛o£
(
£rio
);

1307 
îr_˛ór_drvd©a
:

1308 
	`£rio_£t_drvd©a
(
£rio
, 
NULL
);

1309 
îr_‰ì
:

1310 
	`öput_‰ì_devi˚
(
öput_dev
);

1311 
	`k‰ì
(
psmou£
);

1313 
ªtvÆ
 = 
îr‹
;

1314 
out
;

1315 
	}
}

1318 
	$psmou£_ªc⁄√˘
(
£rio
 *serio)

1320 
psmou£
 *psmou£ = 
	`£rio_gë_drvd©a
(
£rio
);

1321 
psmou£
 *
∑ª¡
 = 
NULL
;

1322 
£rio_drivî
 *
drv
 = 
£rio
->drv;

1323 
rc
 = -1;

1325 i‡(!
drv
 || !
psmou£
) {

1326 
	`¥ötk
(
KERN_DEBUG
 "psmouse:ÑeconnectÑequest, but serio is disconnected, ignoring...\n");

1330 
	`muãx_lock
(&
psmou£_muãx
);

1332 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1333 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1334 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1337 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1339 i‡(
psmou£
->
ªc⁄√˘
) {

1340 i‡(
psmou£
->
	`ªc⁄√˘
(psmouse))

1341 
out
;

1342 } i‡(
	`psmou£_¥obe
(
psmou£
) < 0 ||

1343 
psmou£
->
ty≥
 !
	`psmou£_exãnsi⁄s
’smou£, 
psmou£_max_¥Ÿo
, 0))

1344 
out
;

1349 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1351 
	`psmou£_öôülize
(
psmou£
);

1353 i‡(
∑ª¡
 &&Ö¨ít->
±_a˘iv©e
)

1354 
∑ª¡
->
	`±_a˘iv©e
(parent);

1356 
	`psmou£_a˘iv©e
(
psmou£
);

1357 
rc
 = 0;

1359 
out
:

1361 i‡(
∑ª¡
)

1362 
	`psmou£_a˘iv©e
(
∑ª¡
);

1364 
	`muãx_u∆ock
(&
psmou£_muãx
);

1365  
rc
;

1366 
	}
}

1368 
£rio_devi˚_id
 
	gpsmou£_£rio_ids
[] = {

1370 .
ty≥
 = 
SERIO_8042
,

1371 .
	g¥Ÿo
 = 
SERIO_ANY
,

1372 .
	gid
 = 
SERIO_ANY
,

1373 .
	gexåa
 = 
SERIO_ANY
,

1376 .
	gty≥
 = 
SERIO_PS_PSTHRU
,

1377 .
	g¥Ÿo
 = 
SERIO_ANY
,

1378 .
	gid
 = 
SERIO_ANY
,

1379 .
	gexåa
 = 
SERIO_ANY
,

1384 
MODULE_DEVICE_TABLE
(
£rio
, 
psmou£_£rio_ids
);

1386 
£rio_drivî
 
	gpsmou£_drv
 = {

1387 .
drivî
 = {

1388 .
«me
 = "psmouse",

1390 .
	gdes¸ùti⁄
 = 
DRIVER_DESC
,

1391 .
	gid_èbÀ
 = 
psmou£_£rio_ids
,

1392 .
	göãºu±
 = 
psmou£_öãºu±
,

1393 .
	gc⁄√˘
 = 
psmou£_c⁄√˘
,

1394 .
	gªc⁄√˘
 = 
psmou£_ªc⁄√˘
,

1395 .
	gdisc⁄√˘
 = 
psmou£_disc⁄√˘
,

1396 .
	g˛ónup
 = 
psmou£_˛ónup
,

1399 
ssize_t
 
	$psmou£_©å_show_hñ≥r
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
dev©å
,

1400 *
buf
)

1402 
£rio
 *£riÿ
	`to_£rio_p‹t
(
dev
);

1403 
psmou£_©åibuã
 *
©å
 = 
	`to_psmou£_©å
(
dev©å
);

1404 
psmou£
 *psmouse;

1405 
ªtvÆ
;

1407 
ªtvÆ
 = 
	`£rio_pö_drivî
(
£rio
);

1408 i‡(
ªtvÆ
)

1409  
ªtvÆ
;

1411 i‡(
£rio
->
drv
 !&
psmou£_drv
) {

1412 
ªtvÆ
 = -
ENODEV
;

1413 
out
;

1416 
psmou£
 = 
	`£rio_gë_drvd©a
(
£rio
);

1418 
ªtvÆ
 = 
©å
->
	`show
(
psmou£
,áâr->
d©a
, 
buf
);

1420 
out
:

1421 
	`£rio_u≈ö_drivî
(
£rio
);

1422  
ªtvÆ
;

1423 
	}
}

1425 
ssize_t
 
	$psmou£_©å_£t_hñ≥r
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
dev©å
,

1426 c⁄° *
buf
, 
size_t
 
cou¡
)

1428 
£rio
 *£riÿ
	`to_£rio_p‹t
(
dev
);

1429 
psmou£_©åibuã
 *
©å
 = 
	`to_psmou£_©å
(
dev©å
);

1430 
psmou£
 *psmou£, *
∑ª¡
 = 
NULL
;

1431 
ªtvÆ
;

1433 
ªtvÆ
 = 
	`£rio_pö_drivî
(
£rio
);

1434 i‡(
ªtvÆ
)

1435  
ªtvÆ
;

1437 i‡(
£rio
->
drv
 !&
psmou£_drv
) {

1438 
ªtvÆ
 = -
ENODEV
;

1439 
out_u≈ö
;

1442 
ªtvÆ
 = 
	`muãx_lock_öãºu±ibÀ
(&
psmou£_muãx
);

1443 i‡(
ªtvÆ
)

1444 
out_u≈ö
;

1446 
psmou£
 = 
	`£rio_gë_drvd©a
(
£rio
);

1448 i‡(
©å
->
¥Ÿe˘
) {

1449 i‡(
psmou£
->
°©e
 =
PSMOUSE_IGNORE
) {

1450 
ªtvÆ
 = -
ENODEV
;

1451 
out_u∆ock
;

1454 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1455 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1456 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1459 
	`psmou£_dó˘iv©e
(
psmou£
);

1462 
ªtvÆ
 = 
©å
->
	`£t
(
psmou£
,áâr->
d©a
, 
buf
, 
cou¡
);

1464 i‡(
©å
->
¥Ÿe˘
) {

1465 i‡(
ªtvÆ
 !-
ENODEV
)

1466 
	`psmou£_a˘iv©e
(
psmou£
);

1468 i‡(
∑ª¡
)

1469 
	`psmou£_a˘iv©e
(
∑ª¡
);

1472 
out_u∆ock
:

1473 
	`muãx_u∆ock
(&
psmou£_muãx
);

1474 
out_u≈ö
:

1475 
	`£rio_u≈ö_drivî
(
£rio
);

1476  
ªtvÆ
;

1477 
	}
}

1479 
ssize_t
 
	$psmou£_show_öt_©å
(
psmou£
 *psmou£, *
off£t
, *
buf
)

1481 *
fõld
 = (*)((*)
psmou£
 + (
size_t
)
off£t
);

1483  
	`•rötf
(
buf
, "%u\n", *
fõld
);

1484 
	}
}

1486 
ssize_t
 
	$psmou£_£t_öt_©å
(
psmou£
 *psmou£, *
off£t
, c⁄° *
buf
, 
size_t
 
cou¡
)

1488 *
fõld
 = (*)((*)
psmou£
 + (
size_t
)
off£t
);

1489 
vÆue
;

1491 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
))

1492  -
EINVAL
;

1494 i‡(()
vÆue
 != value)

1495  -
EINVAL
;

1497 *
fõld
 = 
vÆue
;

1499  
cou¡
;

1500 
	}
}

1502 
ssize_t
 
	$psmou£_©å_show_¥Ÿocﬁ
(
psmou£
 *psmou£, *
d©a
, *
buf
)

1504  
	`•rötf
(
buf
, "%s\n", 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
)->
«me
);

1505 
	}
}

1507 
ssize_t
 
	$psmou£_©å_£t_¥Ÿocﬁ
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

1509 
£rio
 *£riÿ
psmou£
->
ps2dev
.serio;

1510 
psmou£
 *
∑ª¡
 = 
NULL
;

1511 
öput_dev
 *
ﬁd_dev
, *
√w_dev
;

1512 c⁄° 
psmou£_¥Ÿocﬁ
 *
¥Ÿo
, *
ﬁd_¥Ÿo
;

1513 
îr‹
;

1514 
ªåy
 = 0;

1516 
¥Ÿo
 = 
	`psmou£_¥Ÿocﬁ_by_«me
(
buf
, 
cou¡
);

1517 i‡(!
¥Ÿo
)

1518  -
EINVAL
;

1520 i‡(
psmou£
->
ty≥
 =
¥Ÿo
->type)

1521  
cou¡
;

1523 
√w_dev
 = 
	`öput_Æloˇã_devi˚
();

1524 i‡(!
√w_dev
)

1525  -
ENOMEM
;

1527 
£rio
->
chûd
) {

1528 i‡(++
ªåy
 > 3) {

1529 
	`¥ötk
(
KERN_WARNING
 "psmouse: failedÅo destroy childÖort,Örotocol changeáborted.\n");

1530 
	`öput_‰ì_devi˚
(
√w_dev
);

1531  -
EIO
;

1534 
	`muãx_u∆ock
(&
psmou£_muãx
);

1535 
	`£rio_u≈ö_drivî
(
£rio
);

1536 
	`£rio_uƒegi°î_chûd_p‹t
(
£rio
);

1537 
	`£rio_pö_drivî_unöãºu±ibÀ
(
£rio
);

1538 
	`muãx_lock
(&
psmou£_muãx
);

1540 i‡(
£rio
->
drv
 !&
psmou£_drv
) {

1541 
	`öput_‰ì_devi˚
(
√w_dev
);

1542  -
ENODEV
;

1545 i‡(
psmou£
->
ty≥
 =
¥Ÿo
->type) {

1546 
	`öput_‰ì_devi˚
(
√w_dev
);

1547  
cou¡
;

1551 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1552 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1553 i‡(
∑ª¡
->
±_dó˘iv©e
)

1554 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1557 
ﬁd_dev
 = 
psmou£
->
dev
;

1558 
ﬁd_¥Ÿo
 = 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
);

1560 i‡(
psmou£
->
disc⁄√˘
)

1561 
psmou£
->
	`disc⁄√˘
(psmouse);

1563 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1565 
psmou£
->
dev
 = 
√w_dev
;

1566 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1568 i‡(
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, 
¥Ÿo
) < 0) {

1569 
	`psmou£_ª£t
(
psmou£
);

1571 
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, &
psmou£_¥Ÿocﬁs
[0]);

1574 
	`psmou£_öôülize
(
psmou£
);

1575 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1577 
îr‹
 = 
	`öput_ªgi°î_devi˚
(
psmou£
->
dev
);

1578 i‡(
îr‹
) {

1579 i‡(
psmou£
->
disc⁄√˘
)

1580 
psmou£
->
	`disc⁄√˘
(psmouse);

1582 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1583 
	`öput_‰ì_devi˚
(
√w_dev
);

1584 
psmou£
->
dev
 = 
ﬁd_dev
;

1585 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1586 
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, 
ﬁd_¥Ÿo
);

1587 
	`psmou£_öôülize
(
psmou£
);

1588 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1590  
îr‹
;

1593 
	`öput_uƒegi°î_devi˚
(
ﬁd_dev
);

1595 i‡(
∑ª¡
 &&Ö¨ít->
±_a˘iv©e
)

1596 
∑ª¡
->
	`±_a˘iv©e
(parent);

1598  
cou¡
;

1599 
	}
}

1601 
ssize_t
 
	$psmou£_©å_£t_øã
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

1603 
vÆue
;

1605 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
))

1606  -
EINVAL
;

1608 
psmou£
->
	`£t_øã
’smou£, 
vÆue
);

1609  
cou¡
;

1610 
	}
}

1612 
ssize_t
 
	$psmou£_©å_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

1614 
vÆue
;

1616 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
))

1617  -
EINVAL
;

1619 
psmou£
->
	`£t_ªsﬁuti⁄
’smou£, 
vÆue
);

1620  
cou¡
;

1621 
	}
}

1624 
	$psmou£_£t_max¥Ÿo
(c⁄° *
vÆ
, 
kî√l_∑øm
 *
kp
)

1626 c⁄° 
psmou£_¥Ÿocﬁ
 *
¥Ÿo
;

1628 i‡(!
vÆ
)

1629  -
EINVAL
;

1631 
¥Ÿo
 = 
	`psmou£_¥Ÿocﬁ_by_«me
(
vÆ
, 
	`°æí
(val));

1633 i‡(!
¥Ÿo
 || !¥Ÿo->
max¥Ÿo
)

1634  -
EINVAL
;

1636 *((*)
kp
->
¨g
Ë
¥Ÿo
->
ty≥
;

1639 
	}
}

1641 
	$psmou£_gë_max¥Ÿo
(*
buf„r
, 
kî√l_∑øm
 *
kp
)

1643 
ty≥
 = *((*)
kp
->
¨g
);

1645  
	`•rötf
(
buf„r
, "%s\n", 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
ty≥
)->
«me
);

1646 
	}
}

1648 
__öô
 
	$psmou£_öô
()

1650 
îr
;

1652 
kpsmou£d_wq
 = 
	`¸óã_sögÀthªad_w‹kqueue
("kpsmoused");

1653 i‡(!
kpsmou£d_wq
) {

1654 
	`¥ötk
(
KERN_ERR
 "psmouse: failedÅo create kpsmoused workqueue\n");

1655  -
ENOMEM
;

1658 
îr
 = 
	`£rio_ªgi°î_drivî
(&
psmou£_drv
);

1659 i‡(
îr
)

1660 
	`de°roy_w‹kqueue
(
kpsmou£d_wq
);

1662  
îr
;

1663 
	}
}

1665 
__exô
 
	$psmou£_exô
()

1667 
	`£rio_uƒegi°î_drivî
(&
psmou£_drv
);

1668 
	`de°roy_w‹kqueue
(
kpsmou£d_wq
);

1669 
	}
}

1671 
moduÀ_öô
(
psmou£_öô
);

1672 
moduÀ_exô
(
psmou£_exô
);

	@psmouse.h

1 #i‚de‡
_PSMOUSE_H


2 
	#_PSMOUSE_H


	)

4 
	#PSMOUSE_CMD_SETSCALE11
 0x00e6

	)

5 
	#PSMOUSE_CMD_SETSCALE21
 0x00e7

	)

6 
	#PSMOUSE_CMD_SETRES
 0x10e8

	)

7 
	#PSMOUSE_CMD_GETINFO
 0x03e9

	)

8 
	#PSMOUSE_CMD_SETSTREAM
 0x00ó

	)

9 
	#PSMOUSE_CMD_SETPOLL
 0x00f0

	)

10 
	#PSMOUSE_CMD_POLL
 0x00eb

	)

11 
	#PSMOUSE_CMD_GETID
 0x02f2

	)

12 
	#PSMOUSE_CMD_SETRATE
 0x10f3

	)

13 
	#PSMOUSE_CMD_ENABLE
 0x00f4

	)

14 
	#PSMOUSE_CMD_DISABLE
 0x00f5

	)

15 
	#PSMOUSE_CMD_RESET_DIS
 0x00f6

	)

16 
	#PSMOUSE_CMD_RESET_BAT
 0x02ff

	)

18 
	#PSMOUSE_RET_BAT
 0xØ

	)

19 
	#PSMOUSE_RET_ID
 0x00

	)

20 
	#PSMOUSE_RET_ACK
 0xÁ

	)

21 
	#PSMOUSE_RET_NAK
 0x„

	)

23 
	epsmou£_°©e
 {

24 
	mPSMOUSE_IGNORE
,

25 
	mPSMOUSE_INITIALIZING
,

26 
	mPSMOUSE_RESYNCING
,

27 
	mPSMOUSE_CMD_MODE
,

28 
	mPSMOUSE_ACTIVATED
,

33 
	mPSMOUSE_BAD_DATA
,

34 
	mPSMOUSE_GOOD_DATA
,

35 
	mPSMOUSE_FULL_PACKET


36 } 
	tpsmou£_ªt_t
;

38 
	spsmou£
 {

39 *
	m¥iv©e
;

41 
öput_dev
 * 
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
	mdev
;

42 
ps2dev
 
	mps2dev
;

43 
dñayed_w‹k
 
	mªsync_w‹k
;

44 *
__©åibuã__
((
nuŒãrm
)Ë
	mvíd‹
;

45 *
__©åibuã__
((
nuŒãrm
)Ë
	m«me
;

46 
	m∑ckë
[8];

47 
	mbadbyã
;

48 
	mpkt˙t
;

49 
	mpktsize
;

50 
	mty≥
;

51 
	macks_dißbÀ_comm™d
;

52 
	mmodñ
;

53 
	mœ°
;

54 
	mout_of_sync
;

55 
	mnum_ªsyncs
;

56 
psmou£_°©e
 
	m°©e
;

57 
	mdev«me
[64];

58 
	mphys
[32];

60 
__©åibuã__
((
°‹eoff£t
)Ë
	møã
;

61 
__©åibuã__
((
°‹eoff£t
)Ë
	mªsﬁuti⁄
;

62 
__©åibuã__
((
°‹eoff£t
)Ë
	mª£è·î
;

63 
__©åibuã__
((
°‹eoff£t
)Ë
	mªsync_time
;

64 
	msm¨ts¸ﬁl
;

66 
psmou£_ªt_t
 (*
¥Ÿocﬁ_h™dÀr
)(
psmou£
 *
	mpsmou£
);

67 (*
	m£t_øã
)(
psmou£
 *
	mpsmou£
, 
	møã
);

68 (*
	m£t_ªsﬁuti⁄
)(
psmou£
 *
	mpsmou£
, 
	mªsﬁuti⁄
);

70 (*
	mªc⁄√˘
)(
psmou£
 *
	mpsmou£
);

71 (*
	mdisc⁄√˘
)(
psmou£
 *
	mpsmou£
);

72 (*
	m˛ónup
)(
psmou£
 *
	mpsmou£
);

73 (*
	mpﬁl
)(
psmou£
 *
	mpsmou£
);

75 (*
	m±_a˘iv©e
)(
psmou£
 *
	mpsmou£
);

76 (*
	m±_dó˘iv©e
)(
psmou£
 *
	mpsmou£
);

79 
	epsmou£_ty≥
 {

80 
	mPSMOUSE_NONE
,

81 
	mPSMOUSE_PS2
,

82 
	mPSMOUSE_PS2PP
,

83 
	mPSMOUSE_THINKPS
,

84 
	mPSMOUSE_GENPS
,

85 
	mPSMOUSE_IMPS
,

86 
	mPSMOUSE_IMEX
,

87 
	mPSMOUSE_SYNAPTICS
,

88 
	mPSMOUSE_ALPS
,

89 
	mPSMOUSE_LIFEBOOK
,

90 
	mPSMOUSE_TRACKPOINT
,

91 
	mPSMOUSE_TOUCHKIT_PS2
,

92 
	mPSMOUSE_CORTRON
,

93 
	mPSMOUSE_HGPK
,

94 
	mPSMOUSE_ELANTECH
,

95 
	mPSMOUSE_AUTO


98 
psmou£_queue_w‹k
(
psmou£
 *psmou£, 
dñayed_w‹k
 *
w‹k
,

99 
dñay
);

100 
psmou£_¶i˚d_comm™d
(
psmou£
 *psmou£, 
comm™d
);

101 
psmou£_ª£t
(
psmou£
 *psmouse);

102 
psmou£_£t_°©e
(
psmou£
 *psmou£, 
psmou£_°©e
 
√w_°©e
);

103 
psmou£_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, 
ªsﬁuti⁄
);

105 
	spsmou£_©åibuã
 {

106 
devi˚_©åibuã
 
	md©å
;

107 *
	md©a
;

108 
ssize_t
 (*
show
)(
psmou£
 *
	mpsmou£
, *
	md©a
, *
	mbuf
);

109 
ssize_t
 (*
£t
)(
psmou£
 *
	mpsmou£
, *
	md©a
,

110 c⁄° *
	mbuf
, 
size_t
 
	mcou¡
);

111 
	m¥Ÿe˘
;

113 
	#to_psmou£_©å
(
a
Ë
	`c⁄èöî_of
(◊), 
psmou£_©åibuã
, 
d©å
)

	)

115 
ssize_t
 
psmou£_©å_show_hñ≥r
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

116 *
buf
);

117 
ssize_t
 
psmou£_©å_£t_hñ≥r
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
,

118 c⁄° *
buf
, 
size_t
 
cou¡
);

120 
	#__PSMOUSE_DEFINE_ATTR
(
_«me
, 
_mode
, 
_d©a
, 
_show
, 
_£t
, 
_¥Ÿe˘
) \

121 
ssize_t
 
	`_show
(
psmou£
 *, *
d©a
, *); \

122 
ssize_t
 
	`_£t
(
psmou£
 *, *
d©a
, c⁄° *, 
size_t
); \

123 
psmou£_©åibuã
 
psmou£_©å_
##
_«me
 = { \

124 .
d©å
 = { \

125 .
©å
 = { \

126 .
«me
 = 
	`__°rögify
(
_«me
), \

127 .
mode
 = 
_mode
, \

129 .
show
 = 
psmou£_©å_show_hñ≥r
, \

130 .
°‹e
 = 
psmou£_©å_£t_hñ≥r
, \

132 .
d©a
 = 
_d©a
, \

133 .
show
 = 
_show
, \

134 .
£t
 = 
_£t
, \

135 .
¥Ÿe˘
 = 
_¥Ÿe˘
, \

136 }

	)

138 
	#PSMOUSE_DEFINE_ATTR
(
_«me
, 
_mode
, 
_d©a
, 
_show
, 
_£t
) \

139 
	`__PSMOUSE_DEFINE_ATTR
(
_«me
, 
_mode
, 
_d©a
, 
_show
, 
_£t
, 1)

	)

	@psmousebase-sfi.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

13 c⁄° 
	g__moduÀ_dïíds
[]

14 
__u£d


15 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@psmousebase-stub.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

13 c⁄° 
	g__moduÀ_dïíds
[]

14 
__u£d


15 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@psmousebase.kernel.c

4 
	~"../../comm⁄/ma°î_t›.h
"

5 
	gfun˘i⁄_id_m≠
[1014][128] =

1020 
	gfun˘i⁄_id_m≠_Àn
 = 1014;

1021 
	$di•_kîn
(*
fun˘i⁄_«me
 , 
ªq_¨gs
 *
rq¨gs
 )

1023 
m¨shªt_°ru˘
 
ªtvÆ
 ;

1026 
ªtvÆ
.
buf
 = 0U;

1029 
	}
}

1030 
	$ªgi°î_fun˘i⁄s
()

1037 
	}
}

1038 
	$ªgi°î_globÆs
()

1045 
	}
}

	@psmousebase.merged.c

	@psmousebase.merged.kernel.c

	@psmousebase.merged.sym.c

	@psmousebase.sym.c

4 
	~"../../comm⁄/¶ave_t›.h
"

5 
	gfun˘i⁄_id_m≠
[1014][128] =

1020 
	gfun˘i⁄_id_m≠_Àn
 = 1014;

1021 
	$di•_u£r
(*
fun˘i⁄_«me
 , 
ªq_¨gs
 *
rq¨gs
 )

1023 
m¨shªt_°ru˘
 
ªtvÆ
 ;

1026 
ªtvÆ
.
buf
 = 0U;

1029 
	}
}

1030 
	$ªgi°î_fun˘i⁄s
()

1037 
	}
}

1038 
	$ªgi°î_globÆs
()

1045 
	}
}

	@psmousebase_annotated.c

14 
	~<löux/dñay.h
>

15 
	~<löux/moduÀ.h
>

16 
	~<löux/¶ab.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/öput.h
>

19 
	~<löux/£rio.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/libps2.h
>

22 
	~<löux/muãx.h
>

23 
	~"modif_™nŸs.h
"

25 
	~"psmou£.h
"

26 
	~"sy«±ics.h
"

27 
	~"logùs2µ.h
"

28 
	~"Æps.h
"

29 
	~"hgpk.h
"

30 
	~"li„book.h
"

31 
	~"åackpoöt.h
"

32 
	~"touchkô_ps2.h
"

33 
	~"ñ™ãch.h
"

35 
	#DRIVER_DESC
 "PS/2 mou£ drivî"

	)

37 
MODULE_AUTHOR
("Vojtech Pavlik <vojtech@suse.cz>");

38 
MODULE_DESCRIPTION
(
DRIVER_DESC
);

39 
MODULE_LICENSE
("GPL");

41 
	gpsmou£_max_¥Ÿo
 = 
PSMOUSE_AUTO
;

42 
psmou£_£t_max¥Ÿo
(c⁄° *
vÆ
, 
kî√l_∑øm
 *
kp
);

43 
psmou£_gë_max¥Ÿo
(*
buf„r
, 
kî√l_∑øm
 *
kp
);

44 
	#∑øm_check_¥Ÿo_abbªv
(
«me
, 
p
Ë
	`__∑øm_check
“ame,Ö, )

	)

45 
	#∑øm_£t_¥Ÿo_abbªv
 
psmou£_£t_max¥Ÿo


	)

46 
	#∑øm_gë_¥Ÿo_abbªv
 
psmou£_gë_max¥Ÿo


	)

47 
moduÀ_∑øm_«med
(
¥Ÿo
, 
psmou£_max_¥Ÿo
, 
¥Ÿo_abbªv
, 0644);

48 
MODULE_PARM_DESC
(
¥Ÿo
, "HighestÖrotocolÉxtensionÅoÖrobe (bare, imps,Éxps,ány). Useful for KVM switches.");

51 
psmou£
 * 
	god·_psmou£_£rio
;

53 
	gpsmou£_ªsﬁuti⁄
 = 200;

54 
moduÀ_∑øm_«med
(
ªsﬁuti⁄
, 
psmou£_ªsﬁuti⁄
, 
uöt
, 0644);

55 
MODULE_PARM_DESC
(
ªsﬁuti⁄
, "Resolution, in dpi.");

57 
	gpsmou£_øã
 = 100;

58 
moduÀ_∑øm_«med
(
øã
, 
psmou£_øã
, 
uöt
, 0644);

59 
MODULE_PARM_DESC
(
øã
, "ReportÑate, inÑeportsÖer second.");

61 
	gpsmou£_sm¨ts¸ﬁl
 = 1;

62 
moduÀ_∑øm_«med
(
sm¨ts¸ﬁl
, 
psmou£_sm¨ts¸ﬁl
, 
boﬁ
, 0644);

63 
MODULE_PARM_DESC
(
sm¨ts¸ﬁl
, "Logitech Smartscrolláutorepeat, 1 =Énabled (default), 0 = disabled.");

65 
	gpsmou£_ª£è·î
 = 5;

66 
moduÀ_∑øm_«med
(
ª£è·î
, 
psmou£_ª£è·î
, 
uöt
, 0644);

67 
MODULE_PARM_DESC
(
ª£è·î
, "Reset deviceáfter so many badÖackets (0 =Çever).");

69 
	gpsmou£_ªsync_time
;

70 
moduÀ_∑øm_«med
(
ªsync_time
, 
psmou£_ªsync_time
, 
uöt
, 0644);

71 
MODULE_PARM_DESC
(
ªsync_time
, "HowÜong can mouse stay idle before forcingÑesync (in seconds, 0 =Çever).");

73 
PSMOUSE_DEFINE_ATTR
(
¥Ÿocﬁ
, 
S_IWUSR
 | 
S_IRUGO
,

74 
NULL
,

75 
psmou£_©å_show_¥Ÿocﬁ
, 
psmou£_©å_£t_¥Ÿocﬁ
);

76 
PSMOUSE_DEFINE_ATTR
(
øã
, 
S_IWUSR
 | 
S_IRUGO
,

77 (*Ë
off£tof
(
psmou£
, 
øã
),

78 
psmou£_show_öt_©å
, 
psmou£_©å_£t_øã
);

79 
PSMOUSE_DEFINE_ATTR
(
ªsﬁuti⁄
, 
S_IWUSR
 | 
S_IRUGO
,

80 (*Ë
off£tof
(
psmou£
, 
ªsﬁuti⁄
),

81 
psmou£_show_öt_©å
, 
psmou£_©å_£t_ªsﬁuti⁄
);

82 
PSMOUSE_DEFINE_ATTR
(
ª£è·î
, 
S_IWUSR
 | 
S_IRUGO
,

83 (*Ë
off£tof
(
psmou£
, 
ª£è·î
),

84 
psmou£_show_öt_©å
, 
psmou£_£t_öt_©å
);

85 
PSMOUSE_DEFINE_ATTR
(
ªsync_time
, 
S_IWUSR
 | 
S_IRUGO
,

86 (*Ë
off£tof
(
psmou£
, 
ªsync_time
),

87 
psmou£_show_öt_©å
, 
psmou£_£t_öt_©å
);

89 
©åibuã
 *
	gpsmou£_©åibuãs
[] = {

90 &
psmou£_©å_¥Ÿocﬁ
.
d©å
.
©å
,

91 &
psmou£_©å_øã
.
d©å
.
©å
,

92 &
psmou£_©å_ªsﬁuti⁄
.
d©å
.
©å
,

93 &
psmou£_©å_ª£è·î
.
d©å
.
©å
,

94 &
psmou£_©å_ªsync_time
.
d©å
.
©å
,

95 
NULL


98 
©åibuã_group
 
	gpsmou£_©åibuã_group
 = {

99 .
©ås
 = 
psmou£_©åibuãs
,

106 
	sw‹kqueue_°ru˘
 {

107 
˝u_w‹kqueue_°ru˘
 *
	m˝u_wq
;

108 
li°_hód
 
	mli°
;

109 c⁄° * 
__©åibuã__
((
nuŒãrm
)Ë
	m«me
;

110 
	msögÀthªad
;

111 
	m‰ìzóbÀ
;

112 
	mπ
;

113 #ifde‡
CONFIG_LOCKDEP


114 
lockdï_m≠
 
	mlockdï_m≠
;

127 
DEFINE_MUTEX
(
psmou£_muãx
);

129 
w‹kqueue_°ru˘
 *
	gkpsmou£d_wq
;

131 
	spsmou£_¥Ÿocﬁ
 {

132 
psmou£_ty≥
 
	mty≥
;

133 c⁄° *
	m«me
;

134 c⁄° *
	mÆüs
;

135 
	mmax¥Ÿo
;

136 (*
	mdëe˘
)(
	mpsmou£
 *, );

137 (*
	möô
)(
	mpsmou£
 *);

145 
psmou£_ªt_t
 
	$psmou£_¥o˚ss_byã
(
psmou£
 *psmouse)

147 
öput_dev
 *
dev
 = 
psmou£
->dev;

148 *
∑ckë
 = 
psmou£
->packet;

150 i‡(
psmou£
->
pkt˙t
 <Ösmou£->
pktsize
)

151  
PSMOUSE_GOOD_DATA
;

161 i‡(
psmou£
->
ty≥
 =
PSMOUSE_IMPS
 ||Ösmou£->ty≥ =
PSMOUSE_GENPS
)

162 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, -(sig√d Ë
∑ckë
[3]);

168 i‡(
psmou£
->
ty≥
 =
PSMOUSE_IMEX
) {

169 
∑ckë
[3] & 0xC0) {

171 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, (Ë(
∑ckë
[3] & 32) - () (packet[3] & 31));

174 
	`öput_ªp‹t_ªl
(
dev
, 
REL_HWHEEL
, (Ë(
∑ckë
[3] & 32) - () (packet[3] & 31));

178 
	`öput_ªp‹t_ªl
(
dev
, 
REL_WHEEL
, (Ë(
∑ckë
[3] & 8) - () (packet[3] & 7));

179 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[3] >> 4) & 1);

180 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[3] >> 5) & 1);

189 i‡(
psmou£
->
ty≥
 =
PSMOUSE_GENPS
) {

190 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[0] >> 6) & 1);

191 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[0] >> 7) & 1);

197 i‡(
psmou£
->
ty≥
 =
PSMOUSE_THINKPS
) {

198 
	`öput_ªp‹t_key
(
dev
, 
BTN_EXTRA
, (
∑ckë
[0] >> 3) & 1);

200 
∑ckë
[1] |= (packet[0] & 0x40) << 1;

207 i‡(
psmou£
->
ty≥
 =
PSMOUSE_CORTRON
) {

208 
	`öput_ªp‹t_key
(
dev
, 
BTN_SIDE
, (
∑ckë
[0] >> 3) & 1);

209 
∑ckë
[0] |= 0x08;

216 
	`öput_ªp‹t_key
(
dev
, 
BTN_LEFT
, 
∑ckë
[0] & 1);

217 
	`öput_ªp‹t_key
(
dev
, 
BTN_MIDDLE
, (
∑ckë
[0] >> 2) & 1);

218 
	`öput_ªp‹t_key
(
dev
, 
BTN_RIGHT
, (
∑ckë
[0] >> 1) & 1);

220 
	`öput_ªp‹t_ªl
(
dev
, 
REL_X
, 
∑ckë
[1] ? ()Öacket[1] - () ((packet[0] << 4) & 0x100) : 0);

221 
	`öput_ªp‹t_ªl
(
dev
, 
REL_Y
, 
∑ckë
[2] ? () ((packet[0] << 3) & 0x100) - ()Öacket[2] : 0);

223 
	`öput_sync
(
dev
);

225  
PSMOUSE_FULL_PACKET
;

226 
	}
}

228 
	$psmou£_queue_w‹k
(
psmou£
 *psmou£, 
dñayed_w‹k
 *
w‹k
,

229 
dñay
)

231 
	`queue_dñayed_w‹k
(
kpsmou£d_wq
, 
w‹k
, 
dñay
);

232 
	}
}

238 
ölöe
 
	$__psmou£_£t_°©e
(
psmou£
 *psmou£, 
psmou£_°©e
 
√w_°©e
)

240 
psmou£
->
°©e
 = 
√w_°©e
;

241 
psmou£
->
pkt˙t
 =Ösmou£->
out_of_sync
 = 0;

242 
psmou£
->
ps2dev
.
Êags
 = 0;

243 
psmou£
->
œ°
 = 
jiffõs
;

244 
	}
}

253 
	$psmou£_£t_°©e
(
psmou£
 *psmou£, 
psmou£_°©e
 
√w_°©e
)

255 
	`£rio_∑u£_rx
(
psmou£
->
ps2dev
.
£rio
);

256 
	`__psmou£_£t_°©e
(
psmou£
, 
√w_°©e
);

257 
	`£rio_c⁄töue_rx
(
psmou£
->
ps2dev
.
£rio
);

258 
	}
}

265 
	$psmou£_h™dÀ_byã
(
psmou£
 *psmouse)

267 
psmou£_ªt_t
 
rc
 = 
psmou£
->
	`¥Ÿocﬁ_h™dÀr
(psmouse);

269 
rc
) {

270 
PSMOUSE_BAD_DATA
:

271 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
) {

272 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: %sát %sÜost syncát byte %d\n",

273 
psmou£
->
«me
,Ösmou£->
phys
,Ösmou£->
pkt˙t
);

274 i‡(++
psmou£
->
out_of_sync
 =psmou£->
ª£è·î
) {

275 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

276 
	`¥ötk
(
KERN_NOTICE
 "psmouse.c: issuingÑeconnectÑequest\n");

277 
	`£rio_ªc⁄√˘
(
psmou£
->
ps2dev
.
£rio
);

281 
psmou£
->
pkt˙t
 = 0;

284 
PSMOUSE_FULL_PACKET
:

285 
psmou£
->
pkt˙t
 = 0;

286 i‡(
psmou£
->
out_of_sync
) {

287 
psmou£
->
out_of_sync
 = 0;

288 
	`¥ötk
(
KERN_NOTICE
 "psmouse.c: %sát %s - driverÑesynched.\n",

289 
psmou£
->
«me
,Ösmou£->
phys
);

293 
PSMOUSE_GOOD_DATA
:

297 
	}
}

304 
úqªtu∫_t
 
	$psmou£_öãºu±
(
£rio
 *serio,

305 
d©a
, 
Êags
)

307 
psmou£
 *psmou£ = 
	`£rio_gë_drvd©a
(
£rio
);

309 i‡(
psmou£
->
°©e
 =
PSMOUSE_IGNORE
)

310 
out
;

312 i‡(
Êags
 & (
SERIO_PARITY
|
SERIO_TIMEOUT
)) {

313 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
)

314 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: bad data from KBC -%s%s\n",

315 
Êags
 & 
SERIO_TIMEOUT
 ? "Åimeout" : "",

316 
Êags
 & 
SERIO_PARITY
 ? " badÖarity" : "");

317 
	`ps2_cmd_ab‹ãd
(&
psmou£
->
ps2dev
);

318 
out
;

321 i‡(
	`u∆ikñy
(
psmou£
->
ps2dev
.
Êags
 & 
PS2_FLAG_ACK
))

322 i‡(
	`ps2_h™dÀ_ack
(&
psmou£
->
ps2dev
, 
d©a
))

323 
out
;

325 i‡(
	`u∆ikñy
(
psmou£
->
ps2dev
.
Êags
 & 
PS2_FLAG_CMD
))

326 i‡(
	`ps2_h™dÀ_ª•⁄£
(&
psmou£
->
ps2dev
, 
d©a
))

327 
out
;

329 i‡(
psmou£
->
°©e
 <
PSMOUSE_RESYNCING
)

330 
out
;

332 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
 &&

333 
psmou£
->
pkt˙t
 && 
	`time_a·î
(
jiffõs
,Ösmou£->
œ°
 + 
HZ
/2)) {

334 
	`¥ötk
(
KERN_INFO
 "psmouse.c: %sát %sÜost synchronization,Åhrowing %d bytesáway.\n",

335 
psmou£
->
«me
,Ösmou£->
phys
,Ösmou£->
pkt˙t
);

336 
psmou£
->
badbyã
 =Ösmou£->
∑ckë
[0];

337 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_RESYNCING
);

338 
	`psmou£_queue_w‹k
(
psmou£
, &psmou£->
ªsync_w‹k
, 0);

339 
out
;

342 
psmou£
->
∑ckë
[psmou£->
pkt˙t
++] = 
d©a
;

346 i‡(
	`u∆ikñy
(
psmou£
->
∑ckë
[0] =
PSMOUSE_RET_BAT
 &&Ösmou£->
pkt˙t
 <= 2)) {

347 i‡(
psmou£
->
pkt˙t
 == 1) {

348 
psmou£
->
œ°
 = 
jiffõs
;

349 
out
;

352 i‡(
psmou£
->
∑ckë
[1] =
PSMOUSE_RET_ID
) {

353 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

354 
	`£rio_ªc⁄√˘
(
£rio
);

355 
out
;

360 
psmou£
->
pkt˙t
 = 1;

361 i‡(
	`psmou£_h™dÀ_byã
(
psmou£
))

362 
out
;

364 
psmou£
->
∑ckë
[psmou£->
pkt˙t
++] = 
d©a
;

370 i‡(
psmou£
->
°©e
 =
PSMOUSE_ACTIVATED
 &&

371 
psmou£
->
pkt˙t
 =1 &&Ösmou£->
ªsync_time
 &&

372 
	`time_a·î
(
jiffõs
, 
psmou£
->
œ°
 +Ösmou£->
ªsync_time
 * 
HZ
)) {

373 
psmou£
->
badbyã
 =Ösmou£->
∑ckë
[0];

374 
	`__psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_RESYNCING
);

375 
	`psmou£_queue_w‹k
(
psmou£
, &psmou£->
ªsync_w‹k
, 0);

376 
out
;

379 
psmou£
->
œ°
 = 
jiffõs
;

380 
	`psmou£_h™dÀ_byã
(
psmou£
);

382 
out
:

383  
IRQ_HANDLED
;

384 
	}
}

394 
	$psmou£_¶i˚d_comm™d
(
psmou£
 *psmou£, 
comm™d
)

396 
i
;

398 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
))

401 
i
 = 6; i >= 0; i -= 2) {

402 
d
 = (
comm™d
 >> 
i
) & 3;

403 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
d
, 
PSMOUSE_CMD_SETRES
))

408 
	}
}

414 
	$psmou£_ª£t
(
psmou£
 *psmouse)

416 
∑øm
[2];

418 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_RESET_BAT
))

421 i‡(
∑øm
[0] !
PSMOUSE_RET_BAT
 &&Ö¨am[1] !
PSMOUSE_RET_ID
)

425 
	}
}

431 
	$gíius_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

433 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

434 
∑øm
[4];

436 
∑øm
[0] = 3;

437 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

438 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

439 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

440 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

441 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
);

443 i‡(
∑øm
[0] != 0x00 ||Öaram[1] != 0x33 ||Öaram[2] != 0x55)

446 i‡(
£t_¥›îtõs
) {

447 
	`£t_bô
(
BTN_EXTRA
, 
psmou£
->
dev
->
keybô
);

448 
	`£t_bô
(
BTN_SIDE
, 
psmou£
->
dev
->
keybô
);

449 
	`£t_bô
(
REL_WHEEL
, 
psmou£
->
dev
->
ªlbô
);

451 
psmou£
->
víd‹
 = "Genius";

452 
psmou£
->
«me
 = "Mouse";

453 
psmou£
->
pktsize
 = 4;

457 
	}
}

462 
	$öãŒimou£_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

464 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

465 
∑øm
[2];

467 
∑øm
[0] = 200;

468 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

469 
∑øm
[0] = 100;

470 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

471 
∑øm
[0] = 80;

472 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

473 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
);

475 i‡(
∑øm
[0] != 3)

478 i‡(
£t_¥›îtõs
) {

479 
	`£t_bô
(
BTN_MIDDLE
, 
psmou£
->
dev
->
keybô
);

480 
	`£t_bô
(
REL_WHEEL
, 
psmou£
->
dev
->
ªlbô
);

482 i‡(!
psmou£
->
víd‹
)Ösmouse->vendor = "Generic";

483 i‡(!
psmou£
->
«me
)Ösmouse->name = "Wheel Mouse";

484 
psmou£
->
pktsize
 = 4;

488 
	}
}

493 
	$im_ex∂‹î_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

495 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

496 
∑øm
[2];

498 
	`öãŒimou£_dëe˘
(
psmou£
, 0);

500 
∑øm
[0] = 200;

501 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

502 
∑øm
[0] = 200;

503 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

504 
∑øm
[0] = 80;

505 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

506 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
);

508 i‡(
∑øm
[0] != 4)

512 
∑øm
[0] = 200;

513 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

514 
∑øm
[0] = 80;

515 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

516 
∑øm
[0] = 40;

517 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

519 i‡(
£t_¥›îtõs
) {

520 
	`£t_bô
(
BTN_MIDDLE
, 
psmou£
->
dev
->
keybô
);

521 
	`£t_bô
(
REL_WHEEL
, 
psmou£
->
dev
->
ªlbô
);

522 
	`£t_bô
(
REL_HWHEEL
, 
psmou£
->
dev
->
ªlbô
);

523 
	`£t_bô
(
BTN_SIDE
, 
psmou£
->
dev
->
keybô
);

524 
	`£t_bô
(
BTN_EXTRA
, 
psmou£
->
dev
->
keybô
);

526 i‡(!
psmou£
->
víd‹
)Ösmouse->vendor = "Generic";

527 i‡(!
psmou£
->
«me
)Ösmouse->name = "Explorer Mouse";

528 
psmou£
->
pktsize
 = 4;

532 
	}
}

537 
	$thökög_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

539 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

540 
∑øm
[2];

541 c⁄° 
£q
[] = { 20, 60, 40, 20, 20, 60, 40, 20, 20 };

542 
i
;

544 
∑øm
[0] = 10;

545 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

546 
∑øm
[0] = 0;

547 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

548 
i
 = 0; i < 
	`ARRAY_SIZE
(
£q
); i++) {

549 
∑øm
[0] = 
£q
[
i
];

550 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
);

552 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
);

554 i‡(
∑øm
[0] != 2)

557 i‡(
£t_¥›îtõs
) {

558 
	`£t_bô
(
BTN_EXTRA
, 
psmou£
->
dev
->
keybô
);

560 
psmou£
->
víd‹
 = "Kensington";

561 
psmou£
->
«me
 = "ThinkingMouse";

565 
	}
}

570 
	$ps2b¨e_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

572 i‡(
£t_¥›îtõs
) {

573 i‡(!
psmou£
->
víd‹
)Ösmouse->vendor = "Generic";

574 i‡(!
psmou£
->
«me
)Ösmouse->name = "Mouse";

578 
	}
}

584 
	$c‹å⁄_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

586 i‡(
£t_¥›îtõs
) {

587 
psmou£
->
víd‹
 = "Cortron";

588 
psmou£
->
«me
 = "PS/2 Trackball";

589 
	`£t_bô
(
BTN_SIDE
, 
psmou£
->
dev
->
keybô
);

593 
	}
}

600 
	$psmou£_exãnsi⁄s
(
psmou£
 *psmouse,

601 
max_¥Ÿo
, 
£t_¥›îtõs
)

603 
sy«±ics_h¨dw¨e
 = 0;

609 i‡(
	`li„book_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

610 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

611 i‡(!
£t_¥›îtõs
 || 
	`li„book_öô
(
psmou£
) == 0)

612  
PSMOUSE_LIFEBOOK
;

621 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
 && 
	`thökög_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

622  
PSMOUSE_THINKPS
;

629 i‡(
max_¥Ÿo
 > 
PSMOUSE_PS2
 && 
	`sy«±ics_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

630 
sy«±ics_h¨dw¨e
 = 1;

632 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

633 i‡(!
£t_¥›îtõs
 || 
	`sy«±ics_öô
(
psmou£
) == 0)

634  
PSMOUSE_SYNAPTICS
;

640 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

645 
	`sy«±ics_ª£t
(
psmou£
);

651 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

652 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_RESET_DIS
);

653 i‡(
	`Æps_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

654 i‡(!
£t_¥›îtõs
 || 
	`Æps_öô
(
psmou£
) == 0)

655  
PSMOUSE_ALPS
;

659 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

666 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
 &&

667 
	`hgpk_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

668 i‡(!
£t_¥›îtõs
 || 
	`hgpk_öô
(
psmou£
) == 0)

669  
PSMOUSE_HGPK
;

673 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

679 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
 &&

680 
	`ñ™ãch_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0) {

681 i‡(!
£t_¥›îtõs
 || 
	`ñ™ãch_öô
(
psmou£
) == 0)

682  
PSMOUSE_ELANTECH
;

686 
max_¥Ÿo
 = 
PSMOUSE_IMEX
;

689 i‡(
max_¥Ÿo
 > 
PSMOUSE_IMEX
) {

690 i‡(
	`gíius_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

691  
PSMOUSE_GENPS
;

693 i‡(
	`ps2µ_öô
(
psmou£
, 
£t_¥›îtõs
) == 0)

694  
PSMOUSE_PS2PP
;

696 i‡(
	`åackpoöt_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

697  
PSMOUSE_TRACKPOINT
;

699 i‡(
	`touchkô_ps2_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

700  
PSMOUSE_TOUCHKIT_PS2
;

708 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_RESET_DIS
);

709 
	`psmou£_ª£t
(
psmou£
);

711 i‡(
max_¥Ÿo
 >
PSMOUSE_IMEX
 && 
	`im_ex∂‹î_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

712  
PSMOUSE_IMEX
;

714 i‡(
max_¥Ÿo
 >
PSMOUSE_IMPS
 && 
	`öãŒimou£_dëe˘
(
psmou£
, 
£t_¥›îtõs
) == 0)

715  
PSMOUSE_IMPS
;

721 
	`ps2b¨e_dëe˘
(
psmou£
, 
£t_¥›îtõs
);

723 i‡(
sy«±ics_h¨dw¨e
) {

730 
	`psmou£_ª£t
(
psmou£
);

733  
PSMOUSE_PS2
;

734 
	}
}

736 c⁄° 
psmou£_¥Ÿocﬁ
 
	gpsmou£_¥Ÿocﬁs
[] = {

738 .
ty≥
 = 
PSMOUSE_PS2
,

739 .
	g«me
 = "PS/2",

740 .
	gÆüs
 = "bare",

741 .
	gmax¥Ÿo
 = 1,

742 .
	gdëe˘
 = 
ps2b¨e_dëe˘
,

744 #ifde‡
CONFIG_MOUSE_PS2_LOGIPS2PP


746 .
	gty≥
 = 
PSMOUSE_PS2PP
,

747 .
	g«me
 = "PS2++",

748 .
	gÆüs
 = "logitech",

749 .
	gdëe˘
 = 
ps2µ_öô
,

753 .
	gty≥
 = 
PSMOUSE_THINKPS
,

754 .
	g«me
 = "ThinkPS/2",

755 .
	gÆüs
 = "thinkps",

756 .
	gdëe˘
 = 
thökög_dëe˘
,

759 .
	gty≥
 = 
PSMOUSE_GENPS
,

760 .
	g«me
 = "GenPS/2",

761 .
	gÆüs
 = "genius",

762 .
	gdëe˘
 = 
gíius_dëe˘
,

765 .
	gty≥
 = 
PSMOUSE_IMPS
,

766 .
	g«me
 = "ImPS/2",

767 .
	gÆüs
 = "imps",

768 .
	gmax¥Ÿo
 = 1,

769 .
	gdëe˘
 = 
öãŒimou£_dëe˘
,

772 .
	gty≥
 = 
PSMOUSE_IMEX
,

773 .
	g«me
 = "ImExPS/2",

774 .
	gÆüs
 = "exps",

775 .
	gmax¥Ÿo
 = 1,

776 .
	gdëe˘
 = 
im_ex∂‹î_dëe˘
,

778 #ifde‡
CONFIG_MOUSE_PS2_SYNAPTICS


780 .
	gty≥
 = 
PSMOUSE_SYNAPTICS
,

781 .
	g«me
 = "SynPS/2",

782 .
	gÆüs
 = "synaptics",

783 .
	gdëe˘
 = 
sy«±ics_dëe˘
,

784 .
	göô
 = 
sy«±ics_öô
,

787 #ifde‡
CONFIG_MOUSE_PS2_ALPS


789 .
	gty≥
 = 
PSMOUSE_ALPS
,

790 .
	g«me
 = "AlpsPS/2",

791 .
	gÆüs
 = "alps",

792 .
	gdëe˘
 = 
Æps_dëe˘
,

793 .
	göô
 = 
Æps_öô
,

796 #ifde‡
CONFIG_MOUSE_PS2_LIFEBOOK


798 .
	gty≥
 = 
PSMOUSE_LIFEBOOK
,

799 .
	g«me
 = "LBPS/2",

800 .
	gÆüs
 = "lifebook",

801 .
	göô
 = 
li„book_öô
,

804 #ifde‡
CONFIG_MOUSE_PS2_TRACKPOINT


806 .
	gty≥
 = 
PSMOUSE_TRACKPOINT
,

807 .
	g«me
 = "TPPS/2",

808 .
	gÆüs
 = "trackpoint",

809 .
	gdëe˘
 = 
åackpoöt_dëe˘
,

812 #ifde‡
CONFIG_MOUSE_PS2_TOUCHKIT


814 .
	gty≥
 = 
PSMOUSE_TOUCHKIT_PS2
,

815 .
	g«me
 = "touchkitPS/2",

816 .
	gÆüs
 = "touchkit",

817 .
	gdëe˘
 = 
touchkô_ps2_dëe˘
,

820 #ifde‡
CONFIG_MOUSE_PS2_OLPC


822 .
	gty≥
 = 
PSMOUSE_HGPK
,

823 .
	g«me
 = "OLPC HGPK",

824 .
	gÆüs
 = "hgpk",

825 .
	gdëe˘
 = 
hgpk_dëe˘
,

828 #ifde‡
CONFIG_MOUSE_PS2_ELANTECH


830 .
	gty≥
 = 
PSMOUSE_ELANTECH
,

831 .
	g«me
 = "ETPS/2",

832 .
	gÆüs
 = "elantech",

833 .
	gdëe˘
 = 
ñ™ãch_dëe˘
,

834 .
	göô
 = 
ñ™ãch_öô
,

838 .
	gty≥
 = 
PSMOUSE_CORTRON
,

839 .
	g«me
 = "CortronPS/2",

840 .
	gÆüs
 = "cortps",

841 .
	gdëe˘
 = 
c‹å⁄_dëe˘
,

844 .
	gty≥
 = 
PSMOUSE_AUTO
,

845 .
	g«me
 = "auto",

846 .
	gÆüs
 = "any",

847 .
	gmax¥Ÿo
 = 1,

851 c⁄° 
psmou£_¥Ÿocﬁ
 *
	$psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£_ty≥
 
ty≥
)

853 
i
;

855 
i
 = 0; i < 
	`ARRAY_SIZE
(
psmou£_¥Ÿocﬁs
); i++)

856 i‡(
psmou£_¥Ÿocﬁs
[
i
].
ty≥
 ==Åype)

857  &
psmou£_¥Ÿocﬁs
[
i
];

859 
	`WARN_ON
(1);

860  &
psmou£_¥Ÿocﬁs
[0];

861 
	}
}

863 c⁄° 
psmou£_¥Ÿocﬁ
 *
	$psmou£_¥Ÿocﬁ_by_«me
(c⁄° *
«me
, 
size_t
 
Àn
)

865 c⁄° 
psmou£_¥Ÿocﬁ
 *
p
;

866 
i
;

868 
i
 = 0; i < 
	`ARRAY_SIZE
(
psmou£_¥Ÿocﬁs
); i++) {

869 
p
 = &
psmou£_¥Ÿocﬁs
[
i
];

871 i‡((
	`°æí
(
p
->
«me
Ë=
Àn
 && !
	`°∫cmp
(p->name,Çame,Üen)) ||

872 (
	`°æí
(
p
->
Æüs
Ë=
Àn
 && !
	`°∫cmp
’->Æüs, 
«me
,Üen)))

873  &
psmou£_¥Ÿocﬁs
[
i
];

876  
NULL
;

877 
	}
}

884 
	$psmou£_¥obe
(
psmou£
 *psmouse)

886 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

887 
∑øm
[2];

896 
∑øm
[0] = 0xa5;

897 i‡(
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETID
))

900 i‡(
∑øm
[0] != 0x00 &&Öaram[0] != 0x03 &&

901 
∑øm
[0] != 0x04 &&Öaram[0] != 0xff)

908 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
PSMOUSE_CMD_RESET_DIS
))

909 
	`¥ötk
(
KERN_WARNING
 "psmou£.c: FaûedÅÿª£àmou£ o¿%s\n", 
ps2dev
->
£rio
->
phys
);

912 
	}
}

918 
	$psmou£_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, 
ªsﬁuti⁄
)

920 c⁄° 
∑øms
[] = { 0, 1, 2, 2, 3 };

921 
p
;

923 i‡(
ªsﬁuti⁄
 == 0 ||Ñesolution > 200)

924 
ªsﬁuti⁄
 = 200;

926 
p
 = 
∑øms
[
ªsﬁuti⁄
 / 50];

927 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
p
, 
PSMOUSE_CMD_SETRES
);

928 
psmou£
->
ªsﬁuti⁄
 = 25 << 
p
;

929 
	}
}

935 
	$psmou£_£t_øã
(
psmou£
 *psmou£, 
øã
)

937 c⁄° 
øãs
[] = { 200, 100, 80, 60, 40, 20, 10, 0 };

938 
r
;

939 
i
 = 0;

941 
øãs
[
i
] > 
øã
) i++;

942 
r
 = 
øãs
[
i
];

943 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, &
r
, 
PSMOUSE_CMD_SETRATE
);

944 
psmou£
->
øã
 = 
r
;

945 
	}
}

951 
	$psmou£_öôülize
(
psmou£
 *psmouse)

957 i‡(
psmou£_max_¥Ÿo
 !
PSMOUSE_PS2
) {

958 
psmou£
->
	`£t_øã
’smou£,Ösmou£->
øã
);

959 
psmou£
->
	`£t_ªsﬁuti⁄
’smou£,Ösmou£->
ªsﬁuti⁄
);

960 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_SETSCALE11
);

962 
	}
}

968 
	$psmou£_a˘iv©e
(
psmou£
 *psmouse)

970 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
))

971 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: FailedÅoÉnable mouse on %s\n",

972 
psmou£
->
ps2dev
.
£rio
->
phys
);

974 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_ACTIVATED
);

975 
	}
}

983 
	$psmou£_dó˘iv©e
(
psmou£
 *psmouse)

985 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_DISABLE
))

986 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: FailedÅo deactivate mouse on %s\n",

987 
psmou£
->
ps2dev
.
£rio
->
phys
);

989 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

990 
	}
}

996 
	$psmou£_pﬁl
(
psmou£
 *psmouse)

998  
	`ps2_comm™d
(&
psmou£
->
ps2dev
,Ösmou£->
∑ckë
,

999 
PSMOUSE_CMD_POLL
 | (
psmou£
->
pktsize
 << 8));

1000 
	}
}

1007 
	$psmou£_ªsync
(
w‹k_°ru˘
 *
w‹k
)

1009 
psmou£
 *
∑ª¡
 = 
NULL
, *psmouse =

1010 
	`c⁄èöî_of
(
w‹k
, 
psmou£
, 
ªsync_w‹k
.work);

1011 
£rio
 *£riÿ
psmou£
->
ps2dev
.serio;

1012 
psmou£_ªt_t
 
rc
 = 
PSMOUSE_GOOD_DATA
;

1013 
Áûed
 = 0, 
íabÀd
 = 0;

1014 
i
;

1016 
	`muãx_lock
(&
psmou£_muãx
);

1018 i‡(
psmou£
->
°©e
 !
PSMOUSE_RESYNCING
)

1019 
out
;

1021 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1022 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1023 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1036 
psmou£
->
num_ªsyncs
++;

1038 i‡(
	`ps2_£ndbyã
(&
psmou£
->
ps2dev
, 
PSMOUSE_CMD_DISABLE
, 20)) {

1039 i‡(
psmou£
->
num_ªsyncs
 < 3 ||Ösmou£->
acks_dißbÀ_comm™d
)

1040 
Áûed
 = 1;

1042 
psmou£
->
acks_dißbÀ_comm™d
 = 1;

1051 i‡(!
Áûed
) {

1052 i‡(
psmou£
->
	`pﬁl
(psmouse))

1053 
Áûed
 = 1;

1055 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1056 
i
 = 0; i < 
psmou£
->
pktsize
; i++) {

1057 
psmou£
->
pkt˙t
++;

1058 
rc
 = 
psmou£
->
	`¥Ÿocﬁ_h™dÀr
(psmouse);

1059 i‡(
rc
 !
PSMOUSE_GOOD_DATA
)

1062 i‡(
rc
 !
PSMOUSE_FULL_PACKET
)

1063 
Áûed
 = 1;

1064 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_RESYNCING
);

1072 
i
 = 0; i < 5; i++) {

1073 i‡(!
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
)) {

1074 
íabÀd
 = 1;

1077 
	`m¶ìp
(200);

1080 i‡(!
íabÀd
) {

1081 
	`¥ötk
(
KERN_WARNING
 "psmouse.c: failedÅoÑe-enable mouse on %s\n",

1082 
psmou£
->
ps2dev
.
£rio
->
phys
);

1083 
Áûed
 = 1;

1086 i‡(
Áûed
) {

1087 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1088 
	`¥ötk
(
KERN_INFO
 "psmouse.c:Ñesync failed, issuingÑeconnectÑequest\n");

1089 
	`£rio_ªc⁄√˘
(
£rio
);

1091 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_ACTIVATED
);

1093 i‡(
∑ª¡
)

1094 
	`psmou£_a˘iv©e
(
∑ª¡
);

1095 
out
:

1096 
	`muãx_u∆ock
(&
psmou£_muãx
);

1097 
	}
}

1103 
	$psmou£_˛ónup
(
£rio
 *serio)

1105 
psmou£
 *psmou£ = 
	`£rio_gë_drvd©a
(
£rio
);

1106 
psmou£
 *
∑ª¡
 = 
NULL
;

1108 i‡(
psmou£_muãx
->
ow√r
->
èsk
 !
	`gë_cuºít
())

1109 
	`muãx_lock
(&
psmou£_muãx
);

1111 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1112 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1113 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1116 
	`psmou£_dó˘iv©e
(
psmou£
);

1118 i‡(
psmou£
->
˛ónup
)

1119 
psmou£
->
	`˛ónup
(psmouse);

1121 
	`psmou£_ª£t
(
psmou£
);

1127 
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
NULL
, 
PSMOUSE_CMD_ENABLE
);

1129 i‡(
∑ª¡
) {

1130 i‡(
∑ª¡
->
±_dó˘iv©e
)

1131 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1133 
	`psmou£_a˘iv©e
(
∑ª¡
);

1136 
	`muãx_u∆ock
(&
psmou£_muãx
);

1137 
	}
}

1139 
	$psmou£ba£_checkpoöt
()

1144 
	}
}

1146 
	$psmou£ba£_ª°‹e
()

1151 
	}
}

1157 
	$psmou£_disc⁄√˘
(
£rio
 *serio)

1159 
psmou£
 *psmou£, *
∑ª¡
 = 
NULL
;

1161 
psmou£
 = 
	`£rio_gë_drvd©a
(
£rio
);

1163 
	`sysfs_ªmove_group
(&
£rio
->
dev
.
kobj
, &
psmou£_©åibuã_group
);

1165 
	`muãx_lock
(&
psmou£_muãx
);

1167 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1170 
	`muãx_u∆ock
(&
psmou£_muãx
);

1171 
	`Êush_w‹kqueue
(
kpsmou£d_wq
);

1172 
	`muãx_lock
(&
psmou£_muãx
);

1174 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1175 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1176 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1179 i‡(
psmou£
->
disc⁄√˘
)

1180 
psmou£
->
	`disc⁄√˘
(psmouse);

1182 i‡(
∑ª¡
 &&Ö¨ít->
±_dó˘iv©e
)

1183 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1185 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1187 
	`£rio_˛o£
(
£rio
);

1188 
	`£rio_£t_drvd©a
(
£rio
, 
NULL
);

1189 
	`öput_uƒegi°î_devi˚
(
psmou£
->
dev
);

1190 
	`k‰ì
(
psmou£
);

1192 i‡(
∑ª¡
)

1193 
	`psmou£_a˘iv©e
(
∑ª¡
);

1195 
	`muãx_u∆ock
(&
psmou£_muãx
);

1196 
	}
}

1198 
	$psmou£_swôch_¥Ÿocﬁ
(
psmou£
 *psmou£, c⁄° 
psmou£_¥Ÿocﬁ
 *
¥Ÿo
)

1200 
öput_dev
 *öput_dev = 
psmou£
->
dev
;

1202 
öput_dev
->
dev
.
∑ª¡
 = &
psmou£
->
ps2dev
.
£rio
->dev;

1204 
öput_dev
->
evbô
[0] = 
	`BIT_MASK
(
EV_KEY
Ë| BIT_MASK(
EV_REL
);

1205 
öput_dev
->
keybô
[
	`BIT_WORD
(
BTN_MOUSE
)] = 
	`BIT_MASK
(
BTN_LEFT
) |

1206 
	`BIT_MASK
(
BTN_MIDDLE
Ë| BIT_MASK(
BTN_RIGHT
);

1207 
öput_dev
->
ªlbô
[0] = 
	`BIT_MASK
(
REL_X
Ë| BIT_MASK(
REL_Y
);

1209 
psmou£
->
£t_øã
 = 
psmou£_£t_øã
;

1210 
psmou£
->
£t_ªsﬁuti⁄
 = 
psmou£_£t_ªsﬁuti⁄
;

1211 
psmou£
->
pﬁl
 = 
psmou£_pﬁl
;

1212 
psmou£
->
¥Ÿocﬁ_h™dÀr
 = 
psmou£_¥o˚ss_byã
;

1213 
psmou£
->
pktsize
 = 3;

1215 i‡(
¥Ÿo
 && (¥Ÿo->
dëe˘
 ||ÖrŸo->
öô
)) {

1216 i‡(
¥Ÿo
->
dëe˘
 &&ÖrŸo->
	`dëe˘
(
psmou£
, 1) < 0)

1219 i‡(
¥Ÿo
->
öô
 &&ÖrŸo->
	`öô
(
psmou£
) < 0)

1222 
psmou£
->
ty≥
 = 
¥Ÿo
->type;

1225 
psmou£
->
ty≥
 = 
	`psmou£_exãnsi⁄s
’smou£, 
psmou£_max_¥Ÿo
, 1);

1232 i‡(
psmou£
->
pktsize
 == 3)

1233 
psmou£
->
ªsync_time
 = 0;

1241 i‡(
psmou£
->
ªsync_time
 &&Ösmou£->
	`pﬁl
(psmouse))

1242 
psmou£
->
ªsync_time
 = 0;

1244 
	`¢¥ötf
(
psmou£
->
dev«me
, (psmouse->devname), "%s %s %s",

1245 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
)->
«me
,Ösmou£->
víd‹
,Ösmouse->name);

1247 
öput_dev
->
«me
 = 
psmou£
->
dev«me
;

1248 
öput_dev
->
phys
 = 
psmou£
->phys;

1249 
öput_dev
->
id
.
bu°y≥
 = 
BUS_I8042
;

1250 
öput_dev
->
id
.
víd‹
 = 0x0002;

1251 
öput_dev
->
id
.
¥odu˘
 = 
psmou£
->
ty≥
;

1252 
öput_dev
->
id
.
vîsi⁄
 = 
psmou£
->
modñ
;

1255 
	}
}

1261 
	$psmou£_c⁄√˘
(
£rio
 *£rio, 
£rio_drivî
 *
drv
)

1263 
psmou£
 *psmou£, *
∑ª¡
 = 
NULL
;

1264 
öput_dev
 *input_dev;

1265 
ªtvÆ
 = 0, 
îr‹
 = -
ENOMEM
;

1267 
	`muãx_lock
(&
psmou£_muãx
);

1273 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1274 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1275 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1278 
psmou£
 = 
	`kzÆloc
((psmou£), 
GFP_KERNEL
);

1279 
öput_dev
 = 
	`öput_Æloˇã_devi˚
();

1280 i‡(!
psmou£
 || !
öput_dev
)

1281 
îr_‰ì
;

1283 
	`ps2_öô
(&
psmou£
->
ps2dev
, 
£rio
);

1284 
	`INIT_DELAYED_WORK
(&
psmou£
->
ªsync_w‹k
, 
psmou£_ªsync
);

1285 
psmou£
->
dev
 = 
öput_dev
;

1286 
	`¢¥ötf
(
psmou£
->
phys
, ’smou£->phys), "%s/öput0", 
£rio
->phys);

1288 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1290 
	`£rio_£t_drvd©a
(
£rio
, 
psmou£
);

1292 
îr‹
 = 
	`£rio_›í
(
£rio
, 
drv
);

1293 i‡(
îr‹
)

1294 
îr_˛ór_drvd©a
;

1296 i‡(
	`psmou£_¥obe
(
psmou£
) < 0) {

1297 
îr‹
 = -
ENODEV
;

1298 
îr_˛o£_£rio
;

1301 
psmou£
->
øã
 = 
psmou£_øã
;

1302 
psmou£
->
ªsﬁuti⁄
 = 
psmou£_ªsﬁuti⁄
;

1303 
psmou£
->
ª£è·î
 = 
psmou£_ª£è·î
;

1304 
psmou£
->
ªsync_time
 = 
∑ª¡
 ? 0 : 
psmou£_ªsync_time
;

1305 
psmou£
->
sm¨ts¸ﬁl
 = 
psmou£_sm¨ts¸ﬁl
;

1307 
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, 
NULL
);

1309 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1310 
	`psmou£_öôülize
(
psmou£
);

1312 
îr‹
 = 
	`öput_ªgi°î_devi˚
(
psmou£
->
dev
);

1313 i‡(
îr‹
)

1314 
îr_¥Ÿocﬁ_disc⁄√˘
;

1316 i‡(
∑ª¡
 &&Ö¨ít->
±_a˘iv©e
)

1317 
∑ª¡
->
	`±_a˘iv©e
(parent);

1319 
îr‹
 = 
	`sysfs_¸óã_group
(&
£rio
->
dev
.
kobj
, &
psmou£_©åibuã_group
);

1320 i‡(
îr‹
)

1321 
îr_±_dó˘iv©e
;

1323 
	`psmou£_a˘iv©e
(
psmou£
);

1324 
od·_psmou£_£rio
 = 
£rio
;

1325 
out
:

1327 i‡(
∑ª¡
)

1328 
	`psmou£_a˘iv©e
(
∑ª¡
);

1330 
	`muãx_u∆ock
(&
psmou£_muãx
);

1331  
ªtvÆ
;

1333 
îr_±_dó˘iv©e
:

1334 i‡(
∑ª¡
 &&Ö¨ít->
±_dó˘iv©e
)

1335 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1336 
	`öput_uƒegi°î_devi˚
(
psmou£
->
dev
);

1337 
öput_dev
 = 
NULL
;

1338 
îr_¥Ÿocﬁ_disc⁄√˘
:

1339 i‡(
psmou£
->
disc⁄√˘
)

1340 
psmou£
->
	`disc⁄√˘
(psmouse);

1341 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1342 
îr_˛o£_£rio
:

1343 
	`£rio_˛o£
(
£rio
);

1344 
îr_˛ór_drvd©a
:

1345 
	`£rio_£t_drvd©a
(
£rio
, 
NULL
);

1346 
îr_‰ì
:

1347 
	`öput_‰ì_devi˚
(
öput_dev
);

1348 
	`k‰ì
(
psmou£
);

1350 
ªtvÆ
 = 
îr‹
;

1351 
out
;

1352 
	}
}

1355 
	$psmou£_ªc⁄√˘
(
£rio
 *serio)

1357 
psmou£
 *psmou£ = 
	`£rio_gë_drvd©a
(
£rio
);

1358 
psmou£
 *
∑ª¡
 = 
NULL
;

1359 
£rio_drivî
 *
drv
 = 
£rio
->drv;

1360 
rc
 = -1;

1362 i‡(!
drv
 || !
psmou£
) {

1363 
	`¥ötk
(
KERN_DEBUG
 "psmouse:ÑeconnectÑequest, but serio is disconnected, ignoring...\n");

1367 
	`muãx_lock
(&
psmou£_muãx
);

1369 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1370 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1371 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1374 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1376 i‡(
psmou£
->
ªc⁄√˘
) {

1377 i‡(
psmou£
->
	`ªc⁄√˘
(psmouse))

1378 
out
;

1379 } i‡(
	`psmou£_¥obe
(
psmou£
) < 0 ||

1380 
psmou£
->
ty≥
 !
	`psmou£_exãnsi⁄s
’smou£, 
psmou£_max_¥Ÿo
, 0))

1381 
out
;

1386 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1388 
	`psmou£_öôülize
(
psmou£
);

1390 i‡(
∑ª¡
 &&Ö¨ít->
±_a˘iv©e
)

1391 
∑ª¡
->
	`±_a˘iv©e
(parent);

1393 
	`psmou£_a˘iv©e
(
psmou£
);

1394 
rc
 = 0;

1395 
od·_psmou£_£rio
 = 
£rio
;

1396 
out
:

1398 i‡(
∑ª¡
)

1399 
	`psmou£_a˘iv©e
(
∑ª¡
);

1401 
	`muãx_u∆ock
(&
psmou£_muãx
);

1402  
rc
;

1404 
	`psmou£ba£_checkpoöt
();

1405 
	`psmou£ba£_ª°‹e
();

1407 
	}
}

1409 
£rio_devi˚_id
 
	gpsmou£_£rio_ids
[] = {

1411 .
ty≥
 = 
SERIO_8042
,

1412 .
	g¥Ÿo
 = 
SERIO_ANY
,

1413 .
	gid
 = 
SERIO_ANY
,

1414 .
	gexåa
 = 
SERIO_ANY
,

1417 .
	gty≥
 = 
SERIO_PS_PSTHRU
,

1418 .
	g¥Ÿo
 = 
SERIO_ANY
,

1419 .
	gid
 = 
SERIO_ANY
,

1420 .
	gexåa
 = 
SERIO_ANY
,

1427 
£rio_drivî
 
	gpsmou£_drv
 = {

1428 .
drivî
 = {

1429 .
«me
 = "psmouse",

1431 .
	gdes¸ùti⁄
 = 
DRIVER_DESC
,

1432 .
	gid_èbÀ
 = 
psmou£_£rio_ids
,

1433 .
	göãºu±
 = 
psmou£_öãºu±
,

1434 .
	gc⁄√˘
 = 
psmou£_c⁄√˘
,

1435 .
	gªc⁄√˘
 = 
psmou£_ªc⁄√˘
,

1436 .
	gdisc⁄√˘
 = 
psmou£_disc⁄√˘
,

1437 .
	g˛ónup
 = 
psmou£_˛ónup
,

1440 
ssize_t
 
	$psmou£_©å_show_hñ≥r
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
dev©å
,

1441 *
buf
)

1443 
£rio
 *£riÿ
	`to_£rio_p‹t
(
dev
);

1444 
psmou£_©åibuã
 *
©å
 = 
	`to_psmou£_©å
(
dev©å
);

1445 
psmou£
 *psmouse;

1446 
ªtvÆ
;

1448 
ªtvÆ
 = 
	`£rio_pö_drivî
(
£rio
);

1449 i‡(
ªtvÆ
)

1450  
ªtvÆ
;

1452 i‡(
£rio
->
drv
 !&
psmou£_drv
) {

1453 
ªtvÆ
 = -
ENODEV
;

1454 
out
;

1457 
psmou£
 = 
	`£rio_gë_drvd©a
(
£rio
);

1459 
ªtvÆ
 = 
©å
->
	`show
(
psmou£
,áâr->
d©a
, 
buf
);

1461 
out
:

1462 
	`£rio_u≈ö_drivî
(
£rio
);

1463  
ªtvÆ
;

1464 
	}
}

1466 
ssize_t
 
	$psmou£_©å_£t_hñ≥r
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
dev©å
,

1467 c⁄° *
buf
, 
size_t
 
cou¡
)

1469 
£rio
 *£riÿ
	`to_£rio_p‹t
(
dev
);

1470 
psmou£_©åibuã
 *
©å
 = 
	`to_psmou£_©å
(
dev©å
);

1471 
psmou£
 *psmou£, *
∑ª¡
 = 
NULL
;

1472 
ªtvÆ
;

1474 
ªtvÆ
 = 
	`£rio_pö_drivî
(
£rio
);

1475 i‡(
ªtvÆ
)

1476  
ªtvÆ
;

1478 i‡(
£rio
->
drv
 !&
psmou£_drv
) {

1479 
ªtvÆ
 = -
ENODEV
;

1480 
out_u≈ö
;

1483 
ªtvÆ
 = 
	`muãx_lock_öãºu±ibÀ
(&
psmou£_muãx
);

1484 i‡(
ªtvÆ
)

1485 
out_u≈ö
;

1487 
psmou£
 = 
	`£rio_gë_drvd©a
(
£rio
);

1489 i‡(
©å
->
¥Ÿe˘
) {

1490 i‡(
psmou£
->
°©e
 =
PSMOUSE_IGNORE
) {

1491 
ªtvÆ
 = -
ENODEV
;

1492 
out_u∆ock
;

1495 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1496 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1497 
	`psmou£_dó˘iv©e
(
∑ª¡
);

1500 
	`psmou£_dó˘iv©e
(
psmou£
);

1503 
ªtvÆ
 = 
©å
->
	`£t
(
psmou£
,áâr->
d©a
, 
buf
, 
cou¡
);

1505 i‡(
©å
->
¥Ÿe˘
) {

1506 i‡(
ªtvÆ
 !-
ENODEV
)

1507 
	`psmou£_a˘iv©e
(
psmou£
);

1509 i‡(
∑ª¡
)

1510 
	`psmou£_a˘iv©e
(
∑ª¡
);

1513 
out_u∆ock
:

1514 
	`muãx_u∆ock
(&
psmou£_muãx
);

1515 
out_u≈ö
:

1516 
	`£rio_u≈ö_drivî
(
£rio
);

1517  
ªtvÆ
;

1518 
	}
}

1520 
ssize_t
 
psmou£_show_öt_©å
(
psmou£
 *psmou£, *
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2))Ë
off£t
, *__©åibuã__((
blob
(4))Ë
buf
Ë
__©åibuã
((
isﬁ©e
))

1522 *
	gfõld
 = (*)((*)
psmou£
 + (
size_t
)
off£t
);

1523 
¥ötk
 ("psmou£ i†%p, fõld i†%p, bu‡i†%p.\n", 
psmou£
, 
fõld
, 
buf
);

1524  
•rötf
(
buf
, "%u\n", *
fõld
);

1527 
ssize_t
 
psmou£_£t_öt_©å
(
psmou£
 *psmou£, *
__©åibuã__
((
nodîef
, 
addªss_•a˚
(2)))
off£t
, c⁄° * __©åibuã__((
blob
(4)))
buf
, 
size_t
 
cou¡
Ë
__©åibuã
((
isﬁ©e
))

1529 *
	gfõld
 = (*)((*)
psmou£
 + (
size_t
)
off£t
);

1530 
	gvÆue
;

1532 i‡(
°ri˘_°πoul
(
buf
, 10, &
vÆue
))

1533  -
	gEINVAL
;

1535 i‡(()
	gvÆue
 !
vÆue
)

1536  -
EINVAL
;

1538 *
	gfõld
 = 
vÆue
;

1540  
	gcou¡
;

1543 
ssize_t
 
	$psmou£_©å_show_¥Ÿocﬁ
(
psmou£
 *psmou£, *
d©a
, * 
buf
Ë
	`__©åibuã
((
isﬁ©e
))

1545 
	`¥ötk
 ("Sìög %s.\n", 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
)->
«me
);

1546  
	`•rötf
(
buf
, "%s\n", 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
)->
«me
);

1547 
	}
}

1549 
ssize_t
 
	$psmou£_©å_£t_¥Ÿocﬁ
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

1551 
£rio
 *£riÿ
psmou£
->
ps2dev
.serio;

1552 
psmou£
 *
∑ª¡
 = 
NULL
;

1553 
öput_dev
 *
ﬁd_dev
, *
√w_dev
;

1554 c⁄° 
psmou£_¥Ÿocﬁ
 *
¥Ÿo
, *
ﬁd_¥Ÿo
;

1555 
îr‹
;

1556 
ªåy
 = 0;

1558 
¥Ÿo
 = 
	`psmou£_¥Ÿocﬁ_by_«me
(
buf
, 
cou¡
);

1559 i‡(!
¥Ÿo
)

1560  -
EINVAL
;

1562 i‡(
psmou£
->
ty≥
 =
¥Ÿo
->type)

1563  
cou¡
;

1565 
√w_dev
 = 
	`öput_Æloˇã_devi˚
();

1566 i‡(!
√w_dev
)

1567  -
ENOMEM
;

1569 
£rio
->
chûd
) {

1570 i‡(++
ªåy
 > 3) {

1571 
	`¥ötk
(
KERN_WARNING
 "psmouse: failedÅo destroy childÖort,Örotocol changeáborted.\n");

1572 
	`öput_‰ì_devi˚
(
√w_dev
);

1573  -
EIO
;

1576 
	`muãx_u∆ock
(&
psmou£_muãx
);

1577 
	`£rio_u≈ö_drivî
(
£rio
);

1578 
	`£rio_uƒegi°î_chûd_p‹t
(
£rio
);

1579 
	`£rio_pö_drivî_unöãºu±ibÀ
(
£rio
);

1580 
	`muãx_lock
(&
psmou£_muãx
);

1582 i‡(
£rio
->
drv
 !&
psmou£_drv
) {

1583 
	`öput_‰ì_devi˚
(
√w_dev
);

1584  -
ENODEV
;

1587 i‡(
psmou£
->
ty≥
 =
¥Ÿo
->type) {

1588 
	`öput_‰ì_devi˚
(
√w_dev
);

1589  
cou¡
;

1593 i‡(
£rio
->
∑ª¡
 && sîio->
id
.
ty≥
 =
SERIO_PS_PSTHRU
) {

1594 
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

1595 i‡(
∑ª¡
->
±_dó˘iv©e
)

1596 
∑ª¡
->
	`±_dó˘iv©e
(parent);

1599 
ﬁd_dev
 = 
psmou£
->
dev
;

1600 
ﬁd_¥Ÿo
 = 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
psmou£
->
ty≥
);

1602 i‡(
psmou£
->
disc⁄√˘
)

1603 
psmou£
->
	`disc⁄√˘
(psmouse);

1605 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1607 
psmou£
->
dev
 = 
√w_dev
;

1608 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1610 i‡(
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, 
¥Ÿo
) < 0) {

1611 
	`psmou£_ª£t
(
psmou£
);

1613 
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, &
psmou£_¥Ÿocﬁs
[0]);

1616 
	`psmou£_öôülize
(
psmou£
);

1617 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1619 
îr‹
 = 
	`öput_ªgi°î_devi˚
(
psmou£
->
dev
);

1620 i‡(
îr‹
) {

1621 i‡(
psmou£
->
disc⁄√˘
)

1622 
psmou£
->
	`disc⁄√˘
(psmouse);

1624 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_IGNORE
);

1625 
	`öput_‰ì_devi˚
(
√w_dev
);

1626 
psmou£
->
dev
 = 
ﬁd_dev
;

1627 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_INITIALIZING
);

1628 
	`psmou£_swôch_¥Ÿocﬁ
(
psmou£
, 
ﬁd_¥Ÿo
);

1629 
	`psmou£_öôülize
(
psmou£
);

1630 
	`psmou£_£t_°©e
(
psmou£
, 
PSMOUSE_CMD_MODE
);

1632  
îr‹
;

1635 
	`öput_uƒegi°î_devi˚
(
ﬁd_dev
);

1637 i‡(
∑ª¡
 &&Ö¨ít->
±_a˘iv©e
)

1638 
∑ª¡
->
	`±_a˘iv©e
(parent);

1640  
cou¡
;

1641 
	}
}

1643 
ssize_t
 
	$psmou£_©å_£t_øã
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

1645 
vÆue
;

1647 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
))

1648  -
EINVAL
;

1650 
psmou£
->
	`£t_øã
’smou£, 
vÆue
);

1651  
cou¡
;

1652 
	}
}

1654 
ssize_t
 
	$psmou£_©å_£t_ªsﬁuti⁄
(
psmou£
 *psmou£, *
d©a
, c⁄° *
buf
, 
size_t
 
cou¡
)

1656 
vÆue
;

1658 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
))

1659  -
EINVAL
;

1661 
psmou£
->
	`£t_ªsﬁuti⁄
’smou£, 
vÆue
);

1662  
cou¡
;

1663 
	}
}

1666 
	$psmou£_£t_max¥Ÿo
(c⁄° *
vÆ
, 
kî√l_∑øm
 *
kp
Ë
	`__©åibuã
((
isﬁ©e
))

1668 c⁄° 
psmou£_¥Ÿocﬁ
 *
¥Ÿo
;

1670 i‡(!
vÆ
)

1671  -
EINVAL
;

1673 
¥Ÿo
 = 
	`psmou£_¥Ÿocﬁ_by_«me
(
vÆ
, 
	`°æí
(val));

1675 i‡(!
¥Ÿo
 || !¥Ÿo->
max¥Ÿo
)

1676  -
EINVAL
;

1678 *((*)
kp
->
¨g
Ë
¥Ÿo
->
ty≥
;

1681 
	}
}

1683 
	$psmou£_gë_max¥Ÿo
(*
buf„r
, 
kî√l_∑øm
 *
kp
Ë
	`__©åibuã
((
isﬁ©e
))

1685 
ty≥
 = *((*)
kp
->
¨g
);

1687  
	`•rötf
(
buf„r
, "%s\n", 
	`psmou£_¥Ÿocﬁ_by_ty≥
(
ty≥
)->
«me
);

1688 
	}
}

1690 
__öô
 
	$psmou£_öô
()

1692 
îr
;

1694 
kpsmou£d_wq
 = 
	`¸óã_sögÀthªad_w‹kqueue
("kpsmoused");

1695 i‡(!
kpsmou£d_wq
) {

1696 
	`¥ötk
(
KERN_ERR
 "psmouse: failedÅo create kpsmoused workqueue\n");

1697  -
ENOMEM
;

1700 
îr
 = 
	`£rio_ªgi°î_drivî
(&
psmou£_drv
);

1701 i‡(
îr
)

1702 
	`de°roy_w‹kqueue
(
kpsmou£d_wq
);

1704  
îr
;

1705 
	}
}

1707 
__exô
 
	$psmou£_exô
()

1709 
	`£rio_uƒegi°î_drivî
(&
psmou£_drv
);

1710 
	`de°roy_w‹kqueue
(
kpsmou£d_wq
);

1711 
	}
}

1713 
moduÀ_öô
(
psmou£_öô
);

1714 
moduÀ_exô
(
psmou£_exô
);

	@synaptics.c

26 
	~<löux/moduÀ.h
>

27 
	~<löux/öput.h
>

28 
	~<löux/£rio.h
>

29 
	~<löux/libps2.h
>

30 
	~"psmou£.h
"

31 
	~"sy«±ics.h
"

38 
	#XMIN_NOMINAL
 1472

	)

39 
	#XMAX_NOMINAL
 5472

	)

40 
	#YMIN_NOMINAL
 1408

	)

41 
	#YMAX_NOMINAL
 4448

	)

51 
	$sy«±ics_mode_cmd
(
psmou£
 *psmou£, 
mode
)

53 
∑øm
[1];

55 i‡(
	`psmou£_¶i˚d_comm™d
(
psmou£
, 
mode
))

57 
∑øm
[0] = 
SYN_PS_SET_MODE2
;

58 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRATE
))

61 
	}
}

63 
	$sy«±ics_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

65 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

66 
∑øm
[4];

68 
∑øm
[0] = 0;

70 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

71 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

72 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

73 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_SETRES
);

74 
	`ps2_comm™d
(
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
);

76 i‡(
∑øm
[1] != 0x47)

77  -
ENODEV
;

79 i‡(
£t_¥›îtõs
) {

80 
psmou£
->
víd‹
 = "Synaptics";

81 
psmou£
->
«me
 = "TouchPad";

85 
	}
}

87 
	$sy«±ics_ª£t
(
psmou£
 *psmouse)

90 
	`sy«±ics_mode_cmd
(
psmou£
, 0);

91 
	}
}

93 #ifde‡
CONFIG_MOUSE_PS2_SYNAPTICS


102 
	$sy«±ics_£nd_cmd
(
psmou£
 *psmou£, 
c
, *
∑øm
)

104 i‡(
	`psmou£_¶i˚d_comm™d
(
psmou£
, 
c
))

106 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
∑øm
, 
PSMOUSE_CMD_GETINFO
))

109 
	}
}

115 
	$sy«±ics_modñ_id
(
psmou£
 *psmouse)

117 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

118 
mi
[3];

120 i‡(
	`sy«±ics_£nd_cmd
(
psmou£
, 
SYN_QUE_MODEL
, 
mi
))

122 
¥iv
->
modñ_id
 = (
mi
[0]<<16) | (mi[1]<<8) | mi[2];

124 
	}
}

130 
	$sy«±ics_ˇ∑bûôy
(
psmou£
 *psmouse)

132 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

133 
ˇp
[3];

135 i‡(
	`sy«±ics_£nd_cmd
(
psmou£
, 
SYN_QUE_CAPABILITIES
, 
ˇp
))

137 
¥iv
->
ˇ∑bûôõs
 = (
ˇp
[0] << 16) | (cap[1] << 8) | cap[2];

138 
¥iv
->
ext_ˇp
 = 0;

139 i‡(!
	`SYN_CAP_VALID
(
¥iv
->
ˇ∑bûôõs
))

145 i‡(!
	`SYN_CAP_EXTENDED
(
¥iv
->
ˇ∑bûôõs
))

146 
¥iv
->
ˇ∑bûôõs
 = 0;

148 i‡(
	`SYN_EXT_CAP_REQUESTS
(
¥iv
->
ˇ∑bûôõs
) >= 1) {

149 i‡(
	`sy«±ics_£nd_cmd
(
psmou£
, 
SYN_QUE_EXT_CAPAB
, 
ˇp
)) {

150 
	`¥ötk
(
KERN_ERR
 "Synaptics claimsÅo haveÉxtended capabilities,"

153 
¥iv
->
ext_ˇp
 = (
ˇp
[0] << 16) | (cap[1] << 8) | cap[2];

159 i‡(
	`SYN_CAP_MULTI_BUTTON_NO
(
¥iv
->
ext_ˇp
) > 8)

160 
¥iv
->
ext_ˇp
 &= 0xff0fff;

164 
	}
}

170 
	$sy«±ics_idítify
(
psmou£
 *psmouse)

172 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

173 
id
[3];

175 i‡(
	`sy«±ics_£nd_cmd
(
psmou£
, 
SYN_QUE_IDENTIFY
, 
id
))

177 
¥iv
->
idítôy
 = (
id
[0]<<16) | (id[1]<<8) | id[2];

178 i‡(
	`SYN_ID_IS_SYNAPTICS
(
¥iv
->
idítôy
))

181 
	}
}

183 
	$sy«±ics_quîy_h¨dw¨e
(
psmou£
 *psmouse)

185 i‡(
	`sy«±ics_idítify
(
psmou£
))

187 i‡(
	`sy«±ics_modñ_id
(
psmou£
))

189 i‡(
	`sy«±ics_ˇ∑bûôy
(
psmou£
))

193 
	}
}

195 
	$sy«±ics_£t_absﬁuã_mode
(
psmou£
 *psmouse)

197 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

199 
¥iv
->
mode
 = 
SYN_BIT_ABSOLUTE_MODE
;

200 i‡(
	`SYN_ID_MAJOR
(
¥iv
->
idítôy
) >= 4)

201 
¥iv
->
mode
 |
SYN_BIT_DISABLE_GESTURE
;

202 i‡(
	`SYN_CAP_EXTENDED
(
¥iv
->
ˇ∑bûôõs
))

203 
¥iv
->
mode
 |
SYN_BIT_W_MODE
;

205 i‡(
	`sy«±ics_mode_cmd
(
psmou£
, 
¥iv
->
mode
))

209 
	}
}

211 
	$sy«±ics_£t_øã
(
psmou£
 *psmou£, 
øã
)

213 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

215 i‡(
øã
 >= 80) {

216 
¥iv
->
mode
 |
SYN_BIT_HIGH_RATE
;

217 
psmou£
->
øã
 = 80;

219 
¥iv
->
mode
 &~
SYN_BIT_HIGH_RATE
;

220 
psmou£
->
øã
 = 40;

223 
	`sy«±ics_mode_cmd
(
psmou£
, 
¥iv
->
mode
);

224 
	}
}

229 
	$sy«±ics_±_wrôe
(
£rio
 *£rio, 
c
)

231 
psmou£
 *
∑ª¡
 = 
	`£rio_gë_drvd©a
(
£rio
->parent);

232 
øã_∑øm
 = 
SYN_PS_CLIENT_CMD
;

234 i‡(
	`psmou£_¶i˚d_comm™d
(
∑ª¡
, 
c
))

236 i‡(
	`ps2_comm™d
(&
∑ª¡
->
ps2dev
, &
øã_∑øm
, 
PSMOUSE_CMD_SETRATE
))

239 
	}
}

241 
ölöe
 
	$sy«±ics_is_±_∑ckë
(*
buf
)

243  (
buf
[0] & 0xFC) == 0x84 && (buf[3] & 0xCC) == 0xC4;

244 
	}
}

246 
	$sy«±ics_∑ss_±_∑ckë
(
£rio
 *
±p‹t
, *
∑ckë
)

248 
psmou£
 *
chûd
 = 
	`£rio_gë_drvd©a
(
±p‹t
);

250 i‡(
chûd
 && chûd->
°©e
 =
PSMOUSE_ACTIVATED
) {

251 
	`£rio_öãºu±
(
±p‹t
, 
∑ckë
[1], 0);

252 
	`£rio_öãºu±
(
±p‹t
, 
∑ckë
[4], 0);

253 
	`£rio_öãºu±
(
±p‹t
, 
∑ckë
[5], 0);

254 i‡(
chûd
->
pktsize
 == 4)

255 
	`£rio_öãºu±
(
±p‹t
, 
∑ckë
[2], 0);

257 
	`£rio_öãºu±
(
±p‹t
, 
∑ckë
[1], 0);

258 
	}
}

260 
	$sy«±ics_±_a˘iv©e
(
psmou£
 *psmouse)

262 
£rio
 *
±p‹t
 = 
psmou£
->
ps2dev
.£rio->
chûd
;

263 
psmou£
 *
chûd
 = 
	`£rio_gë_drvd©a
(
±p‹t
);

264 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

267 i‡(
chûd
) {

268 i‡(
chûd
->
pktsize
 == 4)

269 
¥iv
->
mode
 |
SYN_BIT_FOUR_BYTE_CLIENT
;

271 
¥iv
->
mode
 &~
SYN_BIT_FOUR_BYTE_CLIENT
;

273 i‡(
	`sy«±ics_mode_cmd
(
psmou£
, 
¥iv
->
mode
))

274 
	`¥ötk
(
KERN_INFO
 "synaptics: failedÅo switch guestÖrotocol\n");

276 
	}
}

278 
	$sy«±ics_±_¸óã
(
psmou£
 *psmouse)

280 
£rio
 *serio;

282 
£rio
 = 
	`kzÆloc
((£rio), 
GFP_KERNEL
);

283 i‡(!
£rio
) {

284 
	`¥ötk
(
KERN_ERR
 "synaptics:ÇotÉnough memoryÅoállocateÖass-throughÖort\n");

288 
£rio
->
id
.
ty≥
 = 
SERIO_PS_PSTHRU
;

289 
	`°æ˝y
(
£rio
->
«me
, "SynapticsÖass-through", (serio->name));

290 
	`°æ˝y
(
£rio
->
phys
, "sy«±ics-±/£rio0", (£rio->
«me
));

291 
£rio
->
wrôe
 = 
sy«±ics_±_wrôe
;

292 
£rio
->
∑ª¡
 = 
psmou£
->
ps2dev
.serio;

294 
psmou£
->
±_a˘iv©e
 = 
sy«±ics_±_a˘iv©e
;

296 
	`¥ötk
(
KERN_INFO
 "£rio: %†p‹à© %s\n", 
£rio
->
«me
, 
psmou£
->
phys
);

297 
	`£rio_ªgi°î_p‹t
(
£rio
);

298 
	}
}

304 
	$sy«±ics_∑r£_hw_°©e
(
buf
[], 
sy«±ics_d©a
 *
¥iv
, 
sy«±ics_hw_°©e
 *
hw
)

306 
	`mem£t
(
hw
, 0, (
sy«±ics_hw_°©e
));

308 i‡(
	`SYN_MODEL_NEWABS
(
¥iv
->
modñ_id
)) {

309 
hw
->
x
 = (((
buf
[3] & 0x10) << 8) |

310 ((
buf
[1] & 0x0f) << 8) |

311 
buf
[4]);

312 
hw
->
y
 = (((
buf
[3] & 0x20) << 7) |

313 ((
buf
[1] & 0xf0) << 4) |

314 
buf
[5]);

316 
hw
->
z
 = 
buf
[2];

317 
hw
->
w
 = (((
buf
[0] & 0x30) >> 2) |

318 ((
buf
[0] & 0x04) >> 1) |

319 ((
buf
[3] & 0x04) >> 2));

321 
hw
->
À·
 = (
buf
[0] & 0x01) ? 1 : 0;

322 
hw
->
right
 = (
buf
[0] & 0x02) ? 1 : 0;

324 i‡(
	`SYN_CAP_MIDDLE_BUTTON
(
¥iv
->
ˇ∑bûôõs
)) {

325 
hw
->
middÀ
 = ((
buf
[0] ^ buf[3]) & 0x01) ? 1 : 0;

326 i‡(
hw
->
w
 == 2)

327 
hw
->
s¸ﬁl
 = (sig√d )(
buf
[1]);

330 i‡(
	`SYN_CAP_FOUR_BUTTON
(
¥iv
->
ˇ∑bûôõs
)) {

331 
hw
->
up
 = ((
buf
[0] ^ buf[3]) & 0x01) ? 1 : 0;

332 
hw
->
down
 = ((
buf
[0] ^ buf[3]) & 0x02) ? 1 : 0;

335 i‡(
	`SYN_CAP_MULTI_BUTTON_NO
(
¥iv
->
ext_ˇp
) &&

336 ((
buf
[0] ^ buf[3]) & 0x02)) {

337 
	`SYN_CAP_MULTI_BUTTON_NO
(
¥iv
->
ext_ˇp
) & ~0x01) {

345 
hw
->
ext_buâ⁄s
 |((
buf
[5] & 0x08)) ? 0x80 : 0;

346 
hw
->
ext_buâ⁄s
 |((
buf
[4] & 0x08)) ? 0x40 : 0;

348 
hw
->
ext_buâ⁄s
 |((
buf
[5] & 0x04)) ? 0x20 : 0;

349 
hw
->
ext_buâ⁄s
 |((
buf
[4] & 0x04)) ? 0x10 : 0;

351 
hw
->
ext_buâ⁄s
 |((
buf
[5] & 0x02)) ? 0x08 : 0;

352 
hw
->
ext_buâ⁄s
 |((
buf
[4] & 0x02)) ? 0x04 : 0;

354 
hw
->
ext_buâ⁄s
 |((
buf
[5] & 0x01)) ? 0x02 : 0;

355 
hw
->
ext_buâ⁄s
 |((
buf
[4] & 0x01)) ? 0x01 : 0;

359 
hw
->
x
 = (((
buf
[1] & 0x1f) << 8) | buf[2]);

360 
hw
->
y
 = (((
buf
[4] & 0x1f) << 8) | buf[5]);

362 
hw
->
z
 = (((
buf
[0] & 0x30) << 2) | (buf[3] & 0x3F));

363 
hw
->
w
 = (((
buf
[1] & 0x80) >> 4) | ((buf[0] & 0x04) >> 1));

365 
hw
->
À·
 = (
buf
[0] & 0x01) ? 1 : 0;

366 
hw
->
right
 = (
buf
[0] & 0x02) ? 1 : 0;

368 
	}
}

373 
	$sy«±ics_¥o˚ss_∑ckë
(
psmou£
 *psmouse)

375 
öput_dev
 *
dev
 = 
psmou£
->dev;

376 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

377 
sy«±ics_hw_°©e
 
hw
;

378 
num_fögîs
;

379 
fögî_width
;

380 
i
;

382 
	`sy«±ics_∑r£_hw_°©e
(
psmou£
->
∑ckë
, 
¥iv
, &
hw
);

384 i‡(
hw
.
s¸ﬁl
) {

385 
¥iv
->
s¸ﬁl
 +
hw
.scroll;

387 
¥iv
->
s¸ﬁl
 >= 4) {

388 
	`öput_ªp‹t_key
(
dev
, 
BTN_BACK
, !
hw
.
down
);

389 
	`öput_sync
(
dev
);

390 
	`öput_ªp‹t_key
(
dev
, 
BTN_BACK
, 
hw
.
down
);

391 
	`öput_sync
(
dev
);

392 
¥iv
->
s¸ﬁl
 -= 4;

394 
¥iv
->
s¸ﬁl
 <= -4) {

395 
	`öput_ªp‹t_key
(
dev
, 
BTN_FORWARD
, !
hw
.
up
);

396 
	`öput_sync
(
dev
);

397 
	`öput_ªp‹t_key
(
dev
, 
BTN_FORWARD
, 
hw
.
up
);

398 
	`öput_sync
(
dev
);

399 
¥iv
->
s¸ﬁl
 += 4;

404 i‡(
hw
.
z
 > 0) {

405 
num_fögîs
 = 1;

406 
fögî_width
 = 5;

407 i‡(
	`SYN_CAP_EXTENDED
(
¥iv
->
ˇ∑bûôõs
)) {

408 
hw
.
w
) {

410 i‡(
	`SYN_CAP_MULTIFINGER
(
¥iv
->
ˇ∑bûôõs
))

411 
num_fögîs
 = 
hw
.
w
 + 2;

414 i‡(
	`SYN_MODEL_PEN
(
¥iv
->
modñ_id
))

418 i‡(
	`SYN_CAP_PALMDETECT
(
¥iv
->
ˇ∑bûôõs
))

419 
fögî_width
 = 
hw
.
w
;

424 
num_fögîs
 = 0;

425 
fögî_width
 = 0;

432 i‡(
hw
.
z
 > 30Ë
	`öput_ªp‹t_key
(
dev
, 
BTN_TOUCH
, 1);

433 i‡(
hw
.
z
 < 25Ë
	`öput_ªp‹t_key
(
dev
, 
BTN_TOUCH
, 0);

435 i‡(
hw
.
z
 > 0) {

436 
	`öput_ªp‹t_abs
(
dev
, 
ABS_X
, 
hw
.
x
);

437 
	`öput_ªp‹t_abs
(
dev
, 
ABS_Y
, 
YMAX_NOMINAL
 + 
YMIN_NOMINAL
 - 
hw
.
y
);

439 
	`öput_ªp‹t_abs
(
dev
, 
ABS_PRESSURE
, 
hw
.
z
);

441 
	`öput_ªp‹t_abs
(
dev
, 
ABS_TOOL_WIDTH
, 
fögî_width
);

442 
	`öput_ªp‹t_key
(
dev
, 
BTN_TOOL_FINGER
, 
num_fögîs
 == 1);

443 
	`öput_ªp‹t_key
(
dev
, 
BTN_LEFT
, 
hw
.
À·
);

444 
	`öput_ªp‹t_key
(
dev
, 
BTN_RIGHT
, 
hw
.
right
);

446 i‡(
	`SYN_CAP_MULTIFINGER
(
¥iv
->
ˇ∑bûôõs
)) {

447 
	`öput_ªp‹t_key
(
dev
, 
BTN_TOOL_DOUBLETAP
, 
num_fögîs
 == 2);

448 
	`öput_ªp‹t_key
(
dev
, 
BTN_TOOL_TRIPLETAP
, 
num_fögîs
 == 3);

451 i‡(
	`SYN_CAP_MIDDLE_BUTTON
(
¥iv
->
ˇ∑bûôõs
))

452 
	`öput_ªp‹t_key
(
dev
, 
BTN_MIDDLE
, 
hw
.
middÀ
);

454 i‡(
	`SYN_CAP_FOUR_BUTTON
(
¥iv
->
ˇ∑bûôõs
)) {

455 
	`öput_ªp‹t_key
(
dev
, 
BTN_FORWARD
, 
hw
.
up
);

456 
	`öput_ªp‹t_key
(
dev
, 
BTN_BACK
, 
hw
.
down
);

459 
i
 = 0; i < 
	`SYN_CAP_MULTI_BUTTON_NO
(
¥iv
->
ext_ˇp
); i++)

460 
	`öput_ªp‹t_key
(
dev
, 
BTN_0
 + 
i
, 
hw
.
ext_buâ⁄s
 & (1 << i));

462 
	`öput_sync
(
dev
);

463 
	}
}

465 
	$sy«±ics_vÆid©e_byã
(
∑ckë
[], 
idx
, 
pkt_ty≥
)

467 c⁄° 
√wabs_mask
[] = { 0xC8, 0x00, 0x00, 0xC8, 0x00 };

468 c⁄° 
√wabs_ªl_mask
[] = { 0xC0, 0x00, 0x00, 0xC0, 0x00 };

469 c⁄° 
√wabs_r¶t
[] = { 0x80, 0x00, 0x00, 0xC0, 0x00 };

470 c⁄° 
ﬁdabs_mask
[] = { 0xC0, 0x60, 0x00, 0xC0, 0x60 };

471 c⁄° 
ﬁdabs_r¶t
[] = { 0xC0, 0x00, 0x00, 0x80, 0x00 };

473 i‡(
idx
 < 0 || idx > 4)

476 
pkt_ty≥
) {

477 
SYN_NEWABS
:

478 
SYN_NEWABS_RELAXED
:

479  (
∑ckë
[
idx
] & 
√wabs_ªl_mask
[idx]Ë=
√wabs_r¶t
[idx];

481 
SYN_NEWABS_STRICT
:

482  (
∑ckë
[
idx
] & 
√wabs_mask
[idx]Ë=
√wabs_r¶t
[idx];

484 
SYN_OLDABS
:

485  (
∑ckë
[
idx
] & 
ﬁdabs_mask
[idx]Ë=
ﬁdabs_r¶t
[idx];

488 
	`¥ötk
(
KERN_ERR
 "sy«±ics: unknow¿∑ckëÅy≥ %d\n", 
pkt_ty≥
);

491 
	}
}

493 
	$sy«±ics_dëe˘_pkt_ty≥
(
psmou£
 *psmouse)

495 
i
;

497 
i
 = 0; i < 5; i++)

498 i‡(!
	`sy«±ics_vÆid©e_byã
(
psmou£
->
∑ckë
, 
i
, 
SYN_NEWABS_STRICT
)) {

499 
	`¥ötk
(
KERN_INFO
 "synaptics: usingÑelaxedÖacket validation\n");

500  
SYN_NEWABS_RELAXED
;

503  
SYN_NEWABS_STRICT
;

504 
	}
}

506 
psmou£_ªt_t
 
	$sy«±ics_¥o˚ss_byã
(
psmou£
 *psmouse)

508 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

510 i‡(
psmou£
->
pkt˙t
 >= 6) {

511 i‡(
	`u∆ikñy
(
¥iv
->
pkt_ty≥
 =
SYN_NEWABS
))

512 
¥iv
->
pkt_ty≥
 = 
	`sy«±ics_dëe˘_pkt_ty≥
(
psmou£
);

514 i‡(
	`SYN_CAP_PASS_THROUGH
(
¥iv
->
ˇ∑bûôõs
Ë&& 
	`sy«±ics_is_±_∑ckë
(
psmou£
->
∑ckë
)) {

515 i‡(
psmou£
->
ps2dev
.
£rio
->
chûd
)

516 
	`sy«±ics_∑ss_±_∑ckë
(
psmou£
->
ps2dev
.
£rio
->
chûd
,Ösmou£->
∑ckë
);

518 
	`sy«±ics_¥o˚ss_∑ckë
(
psmou£
);

520  
PSMOUSE_FULL_PACKET
;

523  
	`sy«±ics_vÆid©e_byã
(
psmou£
->
∑ckë
,Ösmou£->
pkt˙t
 - 1, 
¥iv
->
pkt_ty≥
) ?

524 
PSMOUSE_GOOD_DATA
 : 
PSMOUSE_BAD_DATA
;

525 
	}
}

530 
	$£t_öput_∑øms
(
öput_dev
 *
dev
, 
sy«±ics_d©a
 *
¥iv
)

532 
i
;

534 
	`£t_bô
(
EV_ABS
, 
dev
->
evbô
);

535 
	`öput_£t_abs_∑øms
(
dev
, 
ABS_X
, 
XMIN_NOMINAL
, 
XMAX_NOMINAL
, 0, 0);

536 
	`öput_£t_abs_∑øms
(
dev
, 
ABS_Y
, 
YMIN_NOMINAL
, 
YMAX_NOMINAL
, 0, 0);

537 
	`öput_£t_abs_∑øms
(
dev
, 
ABS_PRESSURE
, 0, 255, 0, 0);

538 
	`£t_bô
(
ABS_TOOL_WIDTH
, 
dev
->
absbô
);

540 
	`£t_bô
(
EV_KEY
, 
dev
->
evbô
);

541 
	`£t_bô
(
BTN_TOUCH
, 
dev
->
keybô
);

542 
	`£t_bô
(
BTN_TOOL_FINGER
, 
dev
->
keybô
);

543 
	`£t_bô
(
BTN_LEFT
, 
dev
->
keybô
);

544 
	`£t_bô
(
BTN_RIGHT
, 
dev
->
keybô
);

546 i‡(
	`SYN_CAP_MULTIFINGER
(
¥iv
->
ˇ∑bûôõs
)) {

547 
	`£t_bô
(
BTN_TOOL_DOUBLETAP
, 
dev
->
keybô
);

548 
	`£t_bô
(
BTN_TOOL_TRIPLETAP
, 
dev
->
keybô
);

551 i‡(
	`SYN_CAP_MIDDLE_BUTTON
(
¥iv
->
ˇ∑bûôõs
))

552 
	`£t_bô
(
BTN_MIDDLE
, 
dev
->
keybô
);

554 i‡(
	`SYN_CAP_FOUR_BUTTON
(
¥iv
->
ˇ∑bûôõs
) ||

555 
	`SYN_CAP_MIDDLE_BUTTON
(
¥iv
->
ˇ∑bûôõs
)) {

556 
	`£t_bô
(
BTN_FORWARD
, 
dev
->
keybô
);

557 
	`£t_bô
(
BTN_BACK
, 
dev
->
keybô
);

560 
i
 = 0; i < 
	`SYN_CAP_MULTI_BUTTON_NO
(
¥iv
->
ext_ˇp
); i++)

561 
	`£t_bô
(
BTN_0
 + 
i
, 
dev
->
keybô
);

563 
	`˛ór_bô
(
EV_REL
, 
dev
->
evbô
);

564 
	`˛ór_bô
(
REL_X
, 
dev
->
ªlbô
);

565 
	`˛ór_bô
(
REL_Y
, 
dev
->
ªlbô
);

566 
	}
}

568 
	$sy«±ics_disc⁄√˘
(
psmou£
 *psmouse)

570 
	`sy«±ics_ª£t
(
psmou£
);

571 
	`k‰ì
(
psmou£
->
¥iv©e
);

572 
psmou£
->
¥iv©e
 = 
NULL
;

573 
	}
}

575 
	$sy«±ics_ªc⁄√˘
(
psmou£
 *psmouse)

577 
sy«±ics_d©a
 *
¥iv
 = 
psmou£
->
¥iv©e
;

578 
sy«±ics_d©a
 
ﬁd_¥iv
 = *
¥iv
;

580 
	`psmou£_ª£t
(
psmou£
);

582 i‡(
	`sy«±ics_dëe˘
(
psmou£
, 0))

585 i‡(
	`sy«±ics_quîy_h¨dw¨e
(
psmou£
)) {

586 
	`¥ötk
(
KERN_ERR
 "UnableÅo query Synaptics hardware.\n");

590 i‡(
ﬁd_¥iv
.
idítôy
 !
¥iv
->identity ||

591 
ﬁd_¥iv
.
modñ_id
 !
¥iv
->model_id ||

592 
ﬁd_¥iv
.
ˇ∑bûôõs
 !
¥iv
->capabilities ||

593 
ﬁd_¥iv
.
ext_ˇp
 !
¥iv
->ext_cap)

596 i‡(
	`sy«±ics_£t_absﬁuã_mode
(
psmou£
)) {

597 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize Synaptics hardware.\n");

602 
	}
}

604 #i‡
deföed
(
__i386__
)

605 
	~<löux/dmi.h
>

606 c⁄° 
dmi_sy°em_id
 
	gtoshiba_dmi_èbÀ
[] = {

608 .
idít
 = "Toshiba Satellite",

609 .
	gm©ches
 = {

610 
DMI_MATCH
(
DMI_SYS_VENDOR
, "TOSHIBA"),

611 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "Satellite"),

615 .
	gidít
 = "Toshiba Dynabook",

616 .
	gm©ches
 = {

617 
DMI_MATCH
(
DMI_SYS_VENDOR
, "TOSHIBA"),

618 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "dynabook"),

622 .
	gidít
 = "Toshiba Portege M300",

623 .
	gm©ches
 = {

624 
DMI_MATCH
(
DMI_SYS_VENDOR
, "TOSHIBA"),

625 
DMI_MATCH
(
DMI_PRODUCT_NAME
, "PORTEGE M300"),

632 
	$sy«±ics_öô
(
psmou£
 *psmouse)

634 
sy«±ics_d©a
 *
¥iv
;

636 
psmou£
->
¥iv©e
 = 
¥iv
 = 
	`kzÆloc
((
sy«±ics_d©a
), 
GFP_KERNEL
);

637 i‡(!
¥iv
)

640 
	`psmou£_ª£t
(
psmou£
);

642 i‡(
	`sy«±ics_quîy_h¨dw¨e
(
psmou£
)) {

643 
	`¥ötk
(
KERN_ERR
 "UnableÅo query Synaptics hardware.\n");

644 
öô_Áû
;

647 i‡(
	`sy«±ics_£t_absﬁuã_mode
(
psmou£
)) {

648 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize Synaptics hardware.\n");

649 
öô_Áû
;

652 
¥iv
->
pkt_ty≥
 = 
	`SYN_MODEL_NEWABS
’riv->
modñ_id
Ë? 
SYN_NEWABS
 : 
SYN_OLDABS
;

654 
	`¥ötk
(
KERN_INFO
 "Synaptics Touchpad, model: %ld, fw: %ld.%ld, id: %#lx, caps: %#lx/%#lx\n",

655 
	`SYN_ID_MODEL
(
¥iv
->
idítôy
),

656 
	`SYN_ID_MAJOR
(
¥iv
->
idítôy
), 
	`SYN_ID_MINOR
(priv->identity),

657 
¥iv
->
modñ_id
,Öriv->
ˇ∑bûôõs
,Öriv->
ext_ˇp
);

659 
	`£t_öput_∑øms
(
psmou£
->
dev
, 
¥iv
);

668 
psmou£
->
modñ
 = ((
¥iv
->
modñ_id
 & 0x00ff0000) >> 8) |

669 (
¥iv
->
modñ_id
 & 0x000000ff);

671 
psmou£
->
¥Ÿocﬁ_h™dÀr
 = 
sy«±ics_¥o˚ss_byã
;

672 
psmou£
->
£t_øã
 = 
sy«±ics_£t_øã
;

673 
psmou£
->
disc⁄√˘
 = 
sy«±ics_disc⁄√˘
;

674 
psmou£
->
ªc⁄√˘
 = 
sy«±ics_ªc⁄√˘
;

675 
psmou£
->
˛ónup
 = 
sy«±ics_ª£t
;

676 
psmou£
->
pktsize
 = 6;

678 
psmou£
->
ªsync_time
 = 0;

680 i‡(
	`SYN_CAP_PASS_THROUGH
(
¥iv
->
ˇ∑bûôõs
))

681 
	`sy«±ics_±_¸óã
(
psmou£
);

683 #i‡
	`deföed
(
__i386__
)

689 i‡(
psmou£
->
øã
 >80 && 
	`dmi_check_sy°em
(
toshiba_dmi_èbÀ
)) {

690 
	`¥ötk
(
KERN_INFO
 "synaptics: Toshiba %s detected,ÜimitingÑateÅo 40pps.\n",

691 
	`dmi_gë_sy°em_öfo
(
DMI_PRODUCT_NAME
));

692 
psmou£
->
øã
 = 40;

698 
öô_Áû
:

699 
	`k‰ì
(
¥iv
);

701 
	}
}

705 
	$sy«±ics_öô
(
psmou£
 *psmouse)

707  -
ENOSYS
;

708 
	}
}

	@synaptics.h

9 #i‚de‡
_SYNAPTICS_H


10 
	#_SYNAPTICS_H


	)

13 
	#SYN_QUE_IDENTIFY
 0x00

	)

14 
	#SYN_QUE_MODES
 0x01

	)

15 
	#SYN_QUE_CAPABILITIES
 0x02

	)

16 
	#SYN_QUE_MODEL
 0x03

	)

17 
	#SYN_QUE_SERIAL_NUMBER_PREFIX
 0x06

	)

18 
	#SYN_QUE_SERIAL_NUMBER_SUFFIX
 0x07

	)

19 
	#SYN_QUE_RESOLUTION
 0x08

	)

20 
	#SYN_QUE_EXT_CAPAB
 0x09

	)

23 
	#SYN_BIT_ABSOLUTE_MODE
 (1 << 7)

	)

24 
	#SYN_BIT_HIGH_RATE
 (1 << 6)

	)

25 
	#SYN_BIT_SLEEP_MODE
 (1 << 3)

	)

26 
	#SYN_BIT_DISABLE_GESTURE
 (1 << 2)

	)

27 
	#SYN_BIT_FOUR_BYTE_CLIENT
 (1 << 1)

	)

28 
	#SYN_BIT_W_MODE
 (1 << 0)

	)

31 
	#SYN_MODEL_ROT180
(
m
Ë((mË& (1 << 23))

	)

32 
	#SYN_MODEL_PORTRAIT
(
m
Ë((mË& (1 << 22))

	)

33 
	#SYN_MODEL_SENSOR
(
m
Ë(((mË>> 16Ë& 0x3f)

	)

34 
	#SYN_MODEL_HARDWARE
(
m
Ë(((mË>> 9Ë& 0x7f)

	)

35 
	#SYN_MODEL_NEWABS
(
m
Ë((mË& (1 << 7))

	)

36 
	#SYN_MODEL_PEN
(
m
Ë((mË& (1 << 6))

	)

37 
	#SYN_MODEL_SIMPLIC
(
m
Ë((mË& (1 << 5))

	)

38 
	#SYN_MODEL_GEOMETRY
(
m
Ë((mË& 0x0f)

	)

41 
	#SYN_CAP_EXTENDED
(
c
Ë((cË& (1 << 23))

	)

42 
	#SYN_CAP_MIDDLE_BUTTON
(
c
Ë((cË& (1 << 18))

	)

43 
	#SYN_CAP_PASS_THROUGH
(
c
Ë((cË& (1 << 7))

	)

44 
	#SYN_CAP_SLEEP
(
c
Ë((cË& (1 << 4))

	)

45 
	#SYN_CAP_FOUR_BUTTON
(
c
Ë((cË& (1 << 3))

	)

46 
	#SYN_CAP_MULTIFINGER
(
c
Ë((cË& (1 << 1))

	)

47 
	#SYN_CAP_PALMDETECT
(
c
Ë((cË& (1 << 0))

	)

48 
	#SYN_CAP_VALID
(
c
Ë((((cË& 0x00ff00Ë>> 8Ë=0x47)

	)

49 
	#SYN_EXT_CAP_REQUESTS
(
c
Ë(((cË& 0x700000Ë>> 20)

	)

50 
	#SYN_CAP_MULTI_BUTTON_NO
(
ec
Ë((”cË& 0x00f000Ë>> 12)

	)

53 
	#SYN_MODE_ABSOLUTE
(
m
Ë((mË& (1 << 7))

	)

54 
	#SYN_MODE_RATE
(
m
Ë((mË& (1 << 6))

	)

55 
	#SYN_MODE_BAUD_SLEEP
(
m
Ë((mË& (1 << 3))

	)

56 
	#SYN_MODE_DISABLE_GESTURE
(
m
Ë((mË& (1 << 2))

	)

57 
	#SYN_MODE_PACKSIZE
(
m
Ë((mË& (1 << 1))

	)

58 
	#SYN_MODE_WMODE
(
m
Ë((mË& (1 << 0))

	)

61 
	#SYN_ID_MODEL
(
i
Ë(((iË>> 4Ë& 0x0f)

	)

62 
	#SYN_ID_MAJOR
(
i
Ë((iË& 0x0f)

	)

63 
	#SYN_ID_MINOR
(
i
Ë(((iË>> 16Ë& 0xff)

	)

64 
	#SYN_ID_IS_SYNAPTICS
(
i
Ë((((iË>> 8Ë& 0xffË=0x47)

	)

67 
	#SYN_PS_SET_MODE2
 0x14

	)

68 
	#SYN_PS_CLIENT_CMD
 0x28

	)

71 
	#SYN_NEWABS
 0

	)

72 
	#SYN_NEWABS_STRICT
 1

	)

73 
	#SYN_NEWABS_RELAXED
 2

	)

74 
	#SYN_OLDABS
 3

	)

80 
	ssy«±ics_hw_°©e
 {

81 
	mx
;

82 
	my
;

83 
	mz
;

84 
	mw
;

85 
	mÀ·
:1;

86 
	mright
:1;

87 
	mmiddÀ
:1;

88 
	mup
:1;

89 
	mdown
:1;

90 
	mext_buâ⁄s
;

91 sig√d 
	ms¸ﬁl
;

94 
	ssy«±ics_d©a
 {

96 
	mmodñ_id
;

97 
	mˇ∑bûôõs
;

98 
	mext_ˇp
;

99 
	midítôy
;

101 
	mpkt_ty≥
;

102 
	mmode
;

103 
	ms¸ﬁl
;

106 
sy«±ics_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

107 
sy«±ics_öô
(
psmou£
 *psmouse);

108 
sy«±ics_ª£t
(
psmou£
 *psmouse);

	@touchkit_ps2.h

12 #i‚de‡
_TOUCHKIT_PS2_H


13 
	#_TOUCHKIT_PS2_H


	)

15 #ifde‡
CONFIG_MOUSE_PS2_TOUCHKIT


16 
touchkô_ps2_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

18 
ölöe
 
	$touchkô_ps2_dëe˘
(
psmou£
 *psmouse,

19 
£t_¥›îtõs
)

21  -
ENOSYS
;

22 
	}
}

	@trackpoint.c

11 
	~<löux/dñay.h
>

12 
	~<löux/£rio.h
>

13 
	~<löux/moduÀ.h
>

14 
	~<löux/öput.h
>

15 
	~<löux/libps2.h
>

16 
	~<löux/¥oc_fs.h
>

17 
	~<asm/uac˚ss.h
>

18 
	~"psmou£.h
"

19 
	~"åackpoöt.h
"

24 
	$åackpoöt_ªad
(
ps2dev
 *ps2dev, 
loc
, *
ªsu…s
)

26 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
TP_COMMAND
)) ||

27 
	`ps2_comm™d
(
ps2dev
, 
ªsu…s
, 
	`MAKE_PS2_CMD
(0, 1, 
loc
))) {

32 
	}
}

34 
	$åackpoöt_wrôe
(
ps2dev
 *ps2dev, 
loc
, 
vÆ
)

36 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
TP_COMMAND
)) ||

37 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
TP_WRITE_MEM
)) ||

38 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
loc
)) ||

39 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
vÆ
))) {

44 
	}
}

46 
	$åackpoöt_toggÀ_bô
(
ps2dev
 *ps2dev, 
loc
, 
mask
)

49 i‡(
loc
 < 0x20 ||Üoc >= 0x2F)

52 i‡(
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
TP_COMMAND
)) ||

53 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
TP_TOGGLE
)) ||

54 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
loc
)) ||

55 
	`ps2_comm™d
(
ps2dev
, 
NULL
, 
	`MAKE_PS2_CMD
(0, 0, 
mask
))) {

60 
	}
}

66 
	såackpoöt_©å_d©a
 {

67 
size_t
 
	mfõld_off£t
;

68 
	mcomm™d
;

69 
	mmask
;

70 
	mövîãd
;

73 
ssize_t
 
	$åackpoöt_show_öt_©å
(
psmou£
 *psmou£, *
d©a
, *
buf
)

75 
åackpoöt_d©a
 *
ç
 = 
psmou£
->
¥iv©e
;

76 
åackpoöt_©å_d©a
 *
©å
 = 
d©a
;

77 
vÆue
 = *(*)((*)
ç
 + 
©å
->
fõld_off£t
);

79 i‡(
©å
->
övîãd
)

80 
vÆue
 = !value;

82  
	`•rötf
(
buf
, "%u\n", 
vÆue
);

83 
	}
}

85 
ssize_t
 
	$åackpoöt_£t_öt_©å
(
psmou£
 *psmou£, *
d©a
,

86 c⁄° *
buf
, 
size_t
 
cou¡
)

88 
åackpoöt_d©a
 *
ç
 = 
psmou£
->
¥iv©e
;

89 
åackpoöt_©å_d©a
 *
©å
 = 
d©a
;

90 *
fõld
 = (*)((*)
ç
 + 
©å
->
fõld_off£t
);

91 
vÆue
;

93 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
) || value > 255)

94  -
EINVAL
;

96 *
fõld
 = 
vÆue
;

97 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
©å
->
comm™d
, 
vÆue
);

99  
cou¡
;

100 
	}
}

102 
	#TRACKPOINT_INT_ATTR
(
_«me
, 
_comm™d
) \

103 
åackpoöt_©å_d©a
 
åackpoöt_©å_
##
_«me
 = { \

104 .
fõld_off£t
 = 
	`off£tof
(
åackpoöt_d©a
, 
_«me
), \

105 .
comm™d
 = 
_comm™d
, \

107 
	`PSMOUSE_DEFINE_ATTR
(
_«me
, 
S_IWUSR
 | 
S_IRUGO
, \

108 &
åackpoöt_©å_
##
_«me
, \

109 
åackpoöt_show_öt_©å
, 
åackpoöt_£t_öt_©å
)

	)

111 
ssize_t
 
	$åackpoöt_£t_bô_©å
(
psmou£
 *psmou£, *
d©a
,

112 c⁄° *
buf
, 
size_t
 
cou¡
)

114 
åackpoöt_d©a
 *
ç
 = 
psmou£
->
¥iv©e
;

115 
åackpoöt_©å_d©a
 *
©å
 = 
d©a
;

116 *
fõld
 = (*)((*)
ç
 + 
©å
->
fõld_off£t
);

117 
vÆue
;

119 i‡(
	`°ri˘_°πoul
(
buf
, 10, &
vÆue
) || value > 1)

120  -
EINVAL
;

122 i‡(
©å
->
övîãd
)

123 
vÆue
 = !value;

125 i‡(*
fõld
 !
vÆue
) {

126 *
fõld
 = 
vÆue
;

127 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
©å
->
comm™d
,áâr->
mask
);

130  
cou¡
;

131 
	}
}

134 
	#TRACKPOINT_BIT_ATTR
(
_«me
, 
_comm™d
, 
_mask
, 
_öv
) \

135 
åackpoöt_©å_d©a
 
åackpoöt_©å_
##
_«me
 = { \

136 .
fõld_off£t
 = 
	`off£tof
(
åackpoöt_d©a
, 
_«me
), \

137 .
comm™d
 = 
_comm™d
, \

138 .
mask
 = 
_mask
, \

139 .
övîãd
 = 
_öv
, \

141 
	`PSMOUSE_DEFINE_ATTR
(
_«me
, 
S_IWUSR
 | 
S_IRUGO
, \

142 &
åackpoöt_©å_
##
_«me
, \

143 
åackpoöt_show_öt_©å
, 
åackpoöt_£t_bô_©å
)

	)

145 
TRACKPOINT_INT_ATTR
(
£nsôivôy
, 
TP_SENS
);

146 
TRACKPOINT_INT_ATTR
(
•ìd
, 
TP_SPEED
);

147 
TRACKPOINT_INT_ATTR
(
öîtü
, 
TP_INERTIA
);

148 
TRACKPOINT_INT_ATTR
(
ªach
, 
TP_REACH
);

149 
TRACKPOINT_INT_ATTR
(
døghys
, 
TP_DRAGHYS
);

150 
TRACKPOINT_INT_ATTR
(
mödøg
, 
TP_MINDRAG
);

151 
TRACKPOINT_INT_ATTR
(
thªsh
, 
TP_THRESH
);

152 
TRACKPOINT_INT_ATTR
(
u±hªsh
, 
TP_UP_THRESH
);

153 
TRACKPOINT_INT_ATTR
(
ztime
, 
TP_Z_TIME
);

154 
TRACKPOINT_INT_ATTR
(
jíks
, 
TP_JENKS_CURV
);

156 
TRACKPOINT_BIT_ATTR
(
¥ess_to_£À˘
, 
TP_TOGGLE_PTSON
, 
TP_MASK_PTSON
, 0);

157 
TRACKPOINT_BIT_ATTR
(
skùback
, 
TP_TOGGLE_SKIPBACK
, 
TP_MASK_SKIPBACK
, 0);

158 
TRACKPOINT_BIT_ATTR
(
ext_dev
, 
TP_TOGGLE_EXT_DEV
, 
TP_MASK_EXT_DEV
, 1);

160 
©åibuã
 *
	gåackpoöt_©ås
[] = {

161 &
psmou£_©å_£nsôivôy
.
d©å
.
©å
,

162 &
psmou£_©å_•ìd
.
d©å
.
©å
,

163 &
psmou£_©å_öîtü
.
d©å
.
©å
,

164 &
psmou£_©å_ªach
.
d©å
.
©å
,

165 &
psmou£_©å_døghys
.
d©å
.
©å
,

166 &
psmou£_©å_mödøg
.
d©å
.
©å
,

167 &
psmou£_©å_thªsh
.
d©å
.
©å
,

168 &
psmou£_©å_u±hªsh
.
d©å
.
©å
,

169 &
psmou£_©å_ztime
.
d©å
.
©å
,

170 &
psmou£_©å_jíks
.
d©å
.
©å
,

171 &
psmou£_©å_¥ess_to_£À˘
.
d©å
.
©å
,

172 &
psmou£_©å_skùback
.
d©å
.
©å
,

173 &
psmou£_©å_ext_dev
.
d©å
.
©å
,

174 
NULL


177 
©åibuã_group
 
	gåackpoöt_©å_group
 = {

178 .
©ås
 = 
åackpoöt_©ås
,

181 
	$åackpoöt_°¨t_¥Ÿocﬁ
(
psmou£
 *psmou£, *
fúmw¨e_id
)

183 
∑øm
[2] = { 0 };

185 i‡(
	`ps2_comm™d
(&
psmou£
->
ps2dev
, 
∑øm
, 
	`MAKE_PS2_CMD
(0, 2, 
TP_READ_ID
)))

188 i‡(
∑øm
[0] !
TP_MAGIC_IDENT
)

191 i‡(
fúmw¨e_id
)

192 *
fúmw¨e_id
 = 
∑øm
[1];

195 
	}
}

197 
	$åackpoöt_sync
(
psmou£
 *psmouse)

199 
åackpoöt_d©a
 *
ç
 = 
psmou£
->
¥iv©e
;

200 
toggÀ
;

203 
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_TWOHAND
, &
toggÀ
);

204 i‡(
toggÀ
 & 
TP_MASK_TWOHAND
)

205 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_TWOHAND
, 
TP_MASK_TWOHAND
);

207 
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_SOURCE_TAG
, &
toggÀ
);

208 i‡(
toggÀ
 & 
TP_MASK_SOURCE_TAG
)

209 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_SOURCE_TAG
, 
TP_MASK_SOURCE_TAG
);

211 
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_MB
, &
toggÀ
);

212 i‡(
toggÀ
 & 
TP_MASK_MB
)

213 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_MB
, 
TP_MASK_MB
);

216 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_SENS
, 
ç
->
£nsôivôy
);

217 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_INERTIA
, 
ç
->
öîtü
);

218 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_SPEED
, 
ç
->
•ìd
);

220 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_REACH
, 
ç
->
ªach
);

221 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_DRAGHYS
, 
ç
->
døghys
);

222 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_MINDRAG
, 
ç
->
mödøg
);

224 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_THRESH
, 
ç
->
thªsh
);

225 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_UP_THRESH
, 
ç
->
u±hªsh
);

227 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_Z_TIME
, 
ç
->
ztime
);

228 
	`åackpoöt_wrôe
(&
psmou£
->
ps2dev
, 
TP_JENKS_CURV
, 
ç
->
jíks
);

230 
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_PTSON
, &
toggÀ
);

231 i‡(((
toggÀ
 & 
TP_MASK_PTSON
Ë=TP_MASK_PTSONË!
ç
->
¥ess_to_£À˘
)

232 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_PTSON
, 
TP_MASK_PTSON
);

234 
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_SKIPBACK
, &
toggÀ
);

235 i‡(((
toggÀ
 & 
TP_MASK_SKIPBACK
Ë=TP_MASK_SKIPBACKË!
ç
->
skùback
)

236 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_SKIPBACK
, 
TP_MASK_SKIPBACK
);

238 
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_EXT_DEV
, &
toggÀ
);

239 i‡(((
toggÀ
 & 
TP_MASK_EXT_DEV
Ë=TP_MASK_EXT_DEVË!
ç
->
ext_dev
)

240 
	`åackpoöt_toggÀ_bô
(&
psmou£
->
ps2dev
, 
TP_TOGGLE_EXT_DEV
, 
TP_MASK_EXT_DEV
);

243 
	}
}

245 
	$åackpoöt_deÁu…s
(
åackpoöt_d©a
 *
ç
)

247 
ç
->
¥ess_to_£À˘
 = 
TP_DEF_PTSON
;

248 
ç
->
£nsôivôy
 = 
TP_DEF_SENS
;

249 
ç
->
•ìd
 = 
TP_DEF_SPEED
;

250 
ç
->
ªach
 = 
TP_DEF_REACH
;

252 
ç
->
døghys
 = 
TP_DEF_DRAGHYS
;

253 
ç
->
mödøg
 = 
TP_DEF_MINDRAG
;

255 
ç
->
thªsh
 = 
TP_DEF_THRESH
;

256 
ç
->
u±hªsh
 = 
TP_DEF_UP_THRESH
;

258 
ç
->
ztime
 = 
TP_DEF_Z_TIME
;

259 
ç
->
jíks
 = 
TP_DEF_JENKS_CURV
;

261 
ç
->
öîtü
 = 
TP_DEF_INERTIA
;

262 
ç
->
skùback
 = 
TP_DEF_SKIPBACK
;

263 
ç
->
ext_dev
 = 
TP_DEF_EXT_DEV
;

264 
	}
}

266 
	$åackpoöt_disc⁄√˘
(
psmou£
 *psmouse)

268 
	`sysfs_ªmove_group
(&
psmou£
->
ps2dev
.
£rio
->
dev
.
kobj
, &
åackpoöt_©å_group
);

270 
	`k‰ì
(
psmou£
->
¥iv©e
);

271 
psmou£
->
¥iv©e
 = 
NULL
;

272 
	}
}

274 
	$åackpoöt_ªc⁄√˘
(
psmou£
 *psmouse)

276 i‡(
	`åackpoöt_°¨t_¥Ÿocﬁ
(
psmou£
, 
NULL
))

279 i‡(
	`åackpoöt_sync
(
psmou£
))

283 
	}
}

285 
	$åackpoöt_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

287 
åackpoöt_d©a
 *
¥iv
;

288 
ps2dev
 *ps2dev = &
psmou£
->ps2dev;

289 
fúmw¨e_id
;

290 
buâ⁄_öfo
;

291 
îr‹
;

293 i‡(
	`åackpoöt_°¨t_¥Ÿocﬁ
(
psmou£
, &
fúmw¨e_id
))

296 i‡(!
£t_¥›îtõs
)

299 i‡(
	`åackpoöt_ªad
(&
psmou£
->
ps2dev
, 
TP_EXT_BTN
, &
buâ⁄_öfo
)) {

300 
	`¥ötk
(
KERN_WARNING
 "trackpoint.c: failedÅo getÉxtended button data\n");

301 
buâ⁄_öfo
 = 0;

304 
psmou£
->
¥iv©e
 = 
¥iv
 = 
	`kzÆloc
((
åackpoöt_d©a
), 
GFP_KERNEL
);

305 i‡(!
¥iv
)

308 
psmou£
->
víd‹
 = "IBM";

309 
psmou£
->
«me
 = "TrackPoint";

311 
psmou£
->
ªc⁄√˘
 = 
åackpoöt_ªc⁄√˘
;

312 
psmou£
->
disc⁄√˘
 = 
åackpoöt_disc⁄√˘
;

314 
	`åackpoöt_deÁu…s
(
¥iv
);

315 
	`åackpoöt_sync
(
psmou£
);

317 
îr‹
 = 
	`sysfs_¸óã_group
(&
ps2dev
->
£rio
->
dev
.
kobj
, &
åackpoöt_©å_group
);

318 i‡(
îr‹
) {

319 
	`¥ötk
(
KERN_ERR


321 
îr‹
);

322 
	`k‰ì
(
¥iv
);

326 
	`¥ötk
(
KERN_INFO
 "IBM TrackPoint firmware: 0x%02x, buttons: %d/%d\n",

327 
fúmw¨e_id
, (
buâ⁄_öfo
 & 0xf0) >> 4, button_info & 0x0f);

330 
	}
}

	@trackpoint.h

11 #i‚de‡
_TRACKPOINT_H


12 
	#_TRACKPOINT_H


	)

21 
	#TP_COMMAND
 0xE2

	)

23 
	#TP_READ_ID
 0xE1

	)

24 
	#TP_MAGIC_IDENT
 0x01

	)

31 
	#TP_RECALIB
 0x51

	)

32 
	#TP_POWER_DOWN
 0x44

	)

33 
	#TP_EXT_DEV
 0x21

	)

34 
	#TP_EXT_BTN
 0x4B

	)

35 
	#TP_POR
 0x7F

	)

36 
	#TP_POR_RESULTS
 0x25

	)

37 
	#TP_DISABLE_EXT
 0x40

	)

38 
	#TP_ENABLE_EXT
 0x41

	)

43 
	#TP_SET_SOFT_TRANS
 0x4E

	)

44 
	#TP_CANCEL_SOFT_TRANS
 0xB9

	)

45 
	#TP_SET_HARD_TRANS
 0x45

	)

51 
	#TP_WRITE_MEM
 0x81

	)

52 
	#TP_READ_MEM
 0x80

	)

57 
	#TP_SENS
 0x4A

	)

58 
	#TP_MB
 0x4C

	)

59 
	#TP_INERTIA
 0x4D

	)

60 
	#TP_SPEED
 0x60

	)

61 
	#TP_REACH
 0x57

	)

62 
	#TP_DRAGHYS
 0x58

	)

66 
	#TP_MINDRAG
 0x59

	)

69 
	#TP_THRESH
 0x5C

	)

70 
	#TP_UP_THRESH
 0x5A

	)

71 
	#TP_Z_TIME
 0x5E

	)

72 
	#TP_JENKS_CURV
 0x5D

	)

77 
	#TP_TOGGLE
 0x47

	)

79 
	#TP_TOGGLE_MB
 0x23

	)

80 
	#TP_MASK_MB
 0x01

	)

81 
	#TP_TOGGLE_EXT_DEV
 0x23

	)

82 
	#TP_MASK_EXT_DEV
 0x02

	)

83 
	#TP_TOGGLE_DRIFT
 0x23

	)

84 
	#TP_MASK_DRIFT
 0x80

	)

85 
	#TP_TOGGLE_BURST
 0x28

	)

86 
	#TP_MASK_BURST
 0x80

	)

87 
	#TP_TOGGLE_PTSON
 0x2C

	)

88 
	#TP_MASK_PTSON
 0x01

	)

89 
	#TP_TOGGLE_HARD_TRANS
 0x2C

	)

90 
	#TP_MASK_HARD_TRANS
 0x80

	)

91 
	#TP_TOGGLE_TWOHAND
 0x2D

	)

92 
	#TP_MASK_TWOHAND
 0x01

	)

93 
	#TP_TOGGLE_STICKY_TWO
 0x2D

	)

94 
	#TP_MASK_STICKY_TWO
 0x04

	)

95 
	#TP_TOGGLE_SKIPBACK
 0x2D

	)

96 
	#TP_MASK_SKIPBACK
 0x08

	)

97 
	#TP_TOGGLE_SOURCE_TAG
 0x20

	)

99 
	#TP_MASK_SOURCE_TAG
 0x80

	)

100 
	#TP_TOGGLE_EXT_TAG
 0x22

	)

102 
	#TP_MASK_EXT_TAG
 0x04

	)

106 
	#TP_POR_SUCCESS
 0x3B

	)

111 
	#TP_DEF_SENS
 0x80

	)

112 
	#TP_DEF_INERTIA
 0x06

	)

113 
	#TP_DEF_SPEED
 0x61

	)

114 
	#TP_DEF_REACH
 0x0A

	)

116 
	#TP_DEF_DRAGHYS
 0xFF

	)

117 
	#TP_DEF_MINDRAG
 0x14

	)

119 
	#TP_DEF_THRESH
 0x08

	)

120 
	#TP_DEF_UP_THRESH
 0xFF

	)

121 
	#TP_DEF_Z_TIME
 0x26

	)

122 
	#TP_DEF_JENKS_CURV
 0x87

	)

125 
	#TP_DEF_MB
 0x00

	)

126 
	#TP_DEF_PTSON
 0x00

	)

127 
	#TP_DEF_SKIPBACK
 0x00

	)

128 
	#TP_DEF_EXT_DEV
 0x00

	)

130 
	#MAKE_PS2_CMD
(
∑øms
, 
ªsu…s
, 
cmd
Ë(’¨ams<<12Ë| (ªsu…s<<8Ë| (cmd))

	)

132 
	såackpoöt_d©a


134 
	m£nsôivôy
, 
	m•ìd
, 
	möîtü
, 
	mªach
;

135 
	mdøghys
, 
	mmödøg
;

136 
	mthªsh
, 
	mu±hªsh
;

137 
	mztime
, 
	mjíks
;

139 
	m¥ess_to_£À˘
;

140 
	mskùback
;

142 
	mext_dev
;

145 #ifde‡
CONFIG_MOUSE_PS2_TRACKPOINT


146 
åackpoöt_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
);

148 
ölöe
 
	$åackpoöt_dëe˘
(
psmou£
 *psmou£, 
£t_¥›îtõs
)

150  -
ENOSYS
;

151 
	}
}

	@../../common/master_top.h

1 #i‚de‡
MASTER_TOP_H


2 
	#MASTER_TOP_H


	)

4 
	#MASSIVE_MEMORY_DEBUGGINg


	)

5 
	#fuŒ_¶ab_vîify
()

	)

7 
od·_åunˇã_ønge_hashèbÀ
();

8 
od·_⁄dem™d_isﬁ©e
(*);

9 
°rcmp
(*, *);

11 
	$logSfiFøme
 (*
wh©
) {

15 i‡(
	`°rcmp
(
wh©
, "pegasus_get_msglevel") == 0)

18 
	}
}

21 
	$logSèckFøme
(*
a
Ë{ 0;
	}
}

22 
	$logSèckV¨
(*
a
Ë{ 0;
	}
}

30 
	#logWrôe
(
a
,
b
,
c
,
d
,
e
Ë0

	)

31 
	#logRód
(
a
,
b
,
c
,
d
,
e
Ë0

	)

38 
	$logAŒoc
(*
addr
 , 
size
 , *
‚
, *
fûe
 , *
Æloc‚
, 
löe
 ) {

40 
	}
}

42 
	$logFªe
(*
addr
 , *
‚
 , *
fûe
 , *
Æloc‚
 , 
löe
 ) {

44 
	}
}

57 *
kmÆloc
(
size_t
, 
gÂ_t
);

65 c⁄°

	)

70 
	~"fuŒ_¶ab_vîify.h
"

75 
	#nooks_Ÿ_ªgi°î_kîn‚_w
(
X
, 
Y
) \

77 
	`nooks_Ÿ_ªgi°î_kîn‚
 (
g_nooks_èbÀ
, ((*Ë
X
), 
Y
); \

78 } 0)

	)

80 
	#nooks_Ÿ_lookup_kîn_w
(
X
, 
Y
, 
Z
) \

82 
	`nooks_Ÿ_lookup_kîn
 (
g_nooks_èbÀ
, 
X
, 
Y
, 
Z
); \

83 } 0)

	)

85 
	#nooks_Ÿ_°‹eoff£t_kîn_w
(
X
, 
Y
, 
Z
) \

87 
	`nooks_Ÿ_°‹eoff£t_kîn
 (
g_nooks_èbÀ
, 
X
, 
Y
, 
Z
); \

88 } 0);

	)

90 
	#nooks_Ÿ_Æloc_¨øymem_kîn_w
(
W
, 
X
, 
Y
, 
Z
) \

92 
	`nooks_Ÿ_Æloc_¨øymem_kîn
 (
g_nooks_èbÀ
, 
W
, 
X
, 
Y
, 
Z
); \

93 } 0)

	)

99 
°æí
(c⁄° *
s
);

100 
	$∑nic
(c⁄° * 
fmt
, ...Ë
	`__©åibuã__
 ((
n‹ëu∫
, 
	`f‹m©
 (
¥ötf
, 1, 2)));

106 
g_devi˚_úq
;

107 *
g_nooks_èbÀ
;

108 
	`u¥ötk
 (const *, ...);

113 *
	`MJR_gë_cuºít
();

116 
	$MJR_acquúe_ªcursive_lock
 (* 
ign‹e
) {

118 
	}
}

120 
	$MJR_ªÀa£_ªcursive_lock
 (* 
ign‹e
) {

122 
	}
}

126 
	#MARSHWRAP_LOC1
()

	)

128 
	#MARSHWRAP_LOC2
()

	)

130 
	#MARSHWRAP_LOC3
() \

131 

	)

132 
	#MARSHWRAP_LOC4
() \

133 

	)

134 
	#STUB_LOC1
() \

136 
	`od·_åunˇã_ønge_hashèbÀ
(); \

137 
	`MJR_acquúe_ªcursive_lock
 (
	`MJR_gë_cuºít
()); \

138 } 0)

	)

140 
	#STUB_LOC2
() \

141 dÿ{ \

	)

142 
MJR_ªÀa£_ªcursive_lock
 (
MJR_gë_cuºít
()); \

149 
	~"dem¨shbuf_‰ì.h
"

150 
	~"¶ave_ma°î_ud_md_m¨shÆög.h
"

151 
	~"¶ave_ma°î_ud_md.h
"

152 
	~"MJR_exã∫Æ_fun˘i⁄s.h
"

153 
	~"ma°î_md_nooks_≠i.h
"

	@../../common/slave_top.h

1 #i‚de‡
SLAVE_TOP_H


2 
	#SLAVE_TOP_H


	)

4 
	~"¶ave_ma°î_ud_md.h
"

5 
	~"¶ave_ma°î_ud_md_m¨shÆög.h
"

6 
	~"wøµîs_nooks.h
"

8 
	#_•ö_lock_úqßve
 
•ö_lock_úqßve_asim


	)

9 
	#_•ö_u∆ock_úqª°‹e
 
•ö_u∆ock_úqª°‹e_asim


	)

18 
	#WRAPPERS_SYM_DRIVER_STEP2


	)

22 c⁄°

	)

24 
	#CONFIG_BASE_SMALL
 0

	)

26 
	$k‰ì
(* 
addr
) {

28 
	}
}

31 
°πoul
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

32 
°æí
(c⁄° *
s
);

33 #ifde‡
__KERNEL__


34 
•rötf
(* 
buf
, c⁄° * 
fmt
, ...);

38 
	~"dem¨shbuf_‰ì.h
"

	@/usr/include/linux/input.h

1 #i‚de‡
_INPUT_H


2 
	#_INPUT_H


	)

12 
	~<sys/time.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<asm/ty≥s.h
>

21 
	söput_evít
 {

22 
timevÆ
 
	mtime
;

23 
__u16
 
	mty≥
;

24 
__u16
 
	mcode
;

25 
__s32
 
	mvÆue
;

32 
	#EV_VERSION
 0x010000

	)

38 
	söput_id
 {

39 
__u16
 
	mbu°y≥
;

40 
__u16
 
	mvíd‹
;

41 
__u16
 
	m¥odu˘
;

42 
__u16
 
	mvîsi⁄
;

45 
	söput_absöfo
 {

46 
__s32
 
	mvÆue
;

47 
__s32
 
	mmöimum
;

48 
__s32
 
	mmaximum
;

49 
__s32
 
	mfuzz
;

50 
__s32
 
	mÊ©
;

53 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

54 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

55 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

56 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

57 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

58 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

60 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

61 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

62 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

64 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

65 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

66 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

67 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

69 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 +Év,ÜíË

	)

70 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 +ábs, 
öput_absöfo
Ë

	)

71 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 +ábs, 
öput_absöfo
Ë

	)

73 
	#EVIOCSFF
 
	`_IOC
(
_IOC_WRITE
, 'E', 0x80, (
ff_ef„˘
)Ë

	)

74 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

75 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

77 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

83 
	#EV_SYN
 0x00

	)

84 
	#EV_KEY
 0x01

	)

85 
	#EV_REL
 0x02

	)

86 
	#EV_ABS
 0x03

	)

87 
	#EV_MSC
 0x04

	)

88 
	#EV_SW
 0x05

	)

89 
	#EV_LED
 0x11

	)

90 
	#EV_SND
 0x12

	)

91 
	#EV_REP
 0x14

	)

92 
	#EV_FF
 0x15

	)

93 
	#EV_PWR
 0x16

	)

94 
	#EV_FF_STATUS
 0x17

	)

95 
	#EV_MAX
 0x1f

	)

101 
	#SYN_REPORT
 0

	)

102 
	#SYN_CONFIG
 1

	)

108 
	#KEY_RESERVED
 0

	)

109 
	#KEY_ESC
 1

	)

110 
	#KEY_1
 2

	)

111 
	#KEY_2
 3

	)

112 
	#KEY_3
 4

	)

113 
	#KEY_4
 5

	)

114 
	#KEY_5
 6

	)

115 
	#KEY_6
 7

	)

116 
	#KEY_7
 8

	)

117 
	#KEY_8
 9

	)

118 
	#KEY_9
 10

	)

119 
	#KEY_0
 11

	)

120 
	#KEY_MINUS
 12

	)

121 
	#KEY_EQUAL
 13

	)

122 
	#KEY_BACKSPACE
 14

	)

123 
	#KEY_TAB
 15

	)

124 
	#KEY_Q
 16

	)

125 
	#KEY_W
 17

	)

126 
	#KEY_E
 18

	)

127 
	#KEY_R
 19

	)

128 
	#KEY_T
 20

	)

129 
	#KEY_Y
 21

	)

130 
	#KEY_U
 22

	)

131 
	#KEY_I
 23

	)

132 
	#KEY_O
 24

	)

133 
	#KEY_P
 25

	)

134 
	#KEY_LEFTBRACE
 26

	)

135 
	#KEY_RIGHTBRACE
 27

	)

136 
	#KEY_ENTER
 28

	)

137 
	#KEY_LEFTCTRL
 29

	)

138 
	#KEY_A
 30

	)

139 
	#KEY_S
 31

	)

140 
	#KEY_D
 32

	)

141 
	#KEY_F
 33

	)

142 
	#KEY_G
 34

	)

143 
	#KEY_H
 35

	)

144 
	#KEY_J
 36

	)

145 
	#KEY_K
 37

	)

146 
	#KEY_L
 38

	)

147 
	#KEY_SEMICOLON
 39

	)

148 
	#KEY_APOSTROPHE
 40

	)

149 
	#KEY_GRAVE
 41

	)

150 
	#KEY_LEFTSHIFT
 42

	)

151 
	#KEY_BACKSLASH
 43

	)

152 
	#KEY_Z
 44

	)

153 
	#KEY_X
 45

	)

154 
	#KEY_C
 46

	)

155 
	#KEY_V
 47

	)

156 
	#KEY_B
 48

	)

157 
	#KEY_N
 49

	)

158 
	#KEY_M
 50

	)

159 
	#KEY_COMMA
 51

	)

160 
	#KEY_DOT
 52

	)

161 
	#KEY_SLASH
 53

	)

162 
	#KEY_RIGHTSHIFT
 54

	)

163 
	#KEY_KPASTERISK
 55

	)

164 
	#KEY_LEFTALT
 56

	)

165 
	#KEY_SPACE
 57

	)

166 
	#KEY_CAPSLOCK
 58

	)

167 
	#KEY_F1
 59

	)

168 
	#KEY_F2
 60

	)

169 
	#KEY_F3
 61

	)

170 
	#KEY_F4
 62

	)

171 
	#KEY_F5
 63

	)

172 
	#KEY_F6
 64

	)

173 
	#KEY_F7
 65

	)

174 
	#KEY_F8
 66

	)

175 
	#KEY_F9
 67

	)

176 
	#KEY_F10
 68

	)

177 
	#KEY_NUMLOCK
 69

	)

178 
	#KEY_SCROLLLOCK
 70

	)

179 
	#KEY_KP7
 71

	)

180 
	#KEY_KP8
 72

	)

181 
	#KEY_KP9
 73

	)

182 
	#KEY_KPMINUS
 74

	)

183 
	#KEY_KP4
 75

	)

184 
	#KEY_KP5
 76

	)

185 
	#KEY_KP6
 77

	)

186 
	#KEY_KPPLUS
 78

	)

187 
	#KEY_KP1
 79

	)

188 
	#KEY_KP2
 80

	)

189 
	#KEY_KP3
 81

	)

190 
	#KEY_KP0
 82

	)

191 
	#KEY_KPDOT
 83

	)

193 
	#KEY_ZENKAKUHANKAKU
 85

	)

194 
	#KEY_102ND
 86

	)

195 
	#KEY_F11
 87

	)

196 
	#KEY_F12
 88

	)

197 
	#KEY_RO
 89

	)

198 
	#KEY_KATAKANA
 90

	)

199 
	#KEY_HIRAGANA
 91

	)

200 
	#KEY_HENKAN
 92

	)

201 
	#KEY_KATAKANAHIRAGANA
 93

	)

202 
	#KEY_MUHENKAN
 94

	)

203 
	#KEY_KPJPCOMMA
 95

	)

204 
	#KEY_KPENTER
 96

	)

205 
	#KEY_RIGHTCTRL
 97

	)

206 
	#KEY_KPSLASH
 98

	)

207 
	#KEY_SYSRQ
 99

	)

208 
	#KEY_RIGHTALT
 100

	)

209 
	#KEY_LINEFEED
 101

	)

210 
	#KEY_HOME
 102

	)

211 
	#KEY_UP
 103

	)

212 
	#KEY_PAGEUP
 104

	)

213 
	#KEY_LEFT
 105

	)

214 
	#KEY_RIGHT
 106

	)

215 
	#KEY_END
 107

	)

216 
	#KEY_DOWN
 108

	)

217 
	#KEY_PAGEDOWN
 109

	)

218 
	#KEY_INSERT
 110

	)

219 
	#KEY_DELETE
 111

	)

220 
	#KEY_MACRO
 112

	)

221 
	#KEY_MUTE
 113

	)

222 
	#KEY_VOLUMEDOWN
 114

	)

223 
	#KEY_VOLUMEUP
 115

	)

224 
	#KEY_POWER
 116

	)

225 
	#KEY_KPEQUAL
 117

	)

226 
	#KEY_KPPLUSMINUS
 118

	)

227 
	#KEY_PAUSE
 119

	)

229 
	#KEY_KPCOMMA
 121

	)

230 
	#KEY_HANGEUL
 122

	)

231 
	#KEY_HANGUEL
 
KEY_HANGEUL


	)

232 
	#KEY_HANJA
 123

	)

233 
	#KEY_YEN
 124

	)

234 
	#KEY_LEFTMETA
 125

	)

235 
	#KEY_RIGHTMETA
 126

	)

236 
	#KEY_COMPOSE
 127

	)

238 
	#KEY_STOP
 128

	)

239 
	#KEY_AGAIN
 129

	)

240 
	#KEY_PROPS
 130

	)

241 
	#KEY_UNDO
 131

	)

242 
	#KEY_FRONT
 132

	)

243 
	#KEY_COPY
 133

	)

244 
	#KEY_OPEN
 134

	)

245 
	#KEY_PASTE
 135

	)

246 
	#KEY_FIND
 136

	)

247 
	#KEY_CUT
 137

	)

248 
	#KEY_HELP
 138

	)

249 
	#KEY_MENU
 139

	)

250 
	#KEY_CALC
 140

	)

251 
	#KEY_SETUP
 141

	)

252 
	#KEY_SLEEP
 142

	)

253 
	#KEY_WAKEUP
 143

	)

254 
	#KEY_FILE
 144

	)

255 
	#KEY_SENDFILE
 145

	)

256 
	#KEY_DELETEFILE
 146

	)

257 
	#KEY_XFER
 147

	)

258 
	#KEY_PROG1
 148

	)

259 
	#KEY_PROG2
 149

	)

260 
	#KEY_WWW
 150

	)

261 
	#KEY_MSDOS
 151

	)

262 
	#KEY_COFFEE
 152

	)

263 
	#KEY_DIRECTION
 153

	)

264 
	#KEY_CYCLEWINDOWS
 154

	)

265 
	#KEY_MAIL
 155

	)

266 
	#KEY_BOOKMARKS
 156

	)

267 
	#KEY_COMPUTER
 157

	)

268 
	#KEY_BACK
 158

	)

269 
	#KEY_FORWARD
 159

	)

270 
	#KEY_CLOSECD
 160

	)

271 
	#KEY_EJECTCD
 161

	)

272 
	#KEY_EJECTCLOSECD
 162

	)

273 
	#KEY_NEXTSONG
 163

	)

274 
	#KEY_PLAYPAUSE
 164

	)

275 
	#KEY_PREVIOUSSONG
 165

	)

276 
	#KEY_STOPCD
 166

	)

277 
	#KEY_RECORD
 167

	)

278 
	#KEY_REWIND
 168

	)

279 
	#KEY_PHONE
 169

	)

280 
	#KEY_ISO
 170

	)

281 
	#KEY_CONFIG
 171

	)

282 
	#KEY_HOMEPAGE
 172

	)

283 
	#KEY_REFRESH
 173

	)

284 
	#KEY_EXIT
 174

	)

285 
	#KEY_MOVE
 175

	)

286 
	#KEY_EDIT
 176

	)

287 
	#KEY_SCROLLUP
 177

	)

288 
	#KEY_SCROLLDOWN
 178

	)

289 
	#KEY_KPLEFTPAREN
 179

	)

290 
	#KEY_KPRIGHTPAREN
 180

	)

291 
	#KEY_NEW
 181

	)

292 
	#KEY_REDO
 182

	)

294 
	#KEY_F13
 183

	)

295 
	#KEY_F14
 184

	)

296 
	#KEY_F15
 185

	)

297 
	#KEY_F16
 186

	)

298 
	#KEY_F17
 187

	)

299 
	#KEY_F18
 188

	)

300 
	#KEY_F19
 189

	)

301 
	#KEY_F20
 190

	)

302 
	#KEY_F21
 191

	)

303 
	#KEY_F22
 192

	)

304 
	#KEY_F23
 193

	)

305 
	#KEY_F24
 194

	)

307 
	#KEY_PLAYCD
 200

	)

308 
	#KEY_PAUSECD
 201

	)

309 
	#KEY_PROG3
 202

	)

310 
	#KEY_PROG4
 203

	)

311 
	#KEY_SUSPEND
 205

	)

312 
	#KEY_CLOSE
 206

	)

313 
	#KEY_PLAY
 207

	)

314 
	#KEY_FASTFORWARD
 208

	)

315 
	#KEY_BASSBOOST
 209

	)

316 
	#KEY_PRINT
 210

	)

317 
	#KEY_HP
 211

	)

318 
	#KEY_CAMERA
 212

	)

319 
	#KEY_SOUND
 213

	)

320 
	#KEY_QUESTION
 214

	)

321 
	#KEY_EMAIL
 215

	)

322 
	#KEY_CHAT
 216

	)

323 
	#KEY_SEARCH
 217

	)

324 
	#KEY_CONNECT
 218

	)

325 
	#KEY_FINANCE
 219

	)

326 
	#KEY_SPORT
 220

	)

327 
	#KEY_SHOP
 221

	)

328 
	#KEY_ALTERASE
 222

	)

329 
	#KEY_CANCEL
 223

	)

330 
	#KEY_BRIGHTNESSDOWN
 224

	)

331 
	#KEY_BRIGHTNESSUP
 225

	)

332 
	#KEY_MEDIA
 226

	)

334 
	#KEY_SWITCHVIDEOMODE
 227

	)

335 
	#KEY_KBDILLUMTOGGLE
 228

	)

336 
	#KEY_KBDILLUMDOWN
 229

	)

337 
	#KEY_KBDILLUMUP
 230

	)

339 
	#KEY_SEND
 231

	)

340 
	#KEY_REPLY
 232

	)

341 
	#KEY_FORWARDMAIL
 233

	)

342 
	#KEY_SAVE
 234

	)

343 
	#KEY_DOCUMENTS
 235

	)

345 
	#KEY_BATTERY
 236

	)

347 
	#KEY_WLAN
 238

	)

349 
	#KEY_UNKNOWN
 240

	)

351 
	#KEY_VIDEO_NEXT
 241

	)

352 
	#KEY_VIDEO_PREV
 242

	)

353 
	#KEY_BRIGHTNESS_CYCLE
 243

	)

354 
	#KEY_BRIGHTNESS_ZERO
 244

	)

355 
	#KEY_DISPLAY_OFF
 245

	)

357 
	#BTN_MISC
 0x100

	)

358 
	#BTN_0
 0x100

	)

359 
	#BTN_1
 0x101

	)

360 
	#BTN_2
 0x102

	)

361 
	#BTN_3
 0x103

	)

362 
	#BTN_4
 0x104

	)

363 
	#BTN_5
 0x105

	)

364 
	#BTN_6
 0x106

	)

365 
	#BTN_7
 0x107

	)

366 
	#BTN_8
 0x108

	)

367 
	#BTN_9
 0x109

	)

369 
	#BTN_MOUSE
 0x110

	)

370 
	#BTN_LEFT
 0x110

	)

371 
	#BTN_RIGHT
 0x111

	)

372 
	#BTN_MIDDLE
 0x112

	)

373 
	#BTN_SIDE
 0x113

	)

374 
	#BTN_EXTRA
 0x114

	)

375 
	#BTN_FORWARD
 0x115

	)

376 
	#BTN_BACK
 0x116

	)

377 
	#BTN_TASK
 0x117

	)

379 
	#BTN_JOYSTICK
 0x120

	)

380 
	#BTN_TRIGGER
 0x120

	)

381 
	#BTN_THUMB
 0x121

	)

382 
	#BTN_THUMB2
 0x122

	)

383 
	#BTN_TOP
 0x123

	)

384 
	#BTN_TOP2
 0x124

	)

385 
	#BTN_PINKIE
 0x125

	)

386 
	#BTN_BASE
 0x126

	)

387 
	#BTN_BASE2
 0x127

	)

388 
	#BTN_BASE3
 0x128

	)

389 
	#BTN_BASE4
 0x129

	)

390 
	#BTN_BASE5
 0x12a

	)

391 
	#BTN_BASE6
 0x12b

	)

392 
	#BTN_DEAD
 0x12f

	)

394 
	#BTN_GAMEPAD
 0x130

	)

395 
	#BTN_A
 0x130

	)

396 
	#BTN_B
 0x131

	)

397 
	#BTN_C
 0x132

	)

398 
	#BTN_X
 0x133

	)

399 
	#BTN_Y
 0x134

	)

400 
	#BTN_Z
 0x135

	)

401 
	#BTN_TL
 0x136

	)

402 
	#BTN_TR
 0x137

	)

403 
	#BTN_TL2
 0x138

	)

404 
	#BTN_TR2
 0x139

	)

405 
	#BTN_SELECT
 0x13a

	)

406 
	#BTN_START
 0x13b

	)

407 
	#BTN_MODE
 0x13c

	)

408 
	#BTN_THUMBL
 0x13d

	)

409 
	#BTN_THUMBR
 0x13e

	)

411 
	#BTN_DIGI
 0x140

	)

412 
	#BTN_TOOL_PEN
 0x140

	)

413 
	#BTN_TOOL_RUBBER
 0x141

	)

414 
	#BTN_TOOL_BRUSH
 0x142

	)

415 
	#BTN_TOOL_PENCIL
 0x143

	)

416 
	#BTN_TOOL_AIRBRUSH
 0x144

	)

417 
	#BTN_TOOL_FINGER
 0x145

	)

418 
	#BTN_TOOL_MOUSE
 0x146

	)

419 
	#BTN_TOOL_LENS
 0x147

	)

420 
	#BTN_TOUCH
 0x14a

	)

421 
	#BTN_STYLUS
 0x14b

	)

422 
	#BTN_STYLUS2
 0x14c

	)

423 
	#BTN_TOOL_DOUBLETAP
 0x14d

	)

424 
	#BTN_TOOL_TRIPLETAP
 0x14e

	)

426 
	#BTN_WHEEL
 0x150

	)

427 
	#BTN_GEAR_DOWN
 0x150

	)

428 
	#BTN_GEAR_UP
 0x151

	)

430 
	#KEY_OK
 0x160

	)

431 
	#KEY_SELECT
 0x161

	)

432 
	#KEY_GOTO
 0x162

	)

433 
	#KEY_CLEAR
 0x163

	)

434 
	#KEY_POWER2
 0x164

	)

435 
	#KEY_OPTION
 0x165

	)

436 
	#KEY_INFO
 0x166

	)

437 
	#KEY_TIME
 0x167

	)

438 
	#KEY_VENDOR
 0x168

	)

439 
	#KEY_ARCHIVE
 0x169

	)

440 
	#KEY_PROGRAM
 0x16a

	)

441 
	#KEY_CHANNEL
 0x16b

	)

442 
	#KEY_FAVORITES
 0x16c

	)

443 
	#KEY_EPG
 0x16d

	)

444 
	#KEY_PVR
 0x16e

	)

445 
	#KEY_MHP
 0x16f

	)

446 
	#KEY_LANGUAGE
 0x170

	)

447 
	#KEY_TITLE
 0x171

	)

448 
	#KEY_SUBTITLE
 0x172

	)

449 
	#KEY_ANGLE
 0x173

	)

450 
	#KEY_ZOOM
 0x174

	)

451 
	#KEY_MODE
 0x175

	)

452 
	#KEY_KEYBOARD
 0x176

	)

453 
	#KEY_SCREEN
 0x177

	)

454 
	#KEY_PC
 0x178

	)

455 
	#KEY_TV
 0x179

	)

456 
	#KEY_TV2
 0x17a

	)

457 
	#KEY_VCR
 0x17b

	)

458 
	#KEY_VCR2
 0x17c

	)

459 
	#KEY_SAT
 0x17d

	)

460 
	#KEY_SAT2
 0x17e

	)

461 
	#KEY_CD
 0x17f

	)

462 
	#KEY_TAPE
 0x180

	)

463 
	#KEY_RADIO
 0x181

	)

464 
	#KEY_TUNER
 0x182

	)

465 
	#KEY_PLAYER
 0x183

	)

466 
	#KEY_TEXT
 0x184

	)

467 
	#KEY_DVD
 0x185

	)

468 
	#KEY_AUX
 0x186

	)

469 
	#KEY_MP3
 0x187

	)

470 
	#KEY_AUDIO
 0x188

	)

471 
	#KEY_VIDEO
 0x189

	)

472 
	#KEY_DIRECTORY
 0x18a

	)

473 
	#KEY_LIST
 0x18b

	)

474 
	#KEY_MEMO
 0x18c

	)

475 
	#KEY_CALENDAR
 0x18d

	)

476 
	#KEY_RED
 0x18e

	)

477 
	#KEY_GREEN
 0x18f

	)

478 
	#KEY_YELLOW
 0x190

	)

479 
	#KEY_BLUE
 0x191

	)

480 
	#KEY_CHANNELUP
 0x192

	)

481 
	#KEY_CHANNELDOWN
 0x193

	)

482 
	#KEY_FIRST
 0x194

	)

483 
	#KEY_LAST
 0x195

	)

484 
	#KEY_AB
 0x196

	)

485 
	#KEY_NEXT
 0x197

	)

486 
	#KEY_RESTART
 0x198

	)

487 
	#KEY_SLOW
 0x199

	)

488 
	#KEY_SHUFFLE
 0x19a

	)

489 
	#KEY_BREAK
 0x19b

	)

490 
	#KEY_PREVIOUS
 0x19c

	)

491 
	#KEY_DIGITS
 0x19d

	)

492 
	#KEY_TEEN
 0x19e

	)

493 
	#KEY_TWEN
 0x19f

	)

495 
	#KEY_DEL_EOL
 0x1c0

	)

496 
	#KEY_DEL_EOS
 0x1c1

	)

497 
	#KEY_INS_LINE
 0x1c2

	)

498 
	#KEY_DEL_LINE
 0x1c3

	)

500 
	#KEY_FN
 0x1d0

	)

501 
	#KEY_FN_ESC
 0x1d1

	)

502 
	#KEY_FN_F1
 0x1d2

	)

503 
	#KEY_FN_F2
 0x1d3

	)

504 
	#KEY_FN_F3
 0x1d4

	)

505 
	#KEY_FN_F4
 0x1d5

	)

506 
	#KEY_FN_F5
 0x1d6

	)

507 
	#KEY_FN_F6
 0x1d7

	)

508 
	#KEY_FN_F7
 0x1d8

	)

509 
	#KEY_FN_F8
 0x1d9

	)

510 
	#KEY_FN_F9
 0x1da

	)

511 
	#KEY_FN_F10
 0x1db

	)

512 
	#KEY_FN_F11
 0x1dc

	)

513 
	#KEY_FN_F12
 0x1dd

	)

514 
	#KEY_FN_1
 0x1de

	)

515 
	#KEY_FN_2
 0x1df

	)

516 
	#KEY_FN_D
 0x1e0

	)

517 
	#KEY_FN_E
 0x1e1

	)

518 
	#KEY_FN_F
 0x1e2

	)

519 
	#KEY_FN_S
 0x1e3

	)

520 
	#KEY_FN_B
 0x1e4

	)

522 
	#KEY_BRL_DOT1
 0x1f1

	)

523 
	#KEY_BRL_DOT2
 0x1f2

	)

524 
	#KEY_BRL_DOT3
 0x1f3

	)

525 
	#KEY_BRL_DOT4
 0x1f4

	)

526 
	#KEY_BRL_DOT5
 0x1f5

	)

527 
	#KEY_BRL_DOT6
 0x1f6

	)

528 
	#KEY_BRL_DOT7
 0x1f7

	)

529 
	#KEY_BRL_DOT8
 0x1f8

	)

532 
	#KEY_MIN_INTERESTING
 
KEY_MUTE


	)

533 
	#KEY_MAX
 0x1ff

	)

539 
	#REL_X
 0x00

	)

540 
	#REL_Y
 0x01

	)

541 
	#REL_Z
 0x02

	)

542 
	#REL_RX
 0x03

	)

543 
	#REL_RY
 0x04

	)

544 
	#REL_RZ
 0x05

	)

545 
	#REL_HWHEEL
 0x06

	)

546 
	#REL_DIAL
 0x07

	)

547 
	#REL_WHEEL
 0x08

	)

548 
	#REL_MISC
 0x09

	)

549 
	#REL_MAX
 0x0f

	)

555 
	#ABS_X
 0x00

	)

556 
	#ABS_Y
 0x01

	)

557 
	#ABS_Z
 0x02

	)

558 
	#ABS_RX
 0x03

	)

559 
	#ABS_RY
 0x04

	)

560 
	#ABS_RZ
 0x05

	)

561 
	#ABS_THROTTLE
 0x06

	)

562 
	#ABS_RUDDER
 0x07

	)

563 
	#ABS_WHEEL
 0x08

	)

564 
	#ABS_GAS
 0x09

	)

565 
	#ABS_BRAKE
 0x0a

	)

566 
	#ABS_HAT0X
 0x10

	)

567 
	#ABS_HAT0Y
 0x11

	)

568 
	#ABS_HAT1X
 0x12

	)

569 
	#ABS_HAT1Y
 0x13

	)

570 
	#ABS_HAT2X
 0x14

	)

571 
	#ABS_HAT2Y
 0x15

	)

572 
	#ABS_HAT3X
 0x16

	)

573 
	#ABS_HAT3Y
 0x17

	)

574 
	#ABS_PRESSURE
 0x18

	)

575 
	#ABS_DISTANCE
 0x19

	)

576 
	#ABS_TILT_X
 0x1a

	)

577 
	#ABS_TILT_Y
 0x1b

	)

578 
	#ABS_TOOL_WIDTH
 0x1c

	)

579 
	#ABS_VOLUME
 0x20

	)

580 
	#ABS_MISC
 0x28

	)

581 
	#ABS_MAX
 0x3f

	)

587 
	#SW_LID
 0x00

	)

588 
	#SW_TABLET_MODE
 0x01

	)

589 
	#SW_HEADPHONE_INSERT
 0x02

	)

590 
	#SW_RADIO
 0x03

	)

591 
	#SW_MAX
 0x0f

	)

597 
	#MSC_SERIAL
 0x00

	)

598 
	#MSC_PULSELED
 0x01

	)

599 
	#MSC_GESTURE
 0x02

	)

600 
	#MSC_RAW
 0x03

	)

601 
	#MSC_SCAN
 0x04

	)

602 
	#MSC_MAX
 0x07

	)

608 
	#LED_NUML
 0x00

	)

609 
	#LED_CAPSL
 0x01

	)

610 
	#LED_SCROLLL
 0x02

	)

611 
	#LED_COMPOSE
 0x03

	)

612 
	#LED_KANA
 0x04

	)

613 
	#LED_SLEEP
 0x05

	)

614 
	#LED_SUSPEND
 0x06

	)

615 
	#LED_MUTE
 0x07

	)

616 
	#LED_MISC
 0x08

	)

617 
	#LED_MAIL
 0x09

	)

618 
	#LED_CHARGING
 0x0a

	)

619 
	#LED_MAX
 0x0f

	)

625 
	#REP_DELAY
 0x00

	)

626 
	#REP_PERIOD
 0x01

	)

627 
	#REP_MAX
 0x01

	)

633 
	#SND_CLICK
 0x00

	)

634 
	#SND_BELL
 0x01

	)

635 
	#SND_TONE
 0x02

	)

636 
	#SND_MAX
 0x07

	)

642 
	#ID_BUS
 0

	)

643 
	#ID_VENDOR
 1

	)

644 
	#ID_PRODUCT
 2

	)

645 
	#ID_VERSION
 3

	)

647 
	#BUS_PCI
 0x01

	)

648 
	#BUS_ISAPNP
 0x02

	)

649 
	#BUS_USB
 0x03

	)

650 
	#BUS_HIL
 0x04

	)

651 
	#BUS_BLUETOOTH
 0x05

	)

653 
	#BUS_ISA
 0x10

	)

654 
	#BUS_I8042
 0x11

	)

655 
	#BUS_XTKBD
 0x12

	)

656 
	#BUS_RS232
 0x13

	)

657 
	#BUS_GAMEPORT
 0x14

	)

658 
	#BUS_PARPORT
 0x15

	)

659 
	#BUS_AMIGA
 0x16

	)

660 
	#BUS_ADB
 0x17

	)

661 
	#BUS_I2C
 0x18

	)

662 
	#BUS_HOST
 0x19

	)

663 
	#BUS_GSC
 0x1A

	)

668 
	#FF_STATUS_STOPPED
 0x00

	)

669 
	#FF_STATUS_PLAYING
 0x01

	)

670 
	#FF_STATUS_MAX
 0x01

	)

678 
	sff_ª∂ay
 {

679 
__u16
 
	mÀngth
;

680 
__u16
 
	mdñay
;

683 
	sff_åiggî
 {

684 
__u16
 
	mbuâ⁄
;

685 
__u16
 
	möãrvÆ
;

688 
	sff_ívñ›e
 {

689 
__u16
 
	m©èck_Àngth
;

690 
__u16
 
	m©èck_Àvñ
;

691 
__u16
 
	mÁde_Àngth
;

692 
__u16
 
	mÁde_Àvñ
;

696 
	sff_c⁄°™t_ef„˘
 {

697 
__s16
 
	mÀvñ
;

698 
ff_ívñ›e
 
	mívñ›e
;

702 
	sff_ømp_ef„˘
 {

703 
__s16
 
	m°¨t_Àvñ
;

704 
__s16
 
	míd_Àvñ
;

705 
ff_ívñ›e
 
	mívñ›e
;

709 
	sff_c⁄dôi⁄_ef„˘
 {

710 
__u16
 
	mright_ßtuøti⁄
;

711 
__u16
 
	mÀ·_ßtuøti⁄
;

713 
__s16
 
	mright_c€ff
;

715 
__s16
 
	mÀ·_c€ff
;

717 
__u16
 
	mdódb™d
;

718 
__s16
 
	m˚¡î
;

723 
	sff_≥riodic_ef„˘
 {

724 
__u16
 
	mwavef‹m
;

725 
__u16
 
	m≥riod
;

726 
__s16
 
	mmagnôude
;

727 
__s16
 
	moff£t
;

728 
__u16
 
	mpha£
;

730 
ff_ívñ›e
 
	mívñ›e
;

733 
__u32
 
	mcu°om_Àn
;

734 
__s16
 *
	mcu°om_d©a
;

744 
	sff_rumbÀ_ef„˘
 {

745 
__u16
 
	m°r⁄g_magnôude
;

746 
__u16
 
	mwók_magnôude
;

752 
	sff_ef„˘
 {

753 
__u16
 
	mty≥
;

758 
__s16
 
	mid
;

760 
__u16
 
	mdúe˘i⁄
;

766 
ff_åiggî
 
	måiggî
;

767 
ff_ª∂ay
 
	mª∂ay
;

770 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

771 
ff_ømp_ef„˘
 
	mømp
;

772 
ff_≥riodic_ef„˘
 
	m≥riodic
;

773 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

774 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

775 } 
	mu
;

782 
	#FF_RUMBLE
 0x50

	)

783 
	#FF_PERIODIC
 0x51

	)

784 
	#FF_CONSTANT
 0x52

	)

785 
	#FF_SPRING
 0x53

	)

786 
	#FF_FRICTION
 0x54

	)

787 
	#FF_DAMPER
 0x55

	)

788 
	#FF_INERTIA
 0x56

	)

789 
	#FF_RAMP
 0x57

	)

795 
	#FF_SQUARE
 0x58

	)

796 
	#FF_TRIANGLE
 0x59

	)

797 
	#FF_SINE
 0x5a

	)

798 
	#FF_SAW_UP
 0x5b

	)

799 
	#FF_SAW_DOWN
 0x5c

	)

800 
	#FF_CUSTOM
 0x5d

	)

806 
	#FF_GAIN
 0x60

	)

807 
	#FF_AUTOCENTER
 0x61

	)

809 
	#FF_MAX
 0x7f

	)

	@/usr/include/linux/serio.h

1 #i‚de‡
_SERIO_H


2 
	#_SERIO_H


	)

12 
	~<löux/io˘l.h
>

14 
	#SPIOCSTYPE
 
	`_IOW
('q', 0x01, )

	)

20 
	#SERIO_TIMEOUT
 1

	)

21 
	#SERIO_PARITY
 2

	)

22 
	#SERIO_FRAME
 4

	)

27 
	#SERIO_XT
 0x00

	)

28 
	#SERIO_8042
 0x01

	)

29 
	#SERIO_RS232
 0x02

	)

30 
	#SERIO_HIL_MLC
 0x03

	)

31 
	#SERIO_PS_PSTHRU
 0x05

	)

32 
	#SERIO_8042_XL
 0x06

	)

37 
	#SERIO_UNKNOWN
 0x00

	)

38 
	#SERIO_MSC
 0x01

	)

39 
	#SERIO_SUN
 0x02

	)

40 
	#SERIO_MS
 0x03

	)

41 
	#SERIO_MP
 0x04

	)

42 
	#SERIO_MZ
 0x05

	)

43 
	#SERIO_MZP
 0x06

	)

44 
	#SERIO_MZPP
 0x07

	)

45 
	#SERIO_VSXXXAA
 0x08

	)

46 
	#SERIO_SUNKBD
 0x10

	)

47 
	#SERIO_WARRIOR
 0x18

	)

48 
	#SERIO_SPACEORB
 0x19

	)

49 
	#SERIO_MAGELLAN
 0x1a

	)

50 
	#SERIO_SPACEBALL
 0x1b

	)

51 
	#SERIO_GUNZE
 0x1c

	)

52 
	#SERIO_IFORCE
 0x1d

	)

53 
	#SERIO_STINGER
 0x1e

	)

54 
	#SERIO_NEWTON
 0x1f

	)

55 
	#SERIO_STOWAWAY
 0x20

	)

56 
	#SERIO_H3600
 0x21

	)

57 
	#SERIO_PS2SER
 0x22

	)

58 
	#SERIO_TWIDKBD
 0x23

	)

59 
	#SERIO_TWIDJOY
 0x24

	)

60 
	#SERIO_HIL
 0x25

	)

61 
	#SERIO_SNES232
 0x26

	)

62 
	#SERIO_SEMTECH
 0x27

	)

63 
	#SERIO_LKKBD
 0x28

	)

64 
	#SERIO_ELO
 0x29

	)

65 
	#SERIO_MICROTOUCH
 0x30

	)

	@/usr/include/asm/types.h

2 #i‚de‡
__ASM_STUB_TYPES_H


3 
	#__ASM_STUB_TYPES_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/ty≥s.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/ty≥s.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	`utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	`lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	`futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_ATFILE


156 
	`futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/asm-i386/types.h

1 #i‚de‡
_I386_TYPES_H


2 
	#_I386_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

23 
__sig√d__
 
	t__s64
;

24 
	t__u64
;

	@/usr/include/asm-x86_64/types.h

1 #i‚de‡
_X86_64_TYPES_H


2 
	#_X86_64_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 
__sig√d__
 
	t__s64
;

23 
	t__u64
;

	@/usr/include/asm/ioctl.h

2 #i‚de‡
__ASM_STUB_IOCTL_H


3 
	#__ASM_STUB_IOCTL_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/io˘l.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/io˘l.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

119 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

120 #ñi‡
__WORDSIZE
 == 64

121 
	t__SQUAD_TYPE
 

	)

122 
	t__UQUAD_TYPE
 

	)

123 
	t__SWORD_TYPE
 

	)

124 
	t__UWORD_TYPE
 

	)

125 
	t__SLONG32_TYPE
 

	)

126 
	t__ULONG32_TYPE
 

	)

127 
	t__S64_TYPE
 

	)

128 
	t__U64_TYPE
 

	)

130 
	t__STD_TYPE
 

	)

134 
	~<bôs/ty≥sizes.h
>

137 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

138 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

139 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

140 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

141 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

142 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

143 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

144 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

145 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

146 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

147 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

148 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

149 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

150 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

151 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

152 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

153 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

154 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

156 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

157 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

158 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

161 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

164 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

167 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

172 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

173 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

176 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

177 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

180 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

181 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

183 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

187 
__off64_t
 
	t__loff_t
;

188 
__quad_t
 *
	t__qaddr_t
;

189 *
	t__ˇddr_t
;

192 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

195 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

198 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_POSIX


95 #unde‡
__USE_POSIX2


96 #unde‡
__USE_POSIX199309


97 #unde‡
__USE_POSIX199506


98 #unde‡
__USE_XOPEN


99 #unde‡
__USE_XOPEN_EXTENDED


100 #unde‡
__USE_UNIX98


101 #unde‡
__USE_XOPEN2K


102 #unde‡
__USE_LARGEFILE


103 #unde‡
__USE_LARGEFILE64


104 #unde‡
__USE_FILE_OFFSET64


105 #unde‡
__USE_BSD


106 #unde‡
__USE_SVID


107 #unde‡
__USE_MISC


108 #unde‡
__USE_ATFILE


109 #unde‡
__USE_GNU


110 #unde‡
__USE_REENTRANT


111 #unde‡
__USE_FORTIFY_LEVEL


112 #unde‡
__FAVOR_BSD


113 #unde‡
__KERNEL_STRICT_NAMES


117 #i‚de‡
_LOOSE_KERNEL_NAMES


118 
	#__KERNEL_STRICT_NAMES


	)

122 
	#__USE_ANSI
 1

	)

131 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


132 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

133 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

135 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

140 #i‡
deföed
 
_BSD_SOURCE
 && \

141 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

142 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

143 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

144 
	#__FAVOR_BSD
 1

	)

148 #ifde‡
_GNU_SOURCE


149 #unde‡
_ISOC99_SOURCE


150 
	#_ISOC99_SOURCE
 1

	)

151 #unde‡
_POSIX_SOURCE


152 
	#_POSIX_SOURCE
 1

	)

153 #unde‡
_POSIX_C_SOURCE


154 
	#_POSIX_C_SOURCE
 200112L

	)

155 #unde‡
_XOPEN_SOURCE


156 
	#_XOPEN_SOURCE
 600

	)

157 #unde‡
_XOPEN_SOURCE_EXTENDED


158 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

159 #unde‡
_LARGEFILE64_SOURCE


160 
	#_LARGEFILE64_SOURCE
 1

	)

161 #unde‡
_BSD_SOURCE


162 
	#_BSD_SOURCE
 1

	)

163 #unde‡
_SVID_SOURCE


164 
	#_SVID_SOURCE
 1

	)

165 #unde‡
_ATFILE_SOURCE


166 
	#_ATFILE_SOURCE
 1

	)

171 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

172 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

173 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

174 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

175 
	#_BSD_SOURCE
 1

	)

176 
	#_SVID_SOURCE
 1

	)

183 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

184 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

185 
	#__USE_ISOC99
 1

	)

190 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

191 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

192 
	#_POSIX_SOURCE
 1

	)

193 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

194 
	#_POSIX_C_SOURCE
 2

	)

195 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

196 
	#_POSIX_C_SOURCE
 199506L

	)

198 
	#_POSIX_C_SOURCE
 200112L

	)

202 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


203 
	#__USE_POSIX
 1

	)

206 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


207 
	#__USE_POSIX2
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

211 
	#__USE_POSIX199309
 1

	)

214 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

215 
	#__USE_POSIX199506
 1

	)

218 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

219 
	#__USE_XOPEN2K
 1

	)

222 #ifdef 
_XOPEN_SOURCE


223 
	#__USE_XOPEN
 1

	)

224 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

225 
	#__USE_XOPEN_EXTENDED
 1

	)

226 
	#__USE_UNIX98
 1

	)

227 #unde‡
_LARGEFILE_SOURCE


228 
	#_LARGEFILE_SOURCE
 1

	)

229 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

230 
	#__USE_XOPEN2K
 1

	)

231 #unde‡
__USE_ISOC99


232 
	#__USE_ISOC99
 1

	)

235 #ifde‡
_XOPEN_SOURCE_EXTENDED


236 
	#__USE_XOPEN_EXTENDED
 1

	)

241 #ifde‡
_LARGEFILE_SOURCE


242 
	#__USE_LARGEFILE
 1

	)

245 #ifde‡
_LARGEFILE64_SOURCE


246 
	#__USE_LARGEFILE64
 1

	)

249 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

250 
	#__USE_FILE_OFFSET64
 1

	)

253 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


254 
	#__USE_MISC
 1

	)

257 #ifdef 
_BSD_SOURCE


258 
	#__USE_BSD
 1

	)

261 #ifdef 
_SVID_SOURCE


262 
	#__USE_SVID
 1

	)

265 #ifdef 
_ATFILE_SOURCE


266 
	#__USE_ATFILE
 1

	)

269 #ifdef 
_GNU_SOURCE


270 
	#__USE_GNU
 1

	)

273 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


274 
	#__USE_REENTRANT
 1

	)

277 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

278 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0 \

279 && (
__GNUC_PREREQ
 (4, 1) \

280 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

281 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

282 && 
	g__GNUC_MINOR__
 == 4 \

283 && (
__GNUC_PATCHLEVEL__
 > 2 \

284 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

285 #i‡
_FORTIFY_SOURCE
 > 1

286 
	#__USE_FORTIFY_LEVEL
 2

	)

288 
	#__USE_FORTIFY_LEVEL
 1

	)

291 
	#__USE_FORTIFY_LEVEL
 0

	)

295 
	#__STDC_IEC_559__
 1

	)

296 
	#__STDC_IEC_559_COMPLEX__
 1

	)

299 
	#__STDC_ISO_10646__
 200009L

	)

307 #unde‡
__GNU_LIBRARY__


308 
	#__GNU_LIBRARY__
 6

	)

312 
	#__GLIBC__
 2

	)

313 
	#__GLIBC_MINOR__
 5

	)

315 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

316 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

319 #i‡
deföed
 
__GNUC__
 \

320 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

321 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

322 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

323 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

327 #i‚de‡
__ASSEMBLER__


328 #i‚de‡
_SYS_CDEFS_H


329 
	~<sys/cdefs.h
>

334 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


335 
	#__USE_LARGEFILE
 1

	)

336 
	#__USE_LARGEFILE64
 1

	)

342 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

343 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


344 
	#__USE_EXTERN_INLINES
 1

	)

352 
	~<gnu/°ubs.h
>

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/asm-i386/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-x86_64/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

2 #i‚de‡
__ASM_STUB_IOCTLS_H


3 
	#__ASM_STUB_IOCTLS_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/io˘ls.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/io˘ls.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
__GNUC_PREREQ
 (2,97)

140 
	#__Êex¨r
 []

	)

142 #ifde‡
__GNUC__


143 
	#__Êex¨r
 [0]

	)

145 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

146 
	#__Êex¨r
 []

	)

149 
	#__Êex¨r
 [1]

	)

165 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

167 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

168 #ifde‡
__˝lu•lus


169 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

170 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

175 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

176 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

189 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

190 
	#__©åibuã__
(
xyz
Ë

	)

196 #i‡
__GNUC_PREREQ
 (2,96)

197 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

199 
	#__©åibuã_mÆloc__


	)

205 #i‡
__GNUC_PREREQ
 (2,96)

206 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

208 
	#__©åibuã_puª__


	)

214 #i‡
__GNUC_PREREQ
 (3,1)

215 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

216 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

218 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

219 
	#__©åibuã_noölöe__


	)

223 #i‡
__GNUC_PREREQ
 (3,2)

224 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

226 
	#__©åibuã_dïªˇãd__


	)

235 #i‡
__GNUC_PREREQ
 (2,8)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

238 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

245 #i‡
__GNUC_PREREQ
 (2,97)

246 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

247 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

249 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

254 #i‡
__GNUC_PREREQ
 (3,3)

255 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

257 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡
__GNUC_PREREQ
 (3,4)

263 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

264 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

265 #i‡
__USE_FORTIFY_LEVEL
 > 0

266 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

269 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

271 #i‚de‡
__wur


272 
	#__wur


	)

276 #i‡
__GNUC_PREREQ
 (3,2)

277 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

279 
	#__Æways_ölöe
 
__ölöe


	)

286 #i‡!
__GNUC_PREREQ
 (2,8)

287 
	#__exãnsi⁄__


	)

291 #i‡!
__GNUC_PREREQ
 (2,92)

292 
	#__ª°ri˘


	)

298 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


299 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

301 #ifde‡
__GNUC__


302 
	#__ª°ri˘_¨r


	)

304 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

305 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

308 
	#__ª°ri˘_¨r


	)

313 
	~<bôs/w‹dsize.h
>

315 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


316 
	#__LDBL_COMPAT
 1

	)

317 #ifde‡
__REDIRECT


318 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

319 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

320 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

321 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

322 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

323 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

324 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

325 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

326 
	#__LDBL_REDIR_DECL
(
«me
) \

327 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

330 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


331 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

332 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

333 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

334 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

335 
	#__LDBL_REDIR_DECL
(
«me
)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

24 
	#_IOC_SIZEBITS
 14

	)

25 
	#_IOC_DIRBITS
 2

	)

27 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

28 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

29 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

30 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

32 
	#_IOC_NRSHIFT
 0

	)

33 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

34 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

35 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

40 
	#_IOC_NONE
 0U

	)

41 
	#_IOC_WRITE
 1U

	)

42 
	#_IOC_READ
 2U

	)

44 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

45 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

46 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

47 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

48 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

50 #ifde‡
__KERNEL__


52 
__övÆid_size_¨gumít_f‹_IOC
;

53 
	#_IOC_TYPECHECK
(
t
) \

54 (((
t
) == (t[1]) && \

55 (
t
Ë< (1 << 
_IOC_SIZEBITS
)) ? \

56 (
t
Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

58 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

62 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

63 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

64 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

65 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

66 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

67 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

68 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

71 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

72 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

73 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

74 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

78 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

79 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

80 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

81 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

82 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-i386/ioctls.h

1 #i‚de‡
__ARCH_I386_IOCTLS_H__


2 
	#__ARCH_I386_IOCTLS_H__


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TIOCGPTN
 
	`_IOR
('T',0x30, Ë

	)

51 
	#TIOCSPTLCK
 
	`_IOW
('T',0x31, Ë

	)

53 
	#TCGETX
 0x5432

	)

54 
	#TCSETX
 0x5433

	)

55 
	#TCSETXF
 0x5434

	)

56 
	#TCSETXW
 0x5435

	)

58 
	#FIONCLEX
 0x5450

	)

59 
	#FIOCLEX
 0x5451

	)

60 
	#FIOASYNC
 0x5452

	)

61 
	#TIOCSERCONFIG
 0x5453

	)

62 
	#TIOCSERGWILD
 0x5454

	)

63 
	#TIOCSERSWILD
 0x5455

	)

64 
	#TIOCGLCKTRMIOS
 0x5456

	)

65 
	#TIOCSLCKTRMIOS
 0x5457

	)

66 
	#TIOCSERGSTRUCT
 0x5458

	)

67 
	#TIOCSERGETLSR
 0x5459

	)

68 
	#TIOCSERGETMULTI
 0x545A

	)

69 
	#TIOCSERSETMULTI
 0x545B

	)

71 
	#TIOCMIWAIT
 0x545C

	)

72 
	#TIOCGICOUNT
 0x545D

	)

73 
	#TIOCGHAYESESP
 0x545E

	)

74 
	#TIOCSHAYESESP
 0x545F

	)

75 
	#FIOQSIZE
 0x5460

	)

78 
	#TIOCPKT_DATA
 0

	)

79 
	#TIOCPKT_FLUSHREAD
 1

	)

80 
	#TIOCPKT_FLUSHWRITE
 2

	)

81 
	#TIOCPKT_STOP
 4

	)

82 
	#TIOCPKT_START
 8

	)

83 
	#TIOCPKT_NOSTOP
 16

	)

84 
	#TIOCPKT_DOSTOP
 32

	)

86 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-x86_64/ioctls.h

1 #i‚de‡
__ARCH_X8664_IOCTLS_H__


2 
	#__ARCH_X8664_IOCTLS_H__


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

46 
	#TIOCSBRK
 0x5427

	)

47 
	#TIOCCBRK
 0x5428

	)

48 
	#TIOCGSID
 0x5429

	)

49 
	#TIOCGPTN
 
	`_IOR
('T',0x30, Ë

	)

50 
	#TIOCSPTLCK
 
	`_IOW
('T',0x31, Ë

	)

52 
	#TCGETX
 0x5432

	)

53 
	#TCSETX
 0x5433

	)

54 
	#TCSETXF
 0x5434

	)

55 
	#TCSETXW
 0x5435

	)

57 
	#FIONCLEX
 0x5450

	)

58 
	#FIOCLEX
 0x5451

	)

59 
	#FIOASYNC
 0x5452

	)

60 
	#TIOCSERCONFIG
 0x5453

	)

61 
	#TIOCSERGWILD
 0x5454

	)

62 
	#TIOCSERSWILD
 0x5455

	)

63 
	#TIOCGLCKTRMIOS
 0x5456

	)

64 
	#TIOCSLCKTRMIOS
 0x5457

	)

65 
	#TIOCSERGSTRUCT
 0x5458

	)

66 
	#TIOCSERGETLSR
 0x5459

	)

67 
	#TIOCSERGETMULTI
 0x545A

	)

68 
	#TIOCSERSETMULTI
 0x545B

	)

70 
	#TIOCMIWAIT
 0x545C

	)

71 
	#TIOCGICOUNT
 0x545D

	)

72 
	#TIOCGHAYESESP
 0x545E

	)

73 
	#TIOCSHAYESESP
 0x545F

	)

74 
	#FIOQSIZE
 0x5460

	)

77 
	#TIOCPKT_DATA
 0

	)

78 
	#TIOCPKT_FLUSHREAD
 1

	)

79 
	#TIOCPKT_FLUSHWRITE
 2

	)

80 
	#TIOCPKT_STOP
 4

	)

81 
	#TIOCPKT_START
 8

	)

82 
	#TIOCPKT_NOSTOP
 16

	)

83 
	#TIOCPKT_DOSTOP
 32

	)

85 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_sigªtu∫


	)

28 
	#__°ub_s°k


	)

29 
	#__°ub_°ty


	)

	@
1
.
1
/usr/include
63
1432
alps.c
alps.h
elantech.h
hgpk.h
lifebook.c
lifebook.h
logips2pp.c
logips2pp.h
modif_annots.h
psmouse-base.c
psmouse.h
psmousebase-sfi.mod.c
psmousebase-stub.mod.c
psmousebase.kernel.c
psmousebase.merged.c
psmousebase.merged.kernel.c
psmousebase.merged.sym.c
psmousebase.sym.c
psmousebase_annotated.c
synaptics.c
synaptics.h
touchkit_ps2.h
trackpoint.c
trackpoint.h
../../common/master_top.h
../../common/slave_top.h
/usr/include/linux/input.h
/usr/include/linux/serio.h
/usr/include/asm/types.h
/usr/include/linux/ioctl.h
/usr/include/sys/ioctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/asm-i386/types.h
/usr/include/asm-x86_64/types.h
/usr/include/asm/ioctl.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/time.h
/usr/include/asm-i386/ioctl.h
/usr/include/asm-x86_64/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/bits/endian.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/xlocale.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-i386/ioctls.h
/usr/include/asm-x86_64/ioctls.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
